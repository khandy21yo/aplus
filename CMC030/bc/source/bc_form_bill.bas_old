1	%TITLE "Print BC Bills Using a Form"
	%SBTTL "BC_FORM_BILL"
	%IDENT "V3.6a Calico"

	!
	!	COPYRIGHT (C) 1987, 1988 BY
	!	Computer Management Center, Inc.
	!	Idaho Falls, Idaho.
	!
	! This software is furnished under a license and may be used and
	! copied only in accordance with terms of such license and with
	! the inclusion of the above copyright notice.  This software or
	! any other copies thereof may not be provided or otherwise made
	! available to any other person.  No title to and ownership of
	! the software is hereby transferred.
	!
	! The information in this software is subject to change without
	! notice and should not be construed as a commitment by
	! Computer Management Center, Inc.
	!
	! CMC assumes no responsibility for the use or reliability of
	! its software on equipment which is not supported by CMC.
	!
	!++
	! ID:BCJOUR
	!
	! Abstract:HELP
	!	.p
	!	The ^*Print Bills Using a Form\* option provides the means to print each
	!	customer bill using a form. The option to print in an alignment form is
	!	available and the following fields are included:
	!	.b
	!	.lm 15
	!	.list 0,"*"
	!	.le
	!	Customer Number
	!	.le
	!	Customer Name
	!	.le
	!	Customer Address
	!	.le
	!	Order Number
	!	.le
	!	Invoice Date
	!	.le
	!	Invoice Number
	!	.le
	!	Salesman
	!	.le
	!	Ship VIA
	!	.le
	!	Amount Ordered
	!	.le
	!	Amount Shipped
	!	.le
	!	Product Name
	!	.le
	!	Product Description
	!	.le
	!	Price
	!	.le
	!	Amount Due
	!	.els
	!
	! Index:
	!
	! Option:
	!
	! Compile:
	!
	!	$ BAS BC_SOURCE:BC_FORM_BILL/LINE
	!	$ LINK/EXECUTABLE=BC_EXE:*.EXE BC_FORM_BILL, -
	!		FUNC_LIB:CMCLINK/OPTION
	!	$ DELETE BC_FORM_BILL.OBJ;*
	!
	! Author:
	!
	!	07/13/88 - Kevin Handy
	!
	! Modification history:
	!
	!	07/25/88 - Kevin Handy
	!		Added BC_BILL::NOTES.
	!
	!	09/15/88 - Kevin Handy
	!		Fixed going to next page to zero line count.
	!
	!	10/03/88 - Kevin Handy
	!		Fixed so would print all lines on invoice.
	!
	!	11/29/90 - Craig Tanner
	!		Update last invoice number control file immediately
	!		after each invoice form
	!
	!	12/12/90 - Val James Allen
	!		Modified for continuious pre-numbered invoice forms
	!		optionally controlled by form FRM_ASSIGN indicator.
	!
	!	06/05/91 - J. Shad Rydalch
	!		Added form fields for address that will keep
	!		post office happy.
	!
	!	06/18/91 - Craig Tanner
	!		Fixed so that it updates user UTL_REPORT from master
	!		every time form runs.
	!
	!	03/06/92 - Kevin Handy
	!		Removed map for "BC_RESP_STAFF" since it wasn't used
	!		for anything.
	!
	!	03/12/92 - Kevin Handy
	!		Removed duplicate error trap (check)
	!
	!	06/11/92 - Kevin Handy
	!		Modified to use OUTP_INITFORM function.
	!
	!	06/16/92 - Kevin Handy
	!		Clean up (check)
	!
	!	09/23/93 - Kevin Handy
	!		Removed JJ$ and READ_SYSJOB.
	!
	!	04/15/95 - Kevin Handy
	!		(V3.6)
	!		Update to V3.6 coding standards
	!
	!	10/15/96 - Kevin Handy
	!		Reformat source coed.
	!
	!	05/09/97 - Kevin Handy
	!		Lose PRNT.CH% variable
	!
	!	05/13/97 - Kevin Handy
	!		Reformat source coed.
	!
	!	09/09/97 - Kevin Handy
	!		Lose unecessary external definitions
	!
	!	08/19/98 - Kevin Handy
	!		(V3.6a Calico)
	!		Update to V3.6a coding standards
	!
	!	10/25/98 - Kevin Handy
	!		Don't bother erasing SMG_SCREEN_DATA, which is
	!		never created.
	!--
	%PAGE

	OPTION SIZE = (INTEGER LONG, REAL GFLOAT)

	!
	! Include files
	!
	%INCLUDE "FUNC_INCLUDE:FUNCTION.HB"

	MAP (SCOPE) SCOPE_STRUCT SCOPE

	!
	! Define maps
	!
	%INCLUDE "SOURCE:[AR.OPEN]AR_35CUSTOM.HB"
	MAP (AR_35CUSTOM)	AR_35CUSTOM_CDD	AR_35CUSTOM
	MAP (AR_SHIPTO)	AR_35CUSTOM_CDD	AR_SHIPTO

	%INCLUDE "SOURCE:[BC.OPEN]BC_BILLH.HB"
	MAP (BC_BILLH)	BC_BILLH_CDD	BC_BILLH

	%INCLUDE "SOURCE:[BC.OPEN]BC_BILLL.HB"
	MAP (BC_BILLL)	BC_BILLL_CDD	BC_BILLL

	%INCLUDE "SOURCE:[BC.OPEN]BC_CUSTYP.HB"
	MAP (BC_CUSTYP) BC_CUSTYP_CDD	BC_CUSTYP

	%INCLUDE "SOURCE:[BC.OPEN]BC_CONTROL.HB"
	MAP (BC_CONTROL) BC_CONTROL_CDD BC_CONTROL

	%INCLUDE "SOURCE:[UTL.OPEN]UTL_REPORT.HB"
	MAP (UTL_REPORT) UTL_REPORT_CDD UTL_REPORT
	DECLARE UTL_REPORT_CDD UTL_REPORT_SYS

	%INCLUDE "SOURCE:[UTL.OPEN]UTL_REPORTX.HB"
	DECLARE UTL_REPORTX_CDD UTL_REPORTX

	%INCLUDE "SOURCE:[UTL.OPEN]FORM_GROUP.HB"
	DIM FORM_GROUP_CDD FORM_GROUP(20%)	! Max of 20 groups

	COM (BC_FORM) &
		TOTAL_ORDAMT, &
		TOTAL_SHPAMT, &
		TOTAL_AMOUNT, &
		TOTAL_NONTAX, &
		TOTAL_TAXABLE, &
		TOTAL_SALTAX, &
		TOTAL_FREIGHT, &
		TOTAL_DISC, &
		INVOICE_DATE$ = 8%, &
		PAGE_NUMBER%, &
		XOUTASSIGN$ = 30%, &
		AR_SHIPTO.ADDLINE$(4%) = 50%, &
		AR_CUSTOM.ADDLINE$(4%) = 50%

	!
	! External functions
	!
	EXTERNAL LONG		FUNCTION OUTP_FORMINIT
	EXTERNAL LONG		FUNCTION OUTP_FORMPRINT
	EXTERNAL LONG   FUNCTION OUTP_INITFORM

	%PAGE

	ON ERROR GOTO 19000

	!*******************************************************************
	! Initilize maintainence
	!*******************************************************************

	CALL READ_INITIALIZE

	REPORT$ = "BCJOUR"

	!
	! Look up device
	!
	CALL  READ_DEVICE("BC_FORM", BC_FORM.DEV$, STAT%)

	!***************************************************************
	! Open all of the files
	!***************************************************************

300	!
	! Open vendor master file
	!
	%INCLUDE "SOURCE:[AR.OPEN]AR_35CUSTOM.OPN"

331	!
	! TM Control file
	!
	%INCLUDE "SOURCE:[BC.OPEN]BC_CONTROL.MOD"

	GET #BC_CONTROL.CH%, REGARDLESS

	UNLOCK #BC_CONTROL.CH%

	BC_CONTROL::INV_NUM = XLATE(BC_CONTROL::INV_NUM, &
		STRING$(48%,0%) + "0123456789")

339	!
	! Open the staff file
	!
	%INCLUDE "SOURCE:[BC.OPEN]BC_CUSTYP.OPN"

340	!
	! Get Report
	!
	OPTN$ = "01" + BC_CONTROL::INV_NUM

	GOTO ExitProgram &
		IF OUTP_INITFORM(UTL_REPORTX, REPORT$, OPTN$) <> CMC$_NORMAL


	INVOICE_DATE$ = DATE_STOREDATE(UTL_REPORTX::OPTDEF(0%))
	!++
	! Abstract:FLD01
	!	^*(01) Invoice Date\*
	!	.p
	!	The ^*Invoice Date\* field provides the means to enter the date which
	!	will print on the invoices.
	!	.p
	!	The format for entry is MMDDYY or MMDDYYYY.
	!
	! Index:
	!	.x Invoice>Date
	!	.x Date>Invoice
	!
	!--

	REF_NO$ = UTL_REPORTX::OPTDEF(1%)
	!++
	! Abstract:FLD02
	!	^*(02) Invoice Number\*
	!	.p
	!	The ^*Invoice Number\* field provides for the entry of the
	!	starting number which is to appear on the invoices that
	!	are to be printed.
	!
	! Index:
	!	.x Invoice Number>Starting
	!	.x Invoice Number
	!
	!--

	REPORT$ = REPORT$ + "$" + TRM$(UTL_REPORTX::OPTDEF(2%))
	!++
	! Abstract:FLD03
	!	^*(03) Form Name\*
	!	.p
	!	The ^*Form Name\* field refers to the name of
	!	the form which will be used to print the Billing Customer
	!	Journal.
	!	.p
	!	The field will accept eight (8) alphanumeric characters.
	!
	! Index:
	!	.x Form>Name
	!
	!--

	BATCH_NO$ = EDIT$(UTL_REPORTX::OPTDEF(3%), 132%)

	!++
	! Abstract:FLD04
	!	^* (04) Batch Number\*
	!	.p
	!	The ^*Batch Number\* field provides the means to enter a
	!	particular batch to be printed.
	!	.p
	!	Only one batch at a time may be printed.
	!	.p
	!	An entry is required in this field.
	!
	! Index:
	!	.x Batch Number>Print Journal
	!	.x Print Journal>Batch Number
	!
	!--

	!
	! Restore original values for the help message
	!
	SCOPE::PRG_IDENT = TEMP_IDENT$
	SCOPE::PRG_PROGRAM = TEMP_PROGRAM$

585	!
	! Open the bill header file, now that we have the batch number.
	!
	%INCLUDE "SOURCE:[BC.OPEN]BC_BILLH.MOD"

586	!
	! Open the bill lines file, now that we have the batch number.
	!
	%INCLUDE "SOURCE:[BC.OPEN]BC_BILLL.OPN"

590	!
	! Load in the form
	!
	GOSUB LoadForm

	!
	! GOTO aligment routine
	!
	GOSUB Alignment

	%PAGE

2000	!*******************************************************************
	! Read through CDJ file
	!*******************************************************************

	RESET #BC_BILLH.CH%

2005	GET #BC_BILLH.CH%
	!
	! Skip unless invoice number field is blank
	!
	GOTO 2009 IF BC_BILLH::INVNUM <> ""

	!
	! Set up for Xing out pre-printed invoice numbers on form
	!
	XOUTASSIGN$ = ""
	!
	! Assign invoice number to item
	!
	BC_BILLH::INVNUM = REF_NO$

	GOSUB PrintBill

2006	UPDATE #BC_BILLH.CH%

2007	!
	! Get control record and update last invoice number immediately
	!
	GET #BC_CONTROL.CH%, RECORD 1%

	BC_CONTROL::INV_NUM = REF_NO$

2008	UPDATE #BC_CONTROL.CH%

	STAT% = FUNC_INCREMENT(REF_NO$)	! Increment invoice number

2009	GOTO 2005

 PrintBill:
2010	!*******************************************************************
	! Get next record
	!*******************************************************************

	GET #AR_35CUSTOM.CH%, KEY#0% EQ BC_BILLH::SHPNUM, REGARDLESS

	AR_SHIPTO = AR_35CUSTOM

	!
	! Create an address line format that reduces white space
	!
	I% = 0%

	IF EDIT$(AR_SHIPTO::ADD1, -1%) <> ""
	THEN
		I% = I% + 1%
		AR_SHIPTO.ADDLINE$(I%) = &
			EDIT$(AR_SHIPTO::ADD1, 8% + 16% + 32% + 128%)
	END IF

	IF EDIT$(AR_SHIPTO::ADD2, -1%) <> ""
	THEN
		I% = I% + 1%
		AR_SHIPTO.ADDLINE$(I%) = &
			EDIT$(AR_SHIPTO::ADD2, 8% + 16% + 32% + 128%)
	END IF

	IF EDIT$(AR_SHIPTO::ADD3, -1%) <> ""
	THEN
		I% = I% + 1%
		AR_SHIPTO.ADDLINE$(I%) = &
			EDIT$(AR_SHIPTO::ADD3, 8% + 16% + 32% + 128%)
	END IF

	I% = I% + 1%
	AR_SHIPTO.ADDLINE$(I%) = EDIT$(EDIT$(AR_SHIPTO::CITY, 128%) + ", " + &
		AR_SHIPTO::STATE + " " + AR_SHIPTO::ZIP + " " + &
		AR_SHIPTO::COUNTRY, 8% + 16% + 32% + 128%)

	AR_SHIPTO.ADDLINE$(LOOP%) = "" FOR LOOP% = I% + 1% TO 3%


2015	GET #AR_35CUSTOM.CH%, KEY#0% EQ BC_BILLH::CUSNUM, REGARDLESS

	!
	! Create an address line format that reduces white space
	!
	I% = 0%

	IF EDIT$(AR_35CUSTOM::ADD1, -1%) <> ""
	THEN
		I% = I% + 1%
		AR_CUSTOM.ADDLINE$(I%) = &
			EDIT$(AR_35CUSTOM::ADD1, 8% + 16% + 32% + 128%)
	END IF

	IF EDIT$(AR_35CUSTOM::ADD2, -1%) <> ""
	THEN
		I% = I% + 1%
		AR_CUSTOM.ADDLINE$(I%) = &
			EDIT$(AR_35CUSTOM::ADD2, 8% + 16% + 32% + 128%)
	END IF

	IF EDIT$(AR_35CUSTOM::ADD3, -1%) <> ""
	THEN
		I% = I% + 1%
		AR_CUSTOM.ADDLINE$(I%) = &
			EDIT$(AR_35CUSTOM::ADD3, 8% + 16% + 32% + 128%)
	END IF

	I% = I% + 1%
	AR_CUSTOM.ADDLINE$(I%) = EDIT$(EDIT$(AR_35CUSTOM::CITY, 128%) + ", " + &
		AR_35CUSTOM::STATE + " " + AR_35CUSTOM::ZIP + " " + &
		AR_35CUSTOM::COUNTRY, 8% + 16% + 32% + 128%)

	AR_CUSTOM.ADDLINE$(LOOP%) = "" FOR LOOP% = I% + 1% TO 4%

2020	!
	! Go through the WIP file, and see what groups have been
	! allocated, and generate totals for each group.
	!
	TOTAL_ORDAMT = 0.0
	TOTAL_SHPAMT = 0.0
	TOTAL_AMOUNT = 0.0
	TOTAL_NONTAX = 0.0
	TOTAL_TAXABLE = 0.0
	TOTAL_SALTAX = 0.0
	TOTAL_FREIGHT= 0.0
	TOTAL_DISC   = 0.0

	FIND #BC_BILLL.CH%, KEY#0% GE BC_BILLH::ORDER, REGARDLESS

2050	GET #BC_BILLL.CH%, REGARDLESS

	!
	! Give up when the order number changes
	!
	IF BC_BILLL::ORDER = BC_BILLH::ORDER
	THEN
		SELECT BC_BILLL::LTYPE
		!
		! Freight
		!
		CASE "F"
			TOTAL_FREIGHT = TOTAL_FREIGHT + BC_BILLL::AMOUNT

		!
		! Discount, other
		!
		CASE "D", "O"
			TOTAL_DISC = TOTAL_DISC + BC_BILLL::AMOUNT

		!
		! Sales tax
		!
		CASE "T"
			TOTAL_SALTAX = TOTAL_SALTAX + BC_BILLL::AMOUNT

		!
		!
		!
		CASE "C", "I"
			! This is not record anywhere

		!
		!
		!
		CASE "S"
			SELECT BC_BILLL::TAXTYP
			CASE "O", "2", "3", "4", "5", "6"
				TOTAL_NONTAX = TOTAL_NONTAX + &
					BC_BILLL::AMOUNT
			CASE "1"
				TOTAL_TAXABLE = TOTAL_TAXABLE + &
					BC_BILLL::AMOUNT
			END SELECT

		END SELECT

		TOTAL_ORDAMT = TOTAL_ORDAMT + BC_BILLL::ORDAMT
		TOTAL_SHPAMT = TOTAL_SHPAMT + BC_BILLL::SHPAMT
		TOTAL_AMOUNT = TOTAL_AMOUNT + BC_BILLL::AMOUNT

		GOTO 2050

	END IF

2100	!
	! Is there anything to print
	!
	GOSUB PrintForm

2180	GOTO ExitProgram IF UTL_REPORTX::STAT

2190	!
	! Go get the next vendor record
	!
	RETURN

	%PAGE

 ExitProgram:
4010	!******************************************************************
	! Exit the program
	!******************************************************************

	CALL OUTP_FINISHNOTITLE(UTL_REPORTX)

	CLOSE BC_CONTROL.CH%

	!
	! Erase Display
	!
	SMG_STATUS% = SMG$ERASE_DISPLAY(SCOPE::SMG_OPTION)
	SMG_STATUS% = SMG$ERASE_DISPLAY(SCOPE::SMG_MESSAGE)

	!
	! Change the width
	!
	SMG_STATUS% = SMG$CHANGE_PBD_CHARACTERISTICS(SCOPE::SMG_PBID, 80%)

 ExitProgram1:
	CALL SUBR_3EXITPROGRAM(SCOPE, "", "")

	%PAGE

 PrintForm:
18000	!***************************************************************
	! Print the bill now
	!***************************************************************

	FOR FORM_LOOP% = 1% TO FORM_GROUP%

		!
		! Page if necessary
		!
		IF LINE_COUNT% > FORM_GROUP(FRM_TOP%)::NUMBER - 4%
		THEN
			GOSUB NewPage
		END IF

		!
		! Top of the form
		!
		IF (FORM_GROUP(FORM_LOOP%)::FGROUP = "FRM-TOP")
		THEN
			LINE_COUNT% = LINE_COUNT% + OUTP_FORMPRINT(UTL_REPORTX, &
				FORM_LOOP%, &
				FORM_TEXT$, &
				FORM_GROUPS%, &
				FORM_GROUP(), &
				0%)
			GOTO 18080
		END IF

		!
		! Body of a group
		!
		IF (FORM_GROUP(FORM_LOOP%)::FGROUP = "FRM-BODY")
		THEN
			GOSUB BillLine

			GOTO 18080
		END IF

		!
		! Bottom of the form
		!
		IF (FORM_GROUP(FORM_LOOP%)::FGROUP = "FRM-BOTTOM")
		THEN
			LINE_COUNT% = LINE_COUNT% + OUTP_FORMPRINT(UTL_REPORTX, &
				FORM_LOOP%, &
				FORM_TEXT$, &
				FORM_GROUPS%, &
				FORM_GROUP(), &
				0%)
			GOTO 18080
		END IF

		!
		! Don't know what it is.  Fake it.
		!
		LINE_COUNT% = LINE_COUNT% + OUTP_FORMPRINT(UTL_REPORTX, &
			FORM_LOOP%, &
			FORM_TEXT$, &
			FORM_GROUPS%, &
			FORM_GROUP(), &
			0%)

18080	NEXT FORM_LOOP%

	!
	! Print lines to botton of the form
	!
	CALL OUTP_LINENOTITLE(LYT_LINE$, UTL_REPORTX, "", 0%) &
		FOR LOOP% = LINE_COUNT% + 1% TO FORM_GROUP(FRM_TOP%)::NUMBER

	LINE_COUNT% = 0%

18190	!
	! Done with this form
	!
	RETURN

 NewPage:
	!*******************************************************************
	! Skip to next page
	!*******************************************************************

	CALL OUTP_LINENOTITLE(LYT_LINE$, UTL_REPORTX, "", 0%) &
		FOR LOOP% = LINE_COUNT% + 1% TO FORM_GROUP(FRM_TOP%)::NUMBER

	!
	! Set up for new page
	!
	LINE_COUNT% = 0%
	PAGE_NUMBER% = PAGE_NUMBER% + 1%

	!
	! Check if pre-assigned form numbers used
	! and increase it
	!
	IF FRM_ASSIGN% = 1%
	THEN
		STAT% = FUNC_INCREMENT(REF_NO$)
		XOUTASSIGN$ = STRING$(30%, ASCII("X"))
	END IF

	!
	! Print top of page, if we have one.
	!
	LINE_COUNT% = LINE_COUNT% + OUTP_FORMPRINT(UTL_REPORTX, &
		FRM_TOP%, &
		FORM_TEXT$, &
		FORM_GROUPS%, &
		FORM_GROUP(), &
		0%) &
		IF FRM_TOP%

	RETURN

	%PAGE

 BillLine:
18200	!*******************************************************************
	! Print out all info that exists for a specific grouping of
	! matter types
	!*******************************************************************

	THIS_COUNT% = 0%

	!
	! Get first item
	!
	FIND #BC_BILLL.CH%, KEY #0% GE BC_BILLH::ORDER, REGARDLESS

18210	!
	! Pull up next
	!
	GET #BC_BILLL.CH%, REGARDLESS

	!
	! Exit when done
	!
	GOTO 18290 IF BC_BILLL::ORDER <> BC_BILLH::ORDER

18230	!
	! Print out line
	!
	!
	! Page if necessary
	!
	IF (LINE_COUNT% > FORM_GROUP(FRM_TOP%)::NUMBER - 8%) OR &
		((THIS_COUNT% >= FORM_GROUP(FORM_LOOP%)::NUMBER - 1%) AND &
		(FORM_GROUP(FORM_LOOP%)::NUMBER <> 0%))
	THEN
		GOSUB NewPage
		THIS_COUNT% = 0%
	END IF

	TEMP_COUNT% = OUTP_FORMPRINT(UTL_REPORTX, &
		FORM_LOOP%, &
		FORM_TEXT$, &
		FORM_GROUPS%, &
		FORM_GROUP(), &
		0%)

	LINE_COUNT% = LINE_COUNT% + TEMP_COUNT%
	THIS_COUNT% = THIS_COUNT% + TEMP_COUNT%

	!
	! Get next record
	!
	GOTO 18210

18290	!
	! Exit from section
	!
	IF (FORM_GROUP(FORM_LOOP%)::NUMBER <> 0%)
	THEN
		FOR LOOP% = THIS_COUNT% + 1% TO FORM_GROUP(FORM_LOOP%)::NUMBER
			CALL OUTP_LINENOTITLE(LYT_LINE$, UTL_REPORTX, "", 0%)
			LINE_COUNT% = LINE_COUNT% + 1%
		NEXT LOOP%
	END IF

	RETURN

	%PAGE

 Alignment:
	!*******************************************************************
	! Print alignment form, if desireable
	!*******************************************************************

	SMG_STATUS% = SMG$ERASE_DISPLAY(SCOPE::SMG_OPTION)
	SMG_STATUS% = SMG$ERASE_DISPLAY(SCOPE::SMG_MESSAGE)

	PAGE_NUMBER% = 1%
	LINE_COUNT% = 0%
	BODY_COUNT% = 0%

	UTL_REPORTX::LINENO = 0%
	UTL_REPORTX::PAGENO = 0%

	SCOPE::PRG_ITEM = "ALIGNMENT"
	JUNK$ = ENTR_3YESNO(SCOPE, SCOPE::SMG_OPTION, "", &
		"Do you want an alignment form?  Confirm then press <Do> ", &
		"N", 0%, "'E", "")

	SMG_STATUS% = SMG$ERASE_DISPLAY(SCOPE::SMG_OPTION)

	SELECT SCOPE::SCOPE_EXIT

	!
	! An exit key was typed
	!
	CASE 3%, SMG$K_TRM_CTRLZ, SMG$K_TRM_F10
		GOTO ExitProgram

	!
	! Return, etc. act as next screen
	!
	CASE 10%, 12%, 13%, SMG$K_TRM_F7, SMG$K_TRM_DO

	!
	! Case else
	!
	CASE ELSE
		CALL ENTR_3BADKEY(SCOPE,SCOPE::SCOPE_EXIT)
		GOTO Alignment

	END SELECT

	GOTO AlignmentReturn IF JUNK$ <> "Y"

	!
	! Print the top
	!
	LINE_COUNT% = OUTP_FORMPRINT(UTL_REPORTX, &
		FRM_TOP%, &
		FORM_TEXT$, &
		FORM_GROUPS%, &
		FORM_GROUP(), &
		1%)

	!
	! Print the body
	!

	BODY_COUNT% = BODY_COUNT% + OUTP_FORMPRINT(UTL_REPORTX, &
		FRM_BODY%, &
		FORM_TEXT$, &
		FORM_GROUPS%, &
		FORM_GROUP(), &
		1%) &
		FOR I% = 1% TO 3%

	CALL OUTP_LINENOTITLE(LYT_LINE$, UTL_REPORTX, "", 0%) &
		FOR I% = BODY_COUNT% + 1% TO FORM_GROUP(FRM_BODY%)::NUMBER

	LINE_COUNT% = LINE_COUNT% + FORM_GROUP(FRM_BODY%)::NUMBER

	!
	! Display BOTTOM
	!
	LINE_COUNT% = LINE_COUNT% + OUTP_FORMPRINT(UTL_REPORTX, &
		FRM_BOTTOM%, &
		FORM_TEXT$, &
		FORM_GROUPS%, &
		FORM_GROUP(), &
		1%)

	!
	! Print lines to botton
	!
	CALL OUTP_LINENOTITLE(LYT_LINE$, UTL_REPORTX, "", 0%) &
		FOR LOOP% = LINE_COUNT% + 1% TO FORM_GROUP(FRM_TOP%)::NUMBER

	!
	! Do they need another?
	!
	GOTO Alignment

 AlignmentReturn:
	RETURN

	%PAGE

 LoadForm:
	!*******************************************************************
	! Initilize bill form
	!*******************************************************************

	!
	! Get form from the AR form library
	!
	SMG_STATUS% = OUTP_FORMINIT( &
		BC_FORM.DEV$ + "BC_FORM", REPORT$, &
		FORM_TEXT$, FORM_GROUP%, FORM_GROUP())

	!
	! Was there an error?
	!
	IF SMG_STATUS% <> 0%
	THEN
		CALL HELP_34MESSAGE(SCOPE, "Statement form is missing ", &
			"E", SCOPE::PRG_PROGRAM, REPORT$, NUM1$(SMG_STATUS%))
		GOTO ExitProgram
	END IF

	!
	! Search for the desired parts of the form
	!
	FRM_TOP% = 0%
	FRM_BODY% = 0%
	FRM_BOTTOM% = 0%
	FRM_ASSIGN% = 0%

	FOR I% = 1% TO FORM_GROUP%

		SELECT FORM_GROUP(I%)::FGROUP

		CASE "FRM-TOP"
			FRM_TOP% = I%

		CASE "FRM-BOTTOM"
			FRM_BOTTOM% = I%

		CASE "FRM-BODY"
			FRM_BODY% = I%

		CASE "FRM-ASSIGN"
			FRM_ASSIGN% = 1%
		END SELECT

	NEXT I%

	RETURN

	%PAGE

19000	!*******************************************************************
	! Trap errors
	!*******************************************************************

	!
	! Handle record locked errors
	!
	IF ERR = 154%
	THEN
		SLEEP 5%
		RESUME
	END IF

	FILENAME$ = ""
	SELECT ERL

	!
	! Unable to open vendor master file
	!
	CASE 300%
		FILENAME$ = "AR_35CUSTOM"

	!
	! Unable to open users report file
	!
	CASE 331%
		FILENAME$ = "BC_CONTROL"

	!
	! Unable to open customer type file
	!
	CASE 339%
		FILENAME$ = "BC_CUSTYP"

	!
	! Unable to open WIP file
	!
	CASE 590%
		FILENAME$ = "BC_BILLL"

	!
	! Unable to open billing journal header file
	!
	CASE 585%
		FILENAME$ = "BC_BILLH"

	!
	! Unable to open billing journal line file
	!
	CASE 586%
		FILENAME$ = "BC_BILLL"

	!
	! Vendor file is empty
	!
	CASE 2000%, 2005%
		RESUME ExitProgram

	!
	! Unable to get the control record
	!
	CASE 2007%
		FILENAME$ = "BC_CONTROL"

	!
	! End of vendor file
	!
	CASE 2010%
		AR_SHIPTO::CUSNUM = BC_BILLH::CUSNUM
		AR_SHIPTO::CUSNAM = ""
		AR_SHIPTO::ADD1 = ""
		AR_SHIPTO::ADD2 = ""
		AR_SHIPTO::CITY = ""
		AR_SHIPTO::STATE = ""
		AR_SHIPTO::ZIP = ""
		RESUME 2015

	!
	! End of vendor file
	!
	CASE 2015%
		AR_35CUSTOM::CUSNUM = BC_BILLH::CUSNUM
		AR_35CUSTOM::CUSNAM = ""
		AR_35CUSTOM::ADD1 = ""
		AR_35CUSTOM::ADD2 = ""
		AR_35CUSTOM::CITY = ""
		AR_35CUSTOM::STATE = ""
		AR_35CUSTOM::ZIP = ""
		RESUME 2020

	!
	! Error looking through WIP file
	!
	CASE 2020%, 2050%
		RESUME 2100

	!
	! End of WIP file
	!
	CASE 18200%, 18210%
		RESUME 18290

	END SELECT

	!
	! Untrapped error
	!
	RESUME 19990

19990	!
	! This moved from inside error to outside so that errors occuring
	! at lower levels could be trapped.  Basic will not allow any
	! error to occur inside of an error no matter if it is in a
	! different module.
	!
	CALL HELP_34MESSAGE(SCOPE, NUM1$(ERL) + " " + ERT$(ERR), &
		"E", ERN$, FILENAME$, NUM1$(ERR))

	GOTO ExitProgram

	!
	! Handle the cases where a file couldn't be opened
	!
	END

20000	SUB FORM_LOADVAR(VARNAME$, REALVALUE, TEXTVALUE$)

	!*******************************************************************
	! This function is used to return the value of a field back to the
	! form printer.
	!*******************************************************************

	OPTION SIZE = (INTEGER LONG, REAL GFLOAT)

	%INCLUDE "FUNC_INCLUDE:FUNCTION.HB"

	!
	! Define maps
	!
	%INCLUDE "SOURCE:[AR.OPEN]AR_35CUSTOM.HB"
	MAP (AR_35CUSTOM)	AR_35CUSTOM_CDD	AR_35CUSTOM
	MAP (AR_SHIPTO)	AR_35CUSTOM_CDD	AR_SHIPTO

	%INCLUDE "SOURCE:[BC.OPEN]BC_BILLH.HB"
	MAP (BC_BILLH)	BC_BILLH_CDD	BC_BILLH

	%INCLUDE "SOURCE:[BC.OPEN]BC_BILLL.HB"
	MAP (BC_BILLL)	BC_BILLL_CDD	BC_BILLL

	%INCLUDE "SOURCE:[BC.OPEN]BC_CUSTYP.HB"
	MAP (BC_CUSTYP) BC_CUSTYP_CDD	BC_CUSTYP

	COM (BC_FORM) &
		TOTAL_ORDAMT, &
		TOTAL_SHPAMT, &
		TOTAL_AMOUNT, &
		TOTAL_NONTAX, &
		TOTAL_TAXABLE, &
		TOTAL_SALTAX, &
		TOTAL_FREIGHT, &
		TOTAL_DISC, &
		INVOICE_DATE$ = 8%, &
		PAGE_NUMBER%, &
		XOUTASSIGN$ = 30%, &
		AR_SHIPTO.ADDLINE$(4%) = 50%, &
		AR_CUSTOM.ADDLINE$(4%) = 50%

	!
	! External functions
	!
	EXTERNAL LONG   FUNCTION LIBR_EXTRACTVAR

	%PAGE

	!
	! Set up default values
	!
	REALVALUE = 0.0
	TEXTVALUE$ = "????????"

	!
	! Pick by variable
	!
	SELECT VARNAME$

	!************************************************************
	! Fields for the AR_SHIPTO file
	!************************************************************

	CASE "AR_SHIPTO::CUSNUM"
		TEXTVALUE$ = AR_SHIPTO::CUSNUM

	CASE "AR_SHIPTO::CUSNAM"
		TEXTVALUE$ = AR_SHIPTO::CUSNAM

	CASE "AR_SHIPTO::ADD1"
		TEXTVALUE$ = AR_SHIPTO::ADD1

	CASE "AR_SHIPTO::ADD2"
		TEXTVALUE$ = AR_SHIPTO::ADD2

	CASE "AR_SHIPTO::ADD3"
		TEXTVALUE$ = AR_SHIPTO::ADD3

	CASE "AR_SHIPTO::CITY"
		TEXTVALUE$ = AR_SHIPTO::CITY

	CASE "AR_SHIPTO::STATE"
		TEXTVALUE$ = AR_SHIPTO::STATE

	CASE "AR_SHIPTO::ZIP"
		TEXTVALUE$ = AR_SHIPTO::ZIP

	CASE "AR_SHIPTO::COUNTRY"
		TEXTVALUE$ = AR_SHIPTO::COUNTRY

	CASE "AR_SHIPTO::COUNTY"
		TEXTVALUE$ = AR_SHIPTO::COUNTY

	CASE "AR_SHIPTO.ADDLINE1"	! Substitute Ship to Address
		TEXTVALUE$ = AR_SHIPTO.ADDLINE$(1%)

	CASE "AR_SHIPTO.ADDLINE2"	! Substitute Ship to Address
		TEXTVALUE$ = AR_SHIPTO.ADDLINE$(2%)

	CASE "AR_SHIPTO.ADDLINE3"	! Substitute Ship to Address
		TEXTVALUE$ = AR_SHIPTO.ADDLINE$(3%)

	CASE "AR_SHIPTO.ADDLINE4"	! Substitute Ship to Address
		TEXTVALUE$ = AR_SHIPTO.ADDLINE$(4%)

	CASE "AR_SHIPTO::PHONE"
		TEXTVALUE$ = AR_SHIPTO::PHONE

	CASE "AR_SHIPTO::METHOD"
		TEXTVALUE$ = AR_SHIPTO::METHOD

	CASE "AR_SHIPTO::STMTFLG"
		TEXTVALUE$ = AR_SHIPTO::STMTFLG

	CASE "AR_SHIPTO::ALPSRT"
		TEXTVALUE$ = AR_SHIPTO::ALPSRT

	!************************************************************
	! Fields for the AR_35CUSTOM file
	!************************************************************

	CASE "AR_35CUSTOM::CUSNUM", "AR_CUSTOM::CUSNUM"
		TEXTVALUE$ = AR_35CUSTOM::CUSNUM

	CASE "AR_35CUSTOM::CUSNAM", "AR_CUSTOM::CUSNAM"
		TEXTVALUE$ = AR_35CUSTOM::CUSNAM

	CASE "AR_35CUSTOM::TTYPE", "AR_CUSTOM::TTYPE"
		TEXTVALUE$ = AR_35CUSTOM::TTYPE

	CASE "AR_35CUSTOM::CATEGORY", "AR_CUSTOM::CATEGORY"
		TEXTVALUE$ = AR_35CUSTOM::CATEGORY

	CASE "AR_35CUSTOM::BDATE", "AR_CUSTOM::BDATE"
		TEXTVALUE$ = PRNT_DATE(AR_35CUSTOM::BDATE, 8%)

	CASE "AR_35CUSTOM::SSTATUS", "AR_CUSTOM::SSTATUS"
		TEXTVALUE$ = AR_35CUSTOM::SSTATUS

	CASE "AR_35CUSTOM::EDATE", "AR_CUSTOM::EDATE"
		TEXTVALUE$ = PRNT_DATE(AR_35CUSTOM::EDATE, 8%)

	CASE "AR_35CUSTOM::ADD1", "AR_CUSTOM::ADD1"
		TEXTVALUE$ = AR_35CUSTOM::ADD1

	CASE "AR_35CUSTOM::ADD2", "AR_CUSTOM::ADD2"
		TEXTVALUE$ = AR_35CUSTOM::ADD2

	CASE "AR_35CUSTOM::ADD3", "AR_CUSTOM::ADD3"
		TEXTVALUE$ = AR_35CUSTOM::ADD3

	CASE "AR_35CUSTOM::CITY", "AR_CUSTOM::CITY"
		TEXTVALUE$ = AR_35CUSTOM::CITY

	CASE "AR_35CUSTOM::STATE", "AR_CUSTOM::STATE"
		TEXTVALUE$ = AR_35CUSTOM::STATE

	CASE "AR_35CUSTOM::ZIP", "AR_CUSTOM::ZIP"
		TEXTVALUE$ = AR_35CUSTOM::ZIP

	CASE "AR_35CUSTOM::COUNTRY", "AR_CUSTOM::COUNTRY"
		TEXTVALUE$ = AR_35CUSTOM::COUNTRY

	CASE "AR_35CUSTOM::COUNTY", "AR_CUSTOM::COUNTY"
		TEXTVALUE$ = AR_35CUSTOM::COUNTY

	CASE "AR_CUSTOM.ADDLINE1"	! Substitute Customer Address
		TEXTVALUE$ = AR_CUSTOM.ADDLINE$(1%)

	CASE "AR_CUSTOM.ADDLINE2"	! Substitute Customer Address
		TEXTVALUE$ = AR_CUSTOM.ADDLINE$(2%)

	CASE "AR_CUSTOM.ADDLINE3"	! Substitute Customer Address
		TEXTVALUE$ = AR_CUSTOM.ADDLINE$(3%)

	CASE "AR_CUSTOM.ADDLINE4"	! Substitute Customer Address
		TEXTVALUE$ = AR_CUSTOM.ADDLINE$(4%)

	CASE "AR_35CUSTOM::PHONE", "AR_CUSTOM::PHONE"
		TEXTVALUE$ = AR_35CUSTOM::PHONE

	CASE "AR_35CUSTOM::METHOD", "AR_CUSTOM::METHOD"
		TEXTVALUE$ = AR_35CUSTOM::METHOD

	CASE "AR_35CUSTOM::STMTFLG", "AR_CUSTOM::STMTFLG"
		TEXTVALUE$ = AR_35CUSTOM::STMTFLG

	CASE "AR_35CUSTOM::ALPSRT", "AR_CUSTOM::ALPSRT"
		TEXTVALUE$ = AR_35CUSTOM::ALPSRT

	CASE "AR_35CUSTOM::SERCHRG", "AR_CUSTOM::SERCHRG"
		TEXTVALUE$ = AR_35CUSTOM::SERCHRG

	CASE "AR_35CUSTOM::TAXCODE", "AR_CUSTOM::TAXCODE"
		TEXTVALUE$ = AR_35CUSTOM::TAXCODE

	CASE "AR_35CUSTOM::TAXEXEMP", "AR_CUSTOM::TAXEXEMP"
		TEXTVALUE$ = AR_35CUSTOM::TAXEXEMP

	CASE "AR_35CUSTOM::LOCATION", "AR_CUSTOM::LOCATION"
		TEXTVALUE$ = AR_35CUSTOM::LOCATION

	CASE "AR_35CUSTOM::TERMS", "AR_CUSTOM::TERMS"
		TEXTVALUE$ = AR_35CUSTOM::TERMS

	CASE "AR_35CUSTOM::CARRIER", "AR_CUSTOM::CARRIER"
		TEXTVALUE$ = AR_35CUSTOM::CARRIER

	CASE "AR_35CUSTOM::SALESMAN", "AR_CUSTOM::SALESMAN"
		TEXTVALUE$ = AR_35CUSTOM::SALESMAN

	CASE "AR_35CUSTOM::CREDITLIM", "AR_CUSTOM::CREDITLIM"
		REALVALUE  = AR_35CUSTOM::CREDITLIM

	CASE "AR_35CUSTOM::DISCOUNT", "AR_CUSTOM::DISCOUNT"
		REALVALUE  = AR_35CUSTOM::DISCOUNT

	CASE "AR_35CUSTOM::BACKORDER", "AR_CUSTOM::BACKORDER"
		TEXTVALUE$ = AR_35CUSTOM::BACKORDER

	CASE "AR_35CUSTOM::TAXFLAG", "AR_CUSTOM::TAXFLAG"
		TEXTVALUE$ = AR_35CUSTOM::TAXFLAG

	!************************************************************
	! BC_BILLH fields
	!************************************************************

	CASE "BC_BILLH::ORDER"
		TEXTVALUE$ = BC_BILLH::ORDER

	CASE "BC_BILLH::CUSNUM"
		TEXTVALUE$ = BC_BILLH::CUSNUM

	CASE "BC_BILLH::SHPNUM"
		TEXTVALUE$ = BC_BILLH::SHPNUM

	CASE "BC_BILLH::SALEMAN"
		TEXTVALUE$ = BC_BILLH::SALEMAN

	CASE "BC_BILLH::ORDERDATE"
		TEXTVALUE$ = BC_BILLH::ORDERDATE

	CASE "BC_BILLH::SHPVIA"
		TEXTVALUE$ = BC_BILLH::SHPVIA

	CASE "BC_BILLH::INVNUM", "INVOICE_NUMBER"
		TEXTVALUE$ = BC_BILLH::INVNUM

	CASE "BC_BILLH::TERMS"
		TEXTVALUE$ = BC_BILLH::TERMS

	CASE "BC_BILLH::ACCOUNT"
		TEXTVALUE$ = BC_BILLH::ACCOUNT

	CASE "BC_BILLH::REFNUM"
		TEXTVALUE$ = BC_BILLH::REFNUM

	!************************************************************
	! BC_BILLL fields
	!************************************************************

	CASE "BC_BILLL::ORDER"
		TEXTVALUE$ = BC_BILLL::ORDER

	CASE "BC_BILLL::LINENO"
		TEXTVALUE$ = BC_BILLL::LINENO

	CASE "BC_BILLL::ORDAMT"
		REALVALUE = BC_BILLL::ORDAMT

	CASE "BC_BILLL::SHPAMT"
		REALVALUE = BC_BILLL::SHPAMT

	CASE "BC_BILLL::BOAMT"
		REALVALUE = BC_BILLL::BOAMT

	CASE "BC_BILLL::PRODUCT"
		TEXTVALUE$ = BC_BILLL::PRODUCT

	CASE "BC_BILLL::DESCR"
		TEXTVALUE$ = BC_BILLL::DESCR

	CASE "BC_BILLL::UNITME"
		TEXTVALUE$ = BC_BILLL::UNITME

	CASE "BC_BILLL::UNIPRI"
		REALVALUE = BC_BILLL::UNIPRI

	CASE "BC_BILLL::AMOUNT"
		REALVALUE = BC_BILLL::AMOUNT

	CASE "BC_BILLL::ACCOUNT"
		TEXTVALUE$ = BC_BILLL::ACCOUNT

	CASE "BC_BILLL::NOTES"
		CALL READ_DEVICE("BC_BILL", BC_BILL.DEV1$, STAT%)
		ST% = LIBR_EXTRACTVAR( &
			BC_BILL.DEV1$ + "BC_BILL", &
			LAST_NOTE$, &
			BC_BILLL::ORDER + BC_BILLL::LINENO)
		TEXTVALUE$ = LAST_NOTE$

	!************************************************************
	! Customer type
	!************************************************************

	CASE "BC_CUSTYP::CUSTYP"
		TEXTVALUE$ = BC_CUSTYP::CUSTYP

	CASE "BC_CUSTYP::DESCR"
		TEXTVALUE$ = BC_CUSTYP::DESCR

	!************************************************************
	! Non fielded values
	!************************************************************

	CASE "TOTAL_ORDAMT"
		REALVALUE = TOTAL_ORDAMT

	CASE "TOTAL_NONTAX"
		REALVALUE = TOTAL_NONTAX

	CASE "TOTAL_TAXABLE"
		REALVALUE = TOTAL_TAXABLE

	CASE "TOTAL_SALTAX"
		REALVALUE = TOTAL_SALTAX

	CASE "TOTAL_FREIGHT"
		REALVALUE = TOTAL_FREIGHT

	CASE "TOTAL_DISC"
		REALVALUE = TOTAL_DISC

	CASE "TOTAL_SHPAMT"
		REALVALUE = TOTAL_SHPAMT

	CASE "TOTAL_AMOUNT"
		REALVALUE = TOTAL_AMOUNT

	CASE "INVOICE_DATE"
		TEXTVALUE$ = PRNT_DATE(INVOICE_DATE$, 6%)

	CASE "PAGE_NUMBER"
		REALVALUE = PAGE_NUMBER%
		TEXTVALUE$ = NUM1$(PAGE_NUMBER%)

	CASE "XOUT_ASSIGN"
		TEXTVALUE$ = XOUTASSIGN$
	END SELECT

	END SUB
