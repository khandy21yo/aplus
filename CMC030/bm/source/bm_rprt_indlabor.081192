1	%TITLE "Product Indented Labor"
	%SBTTL "BM_RPRT_INDLABOR"
	%IDENT "V3.3"

	!
	! COPYRIGHT (C) 1992 BY
	!
	! Computer Management Center, Inc.
	! Idaho Falls, Idaho.
	!
	! This software is furnished under a license and may be used and
	! copied only in accordance with terms of such license and with
	! the inclusion of the above copyright notice.  This software or
	! any other copies thereof may not be provided or otherwise made
	! available to any other person.  No title to and ownership of
	! the software is hereby transferred.
	!
	! The information in this software is subject to change without
	! notice and should not be construed as a committment by
	! Computer Management Center, Inc.
	!
	! CMC assumes no responsibility for the use or reliability of
	! its software on equipment which is not supported by CMC.
	!
	!++
	! ID:BM006
	!
	! Abstract:HELP
	!	.p
	!	This program prints out product indented Labor in Bill of
	!	Materials System. Included in this report are the following fields:
	!	.b
	!	.lm 15
	!	.list 0,"*"
	!	.le
	!	Product Number
	!	.le
	!	Product Description
	!	.le
	!	Item
	!	.le
	!	Product Type
	!	.le
	!	Product Category
	!	.le
	!	Product Unit of Measure
	!	.le
	!	Category Description
	!	.le
	!	Category Unit of Measure
	!	.le
	!	Quantity
	!	.le
	!	Operation
	!	.els
	!
	! Index:
	!
	! Option:
	!
	!
	! Environment:
	!
	!	VAX/VMS BASIC+2 V4.4
	!
	! Compile:
	!
	!	$ BAS BM_SOURCE:BM_RPRT_INDLABOR/LINE
	!	$ LINK/EXE=BM_EXE: BM_RPRT_INDLABOR, FUNC_LIB:CMCLINK/OPTION
	!	$ DELETE BM_RPRT_INDLABOR.OBJ;*
	!
	! Author:
	!
	!	08/07/92 - Dan Perkins
	!
	! Modification History:
	!
	%PAGE

	OPTION SIZE = (INTEGER LONG, REAL GFLOAT)

	!
	! Include files
	!
	%INCLUDE "FUNC_INCLUDE:SCOPE.COM"

	%INCLUDE %FROM %CDD "CDD$TOP.UTL.UTL_REPORTX"
	DECLARE			UTL_REPORTX_CDD		UTL_REPORTX

	%INCLUDE %FROM %CDD "CDD$TOP.PD.PD_PRODUCT"
	MAP (PD_PRODUCT)	PD_PRODUCT_CDD		PD_PRODUCT
	DECLARE			PD_PRODUCT_CDD		PD_PRODUCT_EXAM

	%INCLUDE %FROM %CDD "CDD$TOP.BM.BM_RELATION"
	MAP (BM_RELATION)	BM_RELATION_CDD		BM_RELATION

	%INCLUDE %FROM %CDD "CDD$TOP.BM.BM_PRODOPER"
	DECLARE			BM_PRODOPER_CDD		BM_PRODOPER_READ

	%INCLUDE %FROM %CDD "CDD$TOP.PR.PR_OPER"
	DECLARE			PR_OPER_CDD		PR_OPER_READ

	DIM RFA RFA_LEVEL(500%)
	DIM REAL QTY_LEVEL(500%)
	DIM STRING TEST_PRODUCT(500%)

	!
	! External functions
	!
	EXTERNAL INTEGER FUNCTION COMP_STRING
	EXTERNAL LONG    FUNCTION BM_READ_PRODOPER
	EXTERNAL LONG    FUNCTION PD_EXAM_PRODUCT
	EXTERNAL LONG    FUNCTION PR_READ_OPERATION
	EXTERNAL STRING  FUNCTION DATE_STOREDATE
	EXTERNAL STRING  FUNCTION DATE_TODAY
	EXTERNAL REAL    FUNCTION FUNC_ROUND

	%PAGE

	ON ERROR GOTO 19000

	!
 Init:	! Initilize report
	!
	CALL OUTP_INITFROMFILE(UTL_REPORTX, 132%)

	GOTO ExitProgram IF UTL_REPORTX::STAT

	SORT.BY$	= EDIT$(UTL_REPORTX::OPTDEF(0%), -1%)

	!++
	! Abstract:FLD01
	!	^*(01) Sort (C,D,P,S,T)\*
	!	.p
	!	The ^*Sort\* field provides the means to select an order
	!	by which the report will print.
	!	.p
	!	Valid settings are:
	!	.lm +10
	!	.b
	!	.list 0,"*"
	!	.le
	!	C = Product Category
	!	.le
	!	D = Product Description
	!	.le
	!	P = Product Number
	!	.le
	!	S = Product Secondary Code
	!	.le
	!	T = Product Type
	!	.els
	!	.lm -10
	!	.p
	!	An entry is required in this field.
	!
	! Index:
	!
	!--

	FROM.ITEM$	= EDIT$(UTL_REPORTX::OPTDEF(1%), 132%)

	!++
	! Abstract:FLD02
	!	^*(02) From Item\*
	!	.p
	!	The ^*From Item\* field provides a means to begin the report
	!	with a selected item by entering the selection in this field.
	!	.p
	!	A blank field will cause the report to begin with the first
	!	item in the file.
	!
	! Index:
	!
	!--

	TO.ITEM$	= EDIT$(UTL_REPORTX::OPTDEF(2%), 132%)

	!++
	! Abstract:FLD03
	!	^*(03) To Item\*
	!	.p
	!	The ^*To Item\* field provides a means to enter an item
	!	with which the report will end by entering the selected
	!	item in this field.
	!	.p
	!	A blank setting will cause the report to end with the
	!	last item in the file.
	!
	! Index:
	!
	!--

	WLDCRD$		= EDIT$(UTL_REPORTX::OPTDEF(3%), -1%)

	!++
	! Abstract:FLD04
	!	^*(04) Wildcard\*
	!	.p
	!	The ^*Wildcard\* field provides the means to select designated
	!	items to be printed on the report by entering a "Wildcard"
	!	selection in this field.
	!
	! Index:
	!
	!--

	EFF.DATE$ = DATE_STOREDATE(EDIT$(UTL_REPORTX::OPTDEF(5%), 132%))
	EFF.DATE$ = DATE_TODAY IF EFF.DATE$ = ""

	!++
	! Abstract:FLD06
	!	^*(06) Effective Date\*
	!	.p
	!	The ^*Effective Date\* field provides to enter date on which
	!	the standard cost is calculated.
	!
	! Index:
	!
	!--

	MAX.LEVEL%	= 1%

300	%INCLUDE "SOURCE:[PD.OPEN]PD_PRODUCT.OPN"

310	%INCLUDE "SOURCE:[BM.OPEN]BM_RELATION.OPN"

 ReportTitle:
	!
	! Title
	!
	SELECT SORT.BY$
		CASE "C"
			SORT.KEY%	= 2%
			ADD.TITLE$	= "BY CATEGORY"

		CASE "D"
			SORT.KEY%	= 3%
			ADD.TITLE$	= "BY DESCRIPTION"

		CASE "P"
			SORT.KEY%	= 0%
			ADD.TITLE$	= "BY PRODUCT NUMBER"

		CASE "S"
			SORT.KEY%	= 4%
			ADD.TITLE$	= "BY PRODUCT SECONDARY CODE"

		CASE "T"
			SORT.KEY%	= 1%
			ADD.TITLE$	= "BY PRODUCT TYPE"
	END SELECT

	TITLE$(1%) =	"PRODUCT INDENTED LABOR TREE " + ADD.TITLE$
	TITLE$(2%) =	"Bill of Material System"
	TITLE$(3%) =	""

	!
	! Heading
	!
	TITLE$(4%) =	'Product#       Description                   ' + &
				'           Type Cat  SecCode    UOM'

	TITLE$(5%) =	SPACE$(19%) + 'Item Type Component#     Description' + &
			'               UOM    Quantity Operation'           + &
			'    LBHours ExtLBHours     LBCost'

	TITLE$(6%) =	"."

	%PAGE

17000	!******************************************************************
	! OUTPUT REPORT
	!******************************************************************

	IF FROM.ITEM$ = ""
	THEN
		RESET #PD_PRODUCT.CH%,KEY#SORT.KEY%
	ELSE
		FIND #PD_PRODUCT.CH%, KEY#SORT.KEY% GE FROM.ITEM$, REGARDLESS
	END IF

 GetNextRec:
17020	!
	! Main loop starts here
	!
	GOTO ExitProgram IF UTL_REPORTX::STAT

	!
	! Get next record
	!
	GET #PD_PRODUCT.CH%, REGARDLESS

	!
	! Check current record
	!
	GOTO GetNextRec IF PD_PRODUCT::SSTATUS <> "A"

	SELECT SORT.BY$

	CASE "C"
		GOTO ExitProgram IF (PD_PRODUCT::CATEGORY > TO.ITEM$) AND &
			TO.ITEM$ <> ""

		IF TEST_CATEGORY$ <> PD_PRODUCT::CATEGORY AND &
			TEST_CATEGORY$ <> '' AND PRINT.LINE%
		THEN
			CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), ' ', 2%)
			PRINT.LINE%	= 0%
		END IF

		TEST_CATEGORY$	= PD_PRODUCT::CATEGORY

	CASE "D"
		GOTO ExitProgram IF (PD_PRODUCT::DESCRIPTION > TO.ITEM$) AND &
			TO.ITEM$ <> ""

		GOTO GetNextRec IF WLDCRD$ <> '' AND &
			COMP_STRING(EDIT$(PD_PRODUCT::DESCRIPTION,-1%), &
			WLDCRD$) = 0%

	CASE "P"
		GOTO ExitProgram IF (PD_PRODUCT::PRODUCT_NUM > TO.ITEM$) AND &
			TO.ITEM$ <> ""

		GOTO GetNextRec IF WLDCRD$ <> '' AND &
			COMP_STRING(EDIT$(PD_PRODUCT::PRODUCT_NUM,-1%), &
			WLDCRD$) = 0%

	CASE "S"
		GOTO ExitProgram IF (PD_PRODUCT::SECONDARY_CODE > TO.ITEM$) AND &
			TO.ITEM$ <> ""

		GOTO GetNextRec IF WLDCRD$ <> '' AND &
			COMP_STRING(EDIT$(PD_PRODUCT::SECONDARY_CODE,-1%), &
			WLDCRD$) = 0%

	CASE "T"
		GOTO ExitProgram IF (PD_PRODUCT::PROD_TYPE> TO.ITEM$) AND &
			TO.ITEM$ <> ""

		GOTO GetNextRec IF WLDCRD$ <> '' AND &
			COMP_STRING(EDIT$(PD_PRODUCT::PROD_TYPE,-1%), &
			WLDCRD$) = 0%

		IF TEST_PRODTYPE$ <> PD_PRODUCT::PROD_TYPE AND &
			TEST_PRODTYPE$ <>'' AND PRINT.LINE%
		THEN
			CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), ' ', 2%)
			PRINT.LINE%	= 0%
		END IF

		TEST_PRODTYPE$	= PD_PRODUCT::PROD_TYPE

	END SELECT

17200	GET #BM_RELATION.CH%, KEY#0% EQ PD_PRODUCT::PRODUCT_NUM, REGARDLESS

17300	PD_PRODUCT$ = BM_RELATION::PRODUCT

	TEXT.TEXT$ = BM_RELATION::PRODUCT  + " "   + &
		PD_PRODUCT::DESCRIPTION    + " "   + &
		PD_PRODUCT::PROD_TYPE      + "   " + &
		PD_PRODUCT::CATEGORY       + " "   + &
		PD_PRODUCT::SECONDARY_CODE + " "   + &
		PD_PRODUCT::BOMUOM

	TEXT.TEXT%		= 0%
	QTY_LEVEL(0%), LEVEL%	= 1%

 GoDownTree:
	GOTO GoUpTree IF LEVEL% > MAX.LEVEL%

	TEST_PRODUCT(LEVEL%)	= BM_RELATION::PRODUCT
	QTY_LEVEL(LEVEL%)	= QTY_LEVEL(LEVEL%-1%) * BM_RELATION::QUANTITY
	RFA_LEVEL(LEVEL%)	= GETRFA(BM_RELATION.CH%)

	!
	! Print out header info
	!	
	CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), TEXT.TEXT$, 0%) &
		IF TEXT.TEXT% = 0%

	!
	! We can now get line info and print the line
	!
	V% = PD_EXAM_PRODUCT(BM_RELATION::COMPONENT, PD_PRODUCT_EXAM)

	BM_PRODOPER_READ::HOURS = 0.0 IF BM_READ_PRODOPER( &
		BM_RELATION::COMPONENT, BM_RELATION::OPERATION, &
		"EQ", EFF.DATE$, BM_PRODOPER_READ ) <> CMC$_NORMAL

	EXT.HOURS = FUNC_ROUND(QTY_LEVEL(LEVEL%) * BM_PRODOPER_READ::HOURS, 2%)

	PR_OPER_READ::HOUR_RATE = 0.0 IF PR_READ_OPERATION( &
		BM_RELATION::OPERATION, EFF.DATE$, PR_OPER_READ ) <> CMC$_NORMAL

	EXT.LABORCOST = FUNC_ROUND(EXT.HOURS * PR_OPER_READ::HOUR_RATE, 2%)

	TEXT$ = TEST_PRODUCT(1%)                               + "     " + &
		BM_RELATION::ITEMNUM                           + " "     + &
		PD_PRODUCT_EXAM::PROD_TYPE                     + "   "   + &
		BM_RELATION::COMPONENT                         + " "     + &
		LEFT(PD_PRODUCT_EXAM::DESCRIPTION, 25%)        + " "     + &
		PD_PRODUCT_EXAM::BOMUOM                        + "  "    + &
		FORMAT$(QTY_LEVEL(LEVEL%), "###,###.###")      + " "     + &
		BM_RELATION::OPERATION                         + "  "    + &
		FORMAT$(BM_PRODOPER_READ::HOURS, "###,###.##") + " "     + &
		FORMAT$(EXT.HOURS, "###,###.##")               + " "     + &
		FORMAT$(EXT.LABORCOST, "###,###.##")

	CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), TEXT$, 0%)
	TEXT.TEXT% = -1%

17320	GET #BM_RELATION.CH%, KEY#0% EQ BM_RELATION::COMPONENT

	LEVEL% = LEVEL% + 1%
	GOTO GoDownTree

 GoUpTree:
	LEVEL% = LEVEL% - 1%
	GOTO 17350 IF LEVEL% = 0%

17330	GET #BM_RELATION.CH%, RFA RFA_LEVEL(LEVEL%), REGARDLESS

	GET #BM_RELATION.CH%, REGARDLESS

	IF BM_RELATION::PRODUCT <> TEST_PRODUCT(LEVEL%)
	THEN
		GOTO GoUpTree
	ELSE
		GOTO GoDownTree
	END IF

17350	GOTO ExitProgram IF UTL_REPORTX::STAT

	!
	! Try for next record
	!
	CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), '', -1%) &
		IF TEXT.TEXT%

	GOTO GetNextRec

 ExitProgram:
	CALL OUTP_FINISH(UTL_REPORTX)

	!
	! Exit to next program or menu
	!
	IF TRM$(UTL_REPORTX::NEXTRUN) = ""
	THEN
		CALL SUBR_3EXITPROGRAM(SCOPE, "", "")
	ELSE
		CALL SUBR_3EXITPROGRAM(SCOPE, "RUN " + UTL_REPORTX::NEXTRUN, "")
	END IF

	%PAGE

 HelpError:
	!******************************************************************
	! Help Message for an error
	!******************************************************************
	CALL HELP_34MESSAGE(SCOPE, NUM1$(ERL) + " " + ERT$(ERR), &
			"E", ERN$, FILENAME$, NUM1$(ERR))
	UTL_REPORTX::STAT = -1%
	GOTO ExitProgram

	%Page

19000	!******************************************************************
	! ERROR TRAPPING
	!******************************************************************

	SELECT ERR
		CASE 154%	! Locked record
			SLEEP 5%
			RESUME
	END SELECT

	FILENAME$ = ""

	SELECT ERL

		CASE 300%
			FILENAME$ = "PD_PRODUCT"

		CASE 310%
			FILENAME$ = "BM_RELATION"

		CASE 17000%
			RESUME ExitProgram IF ERR = 155%
			FILENAME$ = "PD_PRODUCT"

		CASE 17020%
			RESUME ExitProgram IF ERR = 11%
			FILENAME$  = "PD_PRODUCT"

		CASE 17200%
			RESUME GetNextRec IF ERR = 155%
			FILENAME$  = "BM_RELATION"

		CASE 17320%
			RESUME 17330 IF ERR = 155%
			FILENAME$  = "BM_RELATION"

		CASE 17330%	! Can't find component
			RESUME GoUpTree IF ERR = 155% OR ERR = 11%
			FILENAME$  = "BM_RELATION"

	END SELECT

	!
	! Untrapped error
	!
	RESUME HelpError

32767	END
