/*
 * %TITLE "Extract a File from a Text Library"
 * %SBTTL "LIBR_EXTRACTVAR"
 * %IDENT "V3.6 Calico"
 *
 *		COPYRIGHT (C) 1987 BY
 *		Computer Management Center, Idaho Falls, Idaho.
 *
 * This software is furnished under a license and may be used and
 * copied only in accordance with terms of such license and with
 * the inclusion of the above copyright notice.  This software or
 * any other copies thereof may not be provided or otherwise made
 * available to any other person.  No title to and ownership of
 * the software is hereby transferred.
 *
 * The information in this software is subject to change without
 * notice and should not be construed as a commitment by
 * Computer Management Center, Inc.
 *
 * CMC assumes no responsibility for the use or reliability of
 * its software on equipment which is not supported by CMC.
 *
 *++
 *
 * Abstract:HELP
 *	.p
 *	This function pulls text out of a library, and puts
 *	it into a specified text string.  All text is run
 *	together into one string.
 *
 * Parameter:
 *
 *	LIB_NAME$
 *		Passed name of the library to pull text from.
 *
 *	OUT_TEXT$
 *		Outgoing text.
 *		Contains '13'C where a line break is required.
 *
 *	KEY_NAME$
 *		Passed key for text to be pulled.
 *
 *
 *	Returns a status code.
 *
 * Example:
 *
 *	ST% = LIBR_EXTRACTVAR("HELP_GL", TEXT$, "ADDRESS$NOTE")
 *
 * Compile:
 *
 *	$ BAS FUNC_SOURCE:LIBR_EXTRACTVAR/NOLINE
 *	$ LIB FUNC_LIB:CMC_3VECTOR/REP LIBR_EXTRACTVAR
 *	$ DELETE LIBR_EXTRACTVAR.OBJ;*
 *
 * Author:
 *
 *	07/28/87 - Kevin Handy
 *
 * Modification history:
 *
 *	08/06/87 - Kevin Handy
 *		Modified to handle the "+" and "-" flags put
 *		in the library by LIN_INSERT_TEXT.
 *
 *	07/19/88 - Kevin Handy
 *		Removed defaulting to REF:
 *
 *	11/30/88 - Kevin Handy
 *		Modified to always goto CloseFile after the
 *		initilization function has executed.
 *
 *	06/16/89 - Kevin Handy
 *		Modified so would fit into sharable library.
 *
 *	03/13/92 - Kevin Handy
 *		Clean up vars (checkvar)
 *
 *	04/15/95 - Kevin Handy
 *		(V3.6)
 *		Update to V3.6 coding standards
 *
 *	11/20/95 - Kevin Handy
 *		Conversion to C.
 *--
 */

/*
 * Include files
 */
#include <string.h>
#include <descrip.h>
#include "func_include:library.h"

typedef char RmsRfa[6];

/*
 * Main function
 */
long libr_extractvar(struct dsc_descriptor_s* lib_name,
	struct dsc_descriptor_s* out_text,
	struct dsc_descriptor_s* key_name)
{
	int st;
	int lr_index;
	RmsRfa txrfa;
	String temp_text;
	String text;
	int temp;
	long Status;

	/*
	 * Declare variables
	 */
	Status = 1;
	out_text = "";

	/*
	 * Set up the control structure if necessary
	 */
	st = lbr$ini_control(lr_index, LBR$C_READ);
	if ((st & 1) == 0)
	{
		return st;
	}
	/*
	 * Open the library function
	 */
	st = lbr$open(lr_index, lib_name, 0, ".TLB");
	if ((st & 1) == 0)
	{
		Status = st;
		goto closelibrary;
	}
	/*
	 * Search for key in file
	 */
	st = lbr$lookup_key(lr_index, key_name, txrfa);
	if ((st & 1) == 0)
	{
		Status = st;
		goto closelibrary;
	}
	/*
	 * Open up output file
	 */
	temp_text = "";
	/*
	 * Copy over text
	 */
loop:
	text = space(132);
	st = lbr$get_record(lr_index, text);
	if ((st & 1) == 1)
	{
		temp = strlen(trm(text));
		if (mid(text, temp, 1) == "+")
		{
			/*
			 * There was a "+" meaning append this line to next.
			 */
			temp_text = temp_text + left(text, temp - 1);
		}
		else
		{
			if (mid(text, temp, 1) == "-")
			{
				/*
				 * There was a "-" meaning the end of the line.
				 */
				temp_text = temp_text + &
					left(text, temp - 1) + '\13';
			}
			else
			{
				/*
				 * Must not have been put there with the
				 * LIN_INSERT_TEXT function.  Handle anyway.
				 */
				temp_text = temp_text + &
					left(text, temp) + '\13';
			}
		}
		goto loop;
	}
	out_text = temp_text;
	/*
	 * Close library file
	 */
closelibrary:
	st = lbr$close(lr_index);
	return Status;
}
