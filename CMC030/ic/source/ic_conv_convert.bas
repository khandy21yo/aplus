1	%TITLE "Convert from RSTS/E to VMS"
	%SBTTL "IC_CONV_CONVERT"
	%IDENT "V3.6a Calico"

	!
	! COPYRIGHT (C) 1992 BY
	!
	! Computer Management Center, Inc.
	! Idaho Falls, Idaho.
	!
	! This software is furnished under a license and may be used and
	! copied only in accordance with terms of such license and with
	! the inclusion of the above copyright notice.  This software or
	! any other copies thereof may not be provided or otherwise made
	! available to any other person.  No title to and ownership of
	! the software is hereby transferred.
	!
	! The information in this software is subject to change without
	! notice and should not be construed as a commitment by
	! Computer Management Center, Inc.
	!
	! CMC assumes no responsibility for the use or reliability of
	! its software on equipment which is not supported by CMC.
	!
	!++
	! Abstract:HELP
	!	.b
	!	.lm +5
	!	This program is used in the conversion from RSTS/E
	!	to VMS.
	!	.lm -5
	!
	! Index:
	!
	! Option:
	!
	! Compile:
	!
	!	$ BAS IC_SOURCE:IC_CONV_CONVERT/LINE
	!	$ LINK/EXECUTABLE=IC_EXE: IC_CONV_CONVERT, -
	!		FUNC_LIB:CMCLINK/OPTION
	!	$ DELETE IC_CONV_CONVERT.OBJ;*
	!
	! Author:
	!
	!	02/06/92 - Dan Perkins
	!
	! Modification history:
	!
	!	02/24/92 - Kevin Handy
	!		Cleaned up (check)
	!
	!	08/12/92 - Dan Perkins
	!		Modified to convert more than one file at a time.
	!
	!	09/21/92 - Kevin Handy
	!		Clean up (Check)
	!
	!	04/15/95 - Kevin Handy
	!		(V3.6)
	!		Update to V3.6 coding standards
	!
	!	05/15/97 - Kevin Handy
	!		Reformat source code
	!
	!	08/19/98 - Kevin Handy
	!		(V3.6a Calico)
	!		Update to V3.6a coding standards
	!
	!	09/18/2000 - Kevin Handy
	!		Use LIB$DELETE_FILE instead of KILL
	!		Use WHEN ERROR IN
	!--
	%PAGE

	!
	! Set up compiling options
	!
	OPTION SIZE = (INTEGER LONG, REAL GFLOAT)

	%INCLUDE "LIB$ROUTINES" %FROM %LIBRARY "SYS$LIBRARY:BASIC$STARLET.TLB"

10	ON ERROR GOTO 19000

	!
	! Include files
	!
	%INCLUDE "FUNC_INCLUDE:FUNCTION.HB"

	MAP (SCOPE) SCOPE_STRUCT SCOPE

	%INCLUDE "SOURCE:[IC.OPEN]IC_35BALANCE.HB"
	MAP (IC_35BALANCE)	IC_35BALANCE_CDD	IC_35BALANCE

	%INCLUDE "SOURCE:[IC.OPEN]IC_35HISTORY.HB"
	MAP (IC_35HISTORY)	IC_35HISTORY_CDD	IC_35HISTORY

	%INCLUDE "SOURCE:[IC.OPEN]IC_BINMAP.HB"
	MAP (IC_BINMAP)		IC_BINMAP_CDD		IC_BINMAP

	%INCLUDE "SOURCE:[PD.OPEN]PD_PRODUCT.HB"
	MAP (PD_PRODUCT)	PD_PRODUCT_CDD		PD_PRODUCT
	DECLARE			PD_PRODUCT_CDD		PD_PRODUCT_EXAM

	!
	! External functions
	!
	EXTERNAL LONG   FUNCTION PD_EXAM_PRODUCT

	!*******************************************************************
	! Initilize File to Convert
	!*******************************************************************

	!
	! Declare channels
	!
	CALL ASSG_CHANNEL(ICRMS.CH%, STAT%)

	CALL READ_INITIALIZE

	CALL READ_DEVICE("ICRMS_ASC", ICRMS_ASC.DEV$, STAT%)

	!
	! Open input file
	!
300	WHEN ERROR IN
		OPEN ICRMS_ASC.DEV$ + "ICRMS.ASC" FOR INPUT AS FILE ICRMS.CH%
	USE
		CALL ENTR_3MESSAGE(SCOPE, "File to convert is missing", 0%)
		CONTINUE ExitProgram
	END WHEN

	!
	! Process the input file
	!
	FILEFLAG% = 0%

1000	WHEN ERROR IN
		INPUT LINE #ICRMS.CH%, INP$
	USE
		CONTINUE ExitProgram
	END WHEN

	GOTO 1000 IF INP$ = ""

	INP$ = EDIT$(INP$, 4%)
	I2%  = INSTR(1%, INP$, ">")
	FLD$ = SEG$(INP$, 2%, I2% - 1%)
	DTA$ = RIGHT(INP$, I2% + 1%)

	SELECT FLD$

	CASE "STARTFILE IC_35BALANCE"
		GOSUB 3000
		GOSUB InitIC35BalanceRec
		WORKFILE% = 1%
		FILEFLAG% = -1%

	CASE "ENDFILE IC_35BALANCE"
		CLOSE #IC_35BALANCE.CH%
		CALL ASSG_FREECHANNEL(IC_35BALANCE.CH%)
		FILEFLAG% = 0%

	CASE "STARTFILE IC_35HISTORY"
		YYYY$ = DTA$
		CONF$ = EDIT$(ENTR_3YESNO(SCOPE, DISPLAY_ID%, &
			"9;21", "Confirm converting IC_35HISTORY_" + &
			YYYY$ + " file", &
			"N", 16%, "'", "N"), -1%)

		IF CONF$ = "Y"
		THEN
			GOSUB 3100
			GOSUB InitIC35HistoryRec
			WORKFILE% = 2%
			FILEFLAG% = -1%
		END IF

	CASE "ENDFILE IC_35HISTORY"
		CLOSE #IC_35HISTORY.CH%
		CALL ASSG_FREECHANNEL(IC_35HISTORY.CH%)
		FILEFLAG% = 0%

	CASE "STARTFILE IC_BINMAP"
		CONF$ = EDIT$(ENTR_3YESNO(SCOPE, DISPLAY_ID%, &
			"9;23", "Confirm converting IC_BINMAP file", &
			"N", 16%, "'", "N"), -1%)

		IF CONF$ = "Y"
		THEN
			GOSUB 3200
			GOSUB InitICBinmapRec
			WORKFILE% = 3%
			FILEFLAG% = -1%
		END IF

	CASE "ENDFILE IC_BINMAP"
		CLOSE #IC_BINMAP.CH%
		CALL ASSG_FREECHANNEL(IC_BINMAP.CH%)
		FILEFLAG% = 0%

	CASE "STARTFILE PD_PRODUCT"
		CONF$ = EDIT$(ENTR_3YESNO(SCOPE, DISPLAY_ID%, &
			"9;23", "Confirm converting PD_PRODUCT file", &
			"N", 16%, "'", "N"), -1%)

		IF CONF$ = "Y"
		THEN
			GOSUB 3300
			GOSUB InitPDProductRec
			WORKFILE% = 4%
			FILEFLAG% = -1%
		END IF

	CASE "ENDFILE PD_PRODUCT"
		CLOSE #PD_PRODUCT.CH%
		CALL ASSG_FREECHANNEL(PD_PRODUCT.CH%)
		FILEFLAG% = 0%

	END SELECT

	ON WORKFILE% GOSUB 10000, 11000, 12000, 13000 IF FILEFLAG%

	GOTO 1000

3000	!
	! Create IC_35BALANCE file
	!
	CALL ENTR_3MESSAGE(SCOPE, "Creating new IC_35BALANCE file", 1%)

 !	KILL IC_35BALANCE.DEV$ + "IC_35BALANCE.HIS"

	SMG_STATUS% = LIB$DELETE_FILE(IC_35BALANCE.DEV$ + "IC_35BALANCE.HIS;*")

3010	%INCLUDE "SOURCE:[IC.OPEN]IC_35BALANCE.CRE"

	RETURN

3100	!
	! Create IC_35HISTORY file
	!
	CALL ENTR_3MESSAGE(SCOPE, "Creating new IC_35HISTORY file", 1%)

 !	KILL IC_35HISTORY.DEV$ + "IC_35HISTORY_" + YYYY$ + ".HIS"

	SMG_STATUS% = LIB$DELETE_FILE(IC_35HISTORY.DEV$ + "IC_35HISTORY_" + &
		YYYY$ + ".HIS;*")

3110	%INCLUDE "SOURCE:[IC.OPEN]IC_35HISTORY.CRE"

	RETURN

3200	!
	! Create IC_BINMAP file
	!
	CALL ENTR_3MESSAGE(SCOPE, "Creating new IC_BINMAP file", 1%)

 !	KILL IC_BINMAP.DEV$ + "IC_BINMAP.MAS"

	SMG_STATUS% = LIB$DELETE_FILE(IC_BINMAP.DEV$ + "IC_BINMAP.MAS;*")

3210	%INCLUDE "SOURCE:[IC.OPEN]IC_BINMAP.CRE"

	RETURN

3300	!
	! Create PD_PRODUCT file
	!
	CALL ENTR_3MESSAGE(SCOPE, "Creating new PD_PRODUCT file", 1%)

 !	KILL PD_PRODUCT.DEV$ + "PD_PRODUCT.MAS"

	SMG_STATUS% = LIB$DELETE_FILE(PD_PRODUCT.DEV$ + "PD_PRODUCT.MAS;*")

3310	%INCLUDE "SOURCE:[PD.OPEN]PD_PRODUCT.CRE"

	RETURN

10000	SELECT FLD$

	CASE "ENDRECORD"
		IF PD_EXAM_PRODUCT(IC_35BALANCE::PRODUCT, &
			PD_PRODUCT_EXAM) = CMC$_NORMAL
		THEN
			WHEN ERROR IN
				PUT #IC_35BALANCE.CH% IF ERRFLAG% = 0%
			USE
				FILENAME$ = "IC_35BALANCE"
				CONTINUE HelpError
			END WHEN
		END IF

		GOSUB InitIC35BalanceRec

	CASE "PRODUCT"
		IC_35BALANCE::PRODUCT	= DTA$

	CASE "LOCATION"
		IC_35BALANCE::LOCATION	= DTA$

	CASE "TRANSTYPE"
		IC_35BALANCE::TRANSTYPE	= DTA$

	CASE "BBALANCE"
		WHEN ERROR IN
			IC_35BALANCE::BBALANCE	= VAL(DTA$)
		USE
			IC_35BALANCE::BBALANCE	= 0.0
		END WHEN

	CASE "PBALANCE"
		WHEN ERROR IN
			IC_35BALANCE::PBALANCE	= VAL(DTA$)
		USE
			IC_35BALANCE::PBALANCE	= 0.0
		END WHEN

	CASE "RBALANCE"
		WHEN ERROR IN
			IC_35BALANCE::RBALANCE	= VAL(DTA$)
		USE
			IC_35BALANCE::RBALANCE	= 0.0
		END WHEN

	CASE "CBALANCE"
		WHEN ERROR IN
			IC_35BALANCE::CBALANCE	= VAL(DTA$)
		USE
			IC_35BALANCE::CBALANCE	= 0.0
		END WHEN

	END SELECT

	RETURN

11000	SELECT FLD$

	CASE "ENDRECORD"
		IF PD_EXAM_PRODUCT(IC_35HISTORY::PRODUCT, &
			PD_PRODUCT_EXAM) = CMC$_NORMAL
		THEN
			WHEN ERROR IN
				PUT #IC_35HISTORY.CH% IF ERRFLAG% = 0%
			USE
				FILENAME$ = "IC_35HISTORY"
				CONTINUE HelpError
			END WHEN
		END IF

		GOSUB InitIC35HistoryRec

	CASE "PRODUCT"
		IC_35HISTORY::PRODUCT		= DTA$

	CASE "LOCATION"
		IC_35HISTORY::LOCATION		= DTA$

	CASE "TRANSTYPE"

		SELECT DTA$

		CASE "A"
			DTA$ = "RQ"

		CASE "C"
			DTA$ = "AD"

		CASE "G"
			DTA$ = "WR"

		CASE "M"
			DTA$ = "MA"

		CASE "O"
			DTA$ = "SO"

		CASE "P"
			DTA$ = "PO"

		CASE "R"
			DTA$ = "RE"

		CASE "S"
			DTA$ = "SA"

		CASE "T"
			DTA$ = "TR"

		CASE "W"
			DTA$ = "WO"

		END SELECT

		IC_35HISTORY::TRANSTYPE		= DTA$

	CASE "CROSSREF"
		IC_35HISTORY::CROSSREF		= DTA$

	CASE "SUBACCT"
		IC_35HISTORY::SUBACCT		= DTA$

	!
	! Quantity array
	!
	CASE "PQUANTITY(0%)"
		WHEN ERROR IN
			IC_35HISTORY::PQUANTITY(0%)	= VAL(DTA$)
		USE
			IC_35HISTORY::PQUANTITY(0%)	= 0.0
		END WHEN

	CASE "PQUANTITY(1%)"
		WHEN ERROR IN
			IC_35HISTORY::PQUANTITY(1%)	= VAL(DTA$)
		USE
			IC_35HISTORY::PQUANTITY(1%)	= 0.0
		END WHEN

	CASE "PQUANTITY(2%)"
		WHEN ERROR IN
			IC_35HISTORY::PQUANTITY(2%)	= VAL(DTA$)
		USE
			IC_35HISTORY::PQUANTITY(2%)	= 0.0
		END WHEN

	CASE "PQUANTITY(3%)"
		WHEN ERROR IN
			IC_35HISTORY::PQUANTITY(3%)	= VAL(DTA$)
		USE
			IC_35HISTORY::PQUANTITY(3%)	= 0.0
		END WHEN

	CASE "PQUANTITY(4%)"
		WHEN ERROR IN
			IC_35HISTORY::PQUANTITY(4%)	= VAL(DTA$)
		USE
			IC_35HISTORY::PQUANTITY(4%)	= 0.0
		END WHEN

	CASE "PQUANTITY(5%)"
		WHEN ERROR IN
			IC_35HISTORY::PQUANTITY(5%)	= VAL(DTA$)
		USE
			IC_35HISTORY::PQUANTITY(5%)	= 0.0
		END WHEN

	CASE "PQUANTITY(6%)"
		WHEN ERROR IN
			IC_35HISTORY::PQUANTITY(6%)	= VAL(DTA$)
		USE
			IC_35HISTORY::PQUANTITY(6%)	= 0.0
		END WHEN

	CASE "PQUANTITY(7%)"
		WHEN ERROR IN
			IC_35HISTORY::PQUANTITY(7%)	= VAL(DTA$)
		USE
			IC_35HISTORY::PQUANTITY(7%)	= 0.0
		END WHEN

	CASE "PQUANTITY(8%)"
		WHEN ERROR IN
			IC_35HISTORY::PQUANTITY(8%)	= VAL(DTA$)
		USE
			IC_35HISTORY::PQUANTITY(8%)	= 0.0
		END WHEN

	CASE "PQUANTITY(9%)"
		WHEN ERROR IN
			IC_35HISTORY::PQUANTITY(9%)	= VAL(DTA$)
		USE
			IC_35HISTORY::PQUANTITY(9%)	= 0.0
		END WHEN

	CASE "PQUANTITY(10%)"
		WHEN ERROR IN
			IC_35HISTORY::PQUANTITY(10%)	= VAL(DTA$)
		USE
			IC_35HISTORY::PQUANTITY(10%)	= 0.0
		END WHEN

	CASE "PQUANTITY(11%)"
		WHEN ERROR IN
			IC_35HISTORY::PQUANTITY(11%)	= VAL(DTA$)
		USE
			IC_35HISTORY::PQUANTITY(11%)	= 0.0
		END WHEN

	CASE "PQUANTITY(12%)"
		WHEN ERROR IN
			IC_35HISTORY::PQUANTITY(12%)	= VAL(DTA$)
		USE
			IC_35HISTORY::PQUANTITY(12%)	= 0.0
		END WHEN

	!
	! Price array
	!
	CASE "PRICEAMT(0%)"
		WHEN ERROR IN
			IC_35HISTORY::PRICEAMT(0%)	= VAL(DTA$)
		USE
			IC_35HISTORY::PRICEAMT(0%)	= 0.0
		END WHEN

	CASE "PRICEAMT(1%)"
		WHEN ERROR IN
			IC_35HISTORY::PRICEAMT(1%)	= VAL(DTA$)
		USE
			IC_35HISTORY::PRICEAMT(1%)	= 0.0
		END WHEN

	CASE "PRICEAMT(2%)"
		WHEN ERROR IN
			IC_35HISTORY::PRICEAMT(2%)	= VAL(DTA$)
		USE
			IC_35HISTORY::PRICEAMT(2%)	= 0.0
		END WHEN

	CASE "PRICEAMT(3%)"
		WHEN ERROR IN
			IC_35HISTORY::PRICEAMT(3%)	= VAL(DTA$)
		USE
			IC_35HISTORY::PRICEAMT(3%)	= 0.0
		END WHEN

	CASE "PRICEAMT(4%)"
		WHEN ERROR IN
			IC_35HISTORY::PRICEAMT(4%)	= VAL(DTA$)
		USE
			IC_35HISTORY::PRICEAMT(4%)	= 0.0
		END WHEN

	CASE "PRICEAMT(5%)"
		WHEN ERROR IN
			IC_35HISTORY::PRICEAMT(5%)	= VAL(DTA$)
		USE
			IC_35HISTORY::PRICEAMT(5%)	= 0.0
		END WHEN

	CASE "PRICEAMT(6%)"
		WHEN ERROR IN
			IC_35HISTORY::PRICEAMT(6%)	= VAL(DTA$)
		USE
			IC_35HISTORY::PRICEAMT(6%)	= 0.0
		END WHEN

	CASE "PRICEAMT(7%)"
		WHEN ERROR IN
			IC_35HISTORY::PRICEAMT(7%)	= VAL(DTA$)
		USE
			IC_35HISTORY::PRICEAMT(7%)	= 0.0
		END WHEN

	CASE "PRICEAMT(8%)"
		WHEN ERROR IN
			IC_35HISTORY::PRICEAMT(8%)	= VAL(DTA$)
		USE
			IC_35HISTORY::PRICEAMT(8%)	= 0.0
		END WHEN

	CASE "PRICEAMT(9%)"
		WHEN ERROR IN
			IC_35HISTORY::PRICEAMT(9%)	= VAL(DTA$)
		USE
			IC_35HISTORY::PRICEAMT(9%)	= 0.0
		END WHEN

	CASE "PRICEAMT(10%)"
		WHEN ERROR IN
			IC_35HISTORY::PRICEAMT(10%)	= VAL(DTA$)
		USE
			IC_35HISTORY::PRICEAMT(10%)	= 0.0
		END WHEN

	CASE "PRICEAMT(11%)"
		WHEN ERROR IN
			IC_35HISTORY::PRICEAMT(11%)	= VAL(DTA$)
		USE
			IC_35HISTORY::PRICEAMT(11%)	= 0.0
		END WHEN

	CASE "PRICEAMT(12%)"
		WHEN ERROR IN
			IC_35HISTORY::PRICEAMT(12%)	= VAL(DTA$)
		USE
			IC_35HISTORY::PRICEAMT(12%)	= 0.0
		END WHEN

	!
	! Cost array
	!
	CASE "COSTAMT(0%)"
		WHEN ERROR IN
			IC_35HISTORY::COSTAMT(0%)	= VAL(DTA$)
		USE
			IC_35HISTORY::COSTAMT(0%)	= 0.0
		END WHEN

	CASE "COSTAMT(1%)"
		WHEN ERROR IN
			IC_35HISTORY::COSTAMT(1%)	= VAL(DTA$)
		USE
			IC_35HISTORY::COSTAMT(1%)	= 0.0
		END WHEN

	CASE "COSTAMT(2%)"
		WHEN ERROR IN
			IC_35HISTORY::COSTAMT(2%)	= VAL(DTA$)
		USE
			IC_35HISTORY::COSTAMT(2%)	= 0.0
		END WHEN

	CASE "COSTAMT(3%)"
		WHEN ERROR IN
			IC_35HISTORY::COSTAMT(3%)	= VAL(DTA$)
		USE
			IC_35HISTORY::COSTAMT(3%)	= 0.0
		END WHEN

	CASE "COSTAMT(4%)"
		WHEN ERROR IN
			IC_35HISTORY::COSTAMT(4%)	= VAL(DTA$)
		USE
			IC_35HISTORY::COSTAMT(4%)	= 0.0
		END WHEN

	CASE "COSTAMT(5%)"
		WHEN ERROR IN
			IC_35HISTORY::COSTAMT(5%)	= VAL(DTA$)
		USE
			IC_35HISTORY::COSTAMT(5%)	= 0.0
		END WHEN

	CASE "COSTAMT(6%)"
		WHEN ERROR IN
			IC_35HISTORY::COSTAMT(6%)	= VAL(DTA$)
		USE
			IC_35HISTORY::COSTAMT(6%)	= 0.0
		END WHEN

	CASE "COSTAMT(7%)"
		WHEN ERROR IN
			IC_35HISTORY::COSTAMT(7%)	= VAL(DTA$)
		USE
			IC_35HISTORY::COSTAMT(7%)	= 0.0
		END WHEN

	CASE "COSTAMT(8%)"
		WHEN ERROR IN
			IC_35HISTORY::COSTAMT(8%)	= VAL(DTA$)
		USE
			IC_35HISTORY::COSTAMT(8%)	= 0.0
		END WHEN

	CASE "COSTAMT(9%)"
		WHEN ERROR IN
			IC_35HISTORY::COSTAMT(9%)	= VAL(DTA$)
		USE
			IC_35HISTORY::COSTAMT(9%)	= 0.0
		END WHEN

	CASE "COSTAMT(10%)"
		WHEN ERROR IN
			IC_35HISTORY::COSTAMT(10%)	= VAL(DTA$)
		USE
			IC_35HISTORY::COSTAMT(10%)	= 0.0
		END WHEN

	CASE "COSTAMT(11%)"
		WHEN ERROR IN
			IC_35HISTORY::COSTAMT(11%)	= VAL(DTA$)
		USE
			IC_35HISTORY::COSTAMT(11%)	= 0.0
		END WHEN

	CASE "COSTAMT(12%)"
		WHEN ERROR IN
			IC_35HISTORY::COSTAMT(12%)	= VAL(DTA$)
		USE
			IC_35HISTORY::COSTAMT(12%)	= 0.0
		END WHEN
	END SELECT

	RETURN

12000	SELECT FLD$

	CASE "ENDRECORD"
		IF PD_EXAM_PRODUCT(IC_BINMAP::PRODUCT, &
			PD_PRODUCT_EXAM) = CMC$_NORMAL
		THEN
			WHEN ERROR IN
				PUT #IC_BINMAP.CH% IF ERRFLAG% = 0%
			USE
				FILENAME$ = "IC_BINMAP"
				CONTINUE HelpError
			END WHEN
		END IF

		GOSUB InitICBinmapRec

	CASE "PRODUCT"
		IC_BINMAP::PRODUCT	= DTA$

	CASE "LOCATION"
		IC_BINMAP::LOCATION	= DTA$

	CASE "BIN0"
		IC_BINMAP::BIN(0%)	= DTA$

	CASE "BIN1"
		IC_BINMAP::BIN(1%)	= DTA$

	CASE "BIN2"
		IC_BINMAP::BIN(2%)	= DTA$

	CASE "BIN3"
		IC_BINMAP::BIN(3%)	= DTA$

	CASE "SAFETY"
		WHEN ERROR IN
			IC_BINMAP::SAFETY	= VAL(DTA$)
		USE
			IC_BINMAP::SAFETY	= 0.0
		END WHEN

	CASE "MAXLEVEL"
		WHEN ERROR IN
			IC_BINMAP::MAXLEVEL	= VAL(DTA$)
		USE
			IC_BINMAP::MAXLEVEL	= 0.0
		END WHEN

	CASE "ABC"
		IC_BINMAP::ABC		= DTA$

	CASE "CYCLEMAP"
		IC_BINMAP::CYCLEMAP	= DTA$

	END SELECT

	RETURN

13000	SELECT FLD$

	CASE "ENDRECORD"
		WHEN ERROR IN
			PUT #PD_PRODUCT.CH% IF ERRFLAG% = 0%
		USE
			!
			! Can't put PD_PRODUCT record
			!
			CONTINUE 1000 IF ERR = 134%
			FILENAME$ = "PD_PRODUCT"
			CONTINUE HelpError
		END WHEN

		GOSUB InitPDProductRec

	CASE "PRODUCT_NUM"
		PD_PRODUCT::PRODUCT_NUM		= DTA$

	CASE "DESCRIPTION"
		PD_PRODUCT::DESCRIPTION		= DTA$

	CASE "PROD_TYPE"
		PD_PRODUCT::PROD_TYPE		= DTA$

	CASE "CATEGORY"
		PD_PRODUCT::CATEGORY		= DTA$

	CASE "UOM"
		PD_PRODUCT::UOM			= DTA$

	CASE "PACK"
		PD_PRODUCT::PACK		= DTA$

	CASE "LABEL"
		PD_PRODUCT::LABEL		= DTA$

	CASE "METHOD"
		PD_PRODUCT::METHOD		= DTA$

	CASE "BDATE"
		PD_PRODUCT::BDATE		= DTA$

	CASE "SSTATUS"
		PD_PRODUCT::SSTATUS		= DTA$

	CASE "EDATE"
		PD_PRODUCT::EDATE		= DTA$

	CASE "SECONDARY_CODE"
		PD_PRODUCT::SECONDARY_CODE	= DTA$

	CASE "WEIGHT"
		WHEN ERROR IN
			PD_PRODUCT::WEIGHT		= VAL(DTA$)
		USE
			PD_PRODUCT::WEIGHT		= 0.0
		END WHEN

	CASE "BOMUOM"
		PD_PRODUCT::BOMUOM		= DTA$

	CASE "PRODUCT_FACTOR"
		WHEN ERROR IN
			PD_PRODUCT::PRODUCT_FACTOR	= VAL(DTA$)
		USE
			PD_PRODUCT::PRODUCT_FACTOR	= 0.0
		END WHEN

	END SELECT

	RETURN

 InitIC35BalanceRec:
	IC_35BALANCE::PRODUCT		= ""
	IC_35BALANCE::LOCATION		= ""
	IC_35BALANCE::TRANSTYPE		= ""
	IC_35BALANCE::BBALANCE		= 0.0
	IC_35BALANCE::PBALANCE		= 0.0
	IC_35BALANCE::RBALANCE		= 0.0
	IC_35BALANCE::CBALANCE		= 0.0

	ERRFLAG% = 0%

	RETURN

 InitIC35HistoryRec:
	IC_35HISTORY::PRODUCT		= ""
	IC_35HISTORY::LOCATION		= ""
	IC_35HISTORY::TRANSTYPE		= ""
	IC_35HISTORY::CROSSREF		= ""
	IC_35HISTORY::SUBACCT		= ""

	FOR I% = 0% TO 12%
		IC_35HISTORY::PQUANTITY(I%)	= 0.0
		IC_35HISTORY::PRICEAMT(I%)	= 0.0
		IC_35HISTORY::COSTAMT(I%)	= 0.0
	NEXT I%

	ERRFLAG% = 0%

	RETURN

 InitICBinmapRec:
	IC_BINMAP::PRODUCT		= ""
	IC_BINMAP::LOCATION		= ""
	IC_BINMAP::BIN(0%)		= ""
	IC_BINMAP::BIN(1%)		= ""
	IC_BINMAP::BIN(2%)		= ""
	IC_BINMAP::BIN(3%)		= ""
	IC_BINMAP::SAFETY		= 0.0
	IC_BINMAP::MAXLEVEL		= 0.0
	IC_BINMAP::ABC			= ""
	IC_BINMAP::CYCLEMAP		= ""

	ERRFLAG% = 0%

	RETURN

 InitPDProductRec:
	PD_PRODUCT::PRODUCT_NUM		= ""
	PD_PRODUCT::DESCRIPTION         = ""
	PD_PRODUCT::PROD_TYPE		= ""
	PD_PRODUCT::CATEGORY		= ""
	PD_PRODUCT::UOM			= "EA"
	PD_PRODUCT::PACK		= ""
	PD_PRODUCT::LABEL		= ""
	PD_PRODUCT::METHOD		= "STD"
	PD_PRODUCT::BDATE		= "19920801"
	PD_PRODUCT::SSTATUS             = "A"
	PD_PRODUCT::EDATE		= ""
	PD_PRODUCT::SECONDARY_CODE	= ""
	PD_PRODUCT::WEIGHT		= 0.0
	PD_PRODUCT::BOMUOM		= "EA"
	PD_PRODUCT::PRODUCT_FACTOR	= 1.0

	ERRFLAG% = 0%

	RETURN

 ExitProgram:
	!*******************************************************************
	! Exit program
	!*******************************************************************

	CLOSE #ICRMS.CH%
	CALL ASSG_FREECHANNEL(ICRMS.CH%)

	GOTO 32767

	%PAGE

 HelpError:
	!*******************************************************************
	! Help Message for an Error
	!*******************************************************************
	CALL HELP_34MESSAGE(SCOPE, NUM1$(ERL) + " " + ERT$(ERR), &
		"E", ERN$, FILENAME$, NUM1$(ERR))

	GOTO ExitProgram

19000	!*******************************************************************
	! Error trapping
	!*******************************************************************

	RESUME HelpError

32767	END
