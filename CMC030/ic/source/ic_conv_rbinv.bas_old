1	! Convert robisons inventory file

	option size = (integer long, real gfloat)

	%INCLUDE "SOURCE:[PD.OPEN]PD_PRODUCT.HB"
	MAP (PD_PRODUCT)	PD_PRODUCT_CDD		PD_PRODUCT

	%INCLUDE "SOURCE:[PC.OPEN]PC_COST.HB"
	MAP (PC_COST)		PC_COST_CDD		PC_COST

	%INCLUDE "SOURCE:[PC.OPEN]PC_PRICE.HB"
	MAP (PC_PRICE)		PC_PRICE_CDD		PC_PRICE

	%include "source:[ic.open]ic_35balance.hb"
	map (ic_35balance)	ic_35balance_cdd	ic_35balance

	%include "source:[ic.open]ic_35history.hb"
	map (ic_35history)	ic_35history_cdd	ic_35history

	%include "source:[ic.open]ic_binmap.hb"
	map (ic_binmap)	ic_binmap_cdd		ic_binmap

	%INCLUDE "SOURCE:[PO.OPEN]PO_PARTCROSS.HB"
	MAP (PO_PARTCROSS)	PO_PARTCROSS_CDD	PO_PARTCROSS

	%INCLUDE "SOURCE:[AP.OPEN]AP_VENDOR.HB"
	MAP (AP_VENDOR)		AP_VENDOR_CDD		AP_VENDOR

	MAP (AP_TEMP)	AP_TEMP.VENCODE$  =  3%, &
			AP_TEMP.PRIORITY$ =  1%, &
			AP_TEMP.VENNUM$   = 10%

	EXTERNAL REAL FUNCTION FUNC_ROUND

	ON ERROR GOTO 30000

100	open "INVENTORY.ASC" for input as file 1%, &
		recordsize 512%

	open "PRD14.TXT" for OUTPUT as file 10%, &
		ORGANIZATION SEQUENTIAL

110	map (XXX) robmac$ = 512%

120	map (XXX) &
		ROB.VC$ = 3%, &
		ROB.PN$ = 15%, &
		ROB.SC$ = 2%, &
		ROB.DES$ = 15%, &
		ROB.CD$ = 6%, &
		ROB.XXX1$ = 14%, &
		ROB.SUB$ = 19%, &
		ROB.CB$ = 5%, &
		ROB.CBOSTR1$ = 4%, &
		ROB.CBOSTR2$ = 4%, &
		ROB.PK$ = 4%, &
		ROB.PKSTR1$ = 3%, &
		ROB.PKSTR2$ = 3%, &
		ROB.PC$ = 1%, &
		ROB.DS$ = 4%, &
		ROB.FET$ = 5%, &
		ROB.WT$ = 5%, &
		ROB.STORES$ = 5%, &
		ROB.PKG$ = 4%, &
		ROB.PKGSTORES$ = 3%, &
		ROB.QOH$ = 5%, &
		ROB.QOHSTR1$ = 4%, &
		ROB.QOHSTR2$ = 4%, &
		ROB.LS$ = 3%, &
		ROB.LSSTR1$ = 2%, &
		ROB.LSSTR2$ = 2%, &
		ROB.P1$ = 5%, &
		ROB.P1STR1$ = 4%, &
		ROB.P1STR2$ = 4%, &
		ROB.P2$ = 5%, &
		ROB.P2STR1$ = 4%, &
		ROB.P2STR2$ = 4%, &
		ROB.P3$ = 5%, &
		ROB.P3STR1$ = 4%, &
		ROB.P3STR2$ = 4%, &
		ROB.P4$ = 5%, &
		ROB.P4STR1$ = 4%, &
		ROB.P4STR2$ = 4%, &
		ROB.P5$ = 5%, &
		ROB.P5STR1$ = 4%, &
		ROB.P5STR2$ = 4%, &
		ROB.QOO$ = 5%, &
		ROB.QOOSTR1$ = 4%, &
		ROB.QOOSTR2$ = 4%, &
		ROB.COST$ = 6%, &
		ROB.RTL$ = 6%, &
		ROB.WLK$ = 6%, &
		ROB.DLR$ = 6%, &
		ROB.JBR$ = 6%, &
		ROB.DP$ = 6%, &
		ROB.F$ = 6%, &
		ROB.CORE$ = 5%, &
		ROB.PQ$ = 4%, &
		ROB.PQSTORES$ = 3%, &
		ROB.RL$ = 5%, &
		ROB.ROLSTR1$ = 3%, &
		ROB.ROLSTR2$ = 3%, &
		ROB.TY$ = 6%, &
		ROB.TYSTR1$ = 5%, &
		ROB.TYSTR2$ = 5%, &
		ROB.LY$ = 6%, &
		ROB.LYSTR1$ = 5%, &
		ROB.LYSTR2$ = 5%, &
		ROB.UM$ = 3%, &
		ROB.CF$ = 1%, &
		ROB.CFSTORES$ = 1%, &
		ROB.VBO$ = 4%

210	%include "source:[PD.open]PD_PRODUCT.cre"

220	%INCLUDE "SOURCE:[PC.OPEN]PC_COST.CRE"

230	%INCLUDE "SOURCE:[PC.OPEN]PC_PRICE.CRE"

240	%INCLUDE "SOURCE:[ic.OPEN]ic_35balance.CRE"

250	YYYY$ = "1990"
	%INCLUDE "SOURCE:[IC.OPEN]ic_35HISTORY.CRE"
	IC_35HISTORY_1990.CH% = IC_35HISTORY.CH%
	IC_35HISTORY.CH% = 0.0

260	YYYY$ = "1991"
	%INCLUDE "SOURCE:[IC.OPEN]ic_35HISTORY.CRE"

270	%INCLUDE "SOURCE:[PO.OPEN]PO_PARTCROSS.CRE"

280	%INCLUDE "SOURCE:[AP.OPEN]AP_VENDOR.OPN"

290	%INCLUDE "SOURCE:[IC.OPEN]IC_BINMAP.CRE"

500	PRINT "Creating temporary file.  Reading work files."

	CALL ASSG_CHANNEL(AP_TEMP.CH%,STAT%)
	CALL READ_DEVICE("UTL_WORK", UTL_WORK.DEV$, STAT%)

	OPEN UTL_WORK.DEV$ + "AP_VENDOR.TMP" FOR OUTPUT AS FILE AP_TEMP.CH%, &
		ORGANIZATION INDEXED FIXED, &
		MAP AP_TEMP, &
		PRIMARY KEY (AP_TEMP.VENCODE$, AP_TEMP.PRIORITY$), &
		!TEMPORARY, &
		BUFFER 32%, &
		ACCESS MODIFY, ALLOW NONE

	RESET #AP_VENDOR.CH%

 GetVendorRec:
510	GET #AP_VENDOR.CH%, REGARDLESS

	GOTO GetVendorRec IF AP_VENDOR::FEDID = ""

	TEST$ = TRM$(AP_VENDOR::FEDID) + ","

	X% = INSTR(1%, TEST$, ",")

530	WHILE X% <> 0%
		L$ = LEFT(TEST$, X%-1%)
		TEST$ = RIGHT(TEST$, X%+1%)
		AP_TEMP.VENCODE$  = RIGHT(L$, 2%)
		AP_TEMP.PRIORITY$ = LEFT(L$, 1%)
		AP_TEMP.VENNUM$   = AP_VENDOR::VENNUM
		PUT #AP_TEMP.CH%

535		X% = INSTR(1%, TEST$, ",")
	NEXT

	GOTO GetVendorRec

1000	linput #1%, xx$

	robmac$ = xx$

2100	SELECT EDIT$(ROB.VC$,-1%)
		CASE "DUN"
			PD_PRODUCT::PRODUCT_NUM		= ROB.PN$
		CASE "HAN"
			ROB.VC$ = "C"
		CASE "HIRD"
			ROB.VC$ = "HIR"
		CASE "JLO"
			DASH% = INSTR(2%,ROB.PN$,"-")
			ROB.PN$ = LEFT(ROB.PN$,DASH%-1%)+ &
				RIGHT(ROB.PN$,DASH%+1%)
		CASE "SAC"
			ROB.VC$ = "SC"
		CASE "SUN"
			ROB.VC$ = "SS"
	END SELECT

	PRODUCT$ = EDIT$(ROB.VC$,-1%)+EDIT$(ROB.PN$,-1%)
	IF LEN(PRODUCT$)>14%
	THEN
		PRINT #10%, PRODUCT$;" ";FORMAT$(P%+10001%,"#####")
		PD_PRODUCT::PRODUCT_NUM		= ROB.PN$
	ELSE
		PD_PRODUCT::PRODUCT_NUM		= PRODUCT$
	END IF

	goto 1000 if left(pd_product::product_num,1%)=" " OR ROB.UM$="0"

2110	PD_PRODUCT::WEIGHT		= VAL(ROB.WT$)

2120	P% = 0% IF EDIT$(ROB.VC$,-1%) <> TEST.VC$
	P% = P% + 1%
	PD_PRODUCT::SECONDARY_CODE	= EDIT$(ROB.VC$,-1%) + &
						FORMAT$(P%,"<0>####")
	CT% = CT% + 1%
	PRINT PD_PRODUCT::PRODUCT_NUM;P%;CT%;CHR$(13%);
	e134% = 0%
	TEST.VC$ = EDIT$(ROB.VC$,-1%)

 AddProduct:
	PD_PRODUCT::CATEGORY		= EDIT$(ROB.VC$,-1%)
	PD_PRODUCT::DESCRIPTION		= ROB.DES$

	SELECT PD_PRODUCT::CATEGORY
		CASE "TRS"
			PD_PRODUCT::PROD_TYPE	=  "FG"
		CASE "MFG"
			PD_PRODUCT::PROD_TYPE	=  "RM"
		CASE ELSE
			PD_PRODUCT::PROD_TYPE	=  "PP"
	END SELECT

	IF ROB.UM$ = ""
	THEN
		PD_PRODUCT::UOM		= "EA"
	ELSE
		PD_PRODUCT::UOM		= EDIT$(ROB.UM$,-1%)
	END IF
	PD_PRODUCT::METHOD		= "STD"
	PD_PRODUCT::BDATE		= "19920101"
	PD_PRODUCT::SSTATUS		= "A"
	PD_PRODUCT::EDATE		= ""
	PD_PRODUCT::BOMUOM		= PD_PRODUCT::UOM
	PD_PRODUCT::PRODUCT_FACTOR	= 0.0

	ROBPC$ =""
	!IF ROB.PC$ <> ""
	!THEN
	!	FOR I% = 1% TO 2%
	!		IF MID(ROB.PC$,I%,1%) = " "
	!		THEN	ROBPC$ = ROBPC$ + "-"
	!		ELSE    ROBPC$ = ROBPC$ + MID(ROB.PC$,I%,1%)
	!		END IF
	!	NEXT I%
	!END IF

	!ROBCD$ =""
	!DASH% = 0%
	!IF ROB.CD$ <> ""
	!THEN
	!	FOR I% = 1% TO 6%
	!		IF MID(ROB.CD$,I%,1%) = " " AND DASH% = 0%
	!		THEN	ROBCD$ = ROBCD$ + "-"
	!		ELSE    ROBCD$ = ROBCD$ + MID(ROB.CD$,I%,1%)
	!			DASH% = -1%
	!		END IF
	!	NEXT I%
	!END IF

	!PD_PRODUCT::LABEL	= ROBPC$+ROBCD$
	PD_PRODUCT::LABEL	= ""

	PUT #PD_PRODUCT.CH%

	!print PD_PRODUCT::PRODUCT_NUM;NUM1$(P%);CHR$(13%);

2150	FIND #AP_TEMP.CH%, KEY#0% EQ EDIT$(ROB.VC$, -1%)

	PO_PARTCROSS::PRODUCT = PD_PRODUCT::PRODUCT_NUM
	PO_PARTCROSS::VENPROD = ROB.PN$
	PO_PARTCROSS::VENUOM  = PD_PRODUCT::UOM
	PO_PARTCROSS::VENFAC  = 1.0
	PO_PARTCROSS::FACTOR  = 1.0
	PO_PARTCROSS::DESCR   = ROB.DES$
	PO_PARTCROSS::LEAD    = 0%

2160	GET #AP_TEMP.CH%

	GOTO 2180 IF EDIT$(AP_TEMP.VENCODE$, -1%) <> EDIT$(ROB.VC$, -1%)

	PO_PARTCROSS::VENDOR  = AP_TEMP.VENNUM$
	PO_PARTCROSS::PRIORITY = AP_TEMP.PRIORITY$

	PUT #PO_PARTCROSS.CH%

	GOTO 2160

2180	SAF = VAL(ROB.RL$)
	IF SAF <> 0.0
	THEN
		IC_BINMAP::PRODUCT  = PD_PRODUCT::PRODUCT_NUM
		IC_BINMAP::LOCATION = "MARC"
		IC_BINMAP::BIN(I%)  = "" FOR I% = 0% TO 3%
		IC_BINMAP::SAFETY   = SAF
		IC_BINMAP::MAXLEVEL = 0.0
		IC_BINMAP::ABC      = "C"
		IC_BINMAP::CYCLEMAP = ""
		PUT #IC_BINMAP.CH%
	END IF

2190	SAF = VAL(ROB.ROLSTR1$)
	IF SAF <> 0.0
	THEN
		IC_BINMAP::PRODUCT  = PD_PRODUCT::PRODUCT_NUM
		IC_BINMAP::LOCATION = "ROBI"
		IC_BINMAP::BIN(I%)  = "" FOR I% = 0% TO 3%
		IC_BINMAP::SAFETY   = SAF
		IC_BINMAP::MAXLEVEL = 0.0
		IC_BINMAP::ABC      = "C"
		IC_BINMAP::CYCLEMAP = ""
		PUT #IC_BINMAP.CH%
	END IF

2200	!
	! Cost Records
	!
	COST = VAL(ROB.COST$) / 100.0
	PC_COST::PRODUCT		= PD_PRODUCT::PRODUCT_NUM
	PC_COST::EFFDATE		= "19910101"
	PC_COST::COST			= VAL(ROB.COST$) / 100.0

	if pc_cost::cost <> 0.0
	then
		PC_COST::LOCATION	= "ROBI"
		PUT #PC_COST.CH%
	end if

2300	!
	! Price Records
	!
	DIV% = 0%
	T.PRICE = 0.0
	PC_PRICE::PRODUCT_NUM		= PD_PRODUCT::PRODUCT_NUM
	PC_PRICE::XDATE			= "19910101"
	PC_PRICE::XTIME			= ""

	PRICE = VAL(ROB.RTL$) / 100.0
	IF (PRICE <> 0.0)
	THEN
		PC_PRICE::LOCATION	= "ROBI"
		PC_PRICE::PCTYPE	= "P1"
		PC_PRICE::PRICECOST	= PRICE
		PUT #PC_PRICE.CH%
		DIV% = DIV% + 1%
		T.PRICE = T.PRICE + PRICE
	END IF

	PRICE = VAL(ROB.WLK$) / 100.0
	IF (PRICE <> 0.0)
	THEN
		PC_PRICE::LOCATION	= "ROBI"
		PC_PRICE::PCTYPE	= "P2"
		PC_PRICE::PRICECOST	= PRICE
		PUT #PC_PRICE.CH%
		DIV% = DIV% + 1%
		T.PRICE = T.PRICE + PRICE
	END IF

	PRICE = VAL(ROB.DLR$) / 100.0
	IF (PRICE <> 0.0)
	THEN
		PC_PRICE::LOCATION	= "ROBI"
		PC_PRICE::PCTYPE	= "P3"
		PC_PRICE::PRICECOST	= PRICE
		PUT #PC_PRICE.CH%
		DIV% = DIV% + 1%
		T.PRICE = T.PRICE + PRICE
	END IF

	PRICE = VAL(ROB.JBR$) / 100.0
	IF (PRICE <> 0.0)
	THEN
		PC_PRICE::LOCATION	= "ROBI"
		PC_PRICE::PCTYPE	= "P4"
		PC_PRICE::PRICECOST	= PRICE
		PUT #PC_PRICE.CH%
		DIV% = DIV% + 1%
		T.PRICE = T.PRICE + PRICE
	END IF

	PRICE = VAL(ROB.DP$) / 100.0
	IF (PRICE <> 0.0)
	THEN
		PC_PRICE::LOCATION	= "ROBI"
		PC_PRICE::PCTYPE	= "P5"
		PC_PRICE::PRICECOST	= PRICE
		PUT #PC_PRICE.CH%
		DIV% = DIV% + 1%
		T.PRICE = T.PRICE + PRICE
	END IF

	PRICE = VAL(ROB.CORE$) / 100.0
	IF (PRICE <> 0.0)
	THEN
		PC_PRICE::LOCATION	= "ROBI"
		PC_PRICE::PCTYPE	= "P7"
		PC_PRICE::PRICECOST	= PRICE
		PUT #PC_PRICE.CH%
	END IF

2400	!
	! Balances
	!
	ONHAND = VAL(ROB.QOH$)
	IF ONHAND <> 0.0
	THEN
		IC_35BALANCE::PRODUCT	= PD_PRODUCT::PRODUCT_NUM
		IC_35BALANCE::LOCATION	= "MARC"
		IC_35BALANCE::TRANSTYPE	= "CC"
		IC_35BALANCE::BBALANCE	= ONHAND
		IC_35BALANCE::PBALANCE	= 0.0
		IC_35BALANCE::RBALANCE	= 0.0
		PUT #IC_35BALANCE.CH%
	END IF

2410	ONORDER = VAL(ROB.QOO$)
	IF ONORDER <> 0.0
	THEN
		IC_35BALANCE::PRODUCT	= PD_PRODUCT::PRODUCT_NUM
		IC_35BALANCE::LOCATION	= "MARC"
		IC_35BALANCE::TRANSTYPE	= "PO"
		IC_35BALANCE::BBALANCE	= ONORDER
		IC_35BALANCE::PBALANCE	= 0.0
		IC_35BALANCE::RBALANCE	= 0.0
		PUT #IC_35BALANCE.CH%
	END IF

	!
	! Balances
	!
2420	ONHAND = VAL(ROB.QOHstr1$)
	IF ONHAND <> 0.0
	THEN
		IC_35BALANCE::PRODUCT	= PD_PRODUCT::PRODUCT_NUM
		IC_35BALANCE::LOCATION	= "ROBI"
		IC_35BALANCE::TRANSTYPE	= "CC"
		IC_35BALANCE::BBALANCE	= ONHAND
		IC_35BALANCE::PBALANCE	= 0.0
		IC_35BALANCE::RBALANCE	= 0.0
		PUT #IC_35BALANCE.CH%
	END IF

2430	ONORDER = VAL(ROB.QOOSTR1$)
	IF ONORDER <> 0.0
	THEN
		IC_35BALANCE::PRODUCT	= PD_PRODUCT::PRODUCT_NUM
		IC_35BALANCE::LOCATION	= "ROBI"
		IC_35BALANCE::TRANSTYPE	= "PO"
		IC_35BALANCE::BBALANCE	= ONORDER
		IC_35BALANCE::PBALANCE	= 0.0
		IC_35BALANCE::RBALANCE	= 0.0
		PUT #IC_35BALANCE.CH%
	END IF

2440	IF DIV% = 0%
	THEN
		PRICE = 0.0
	ELSE
		PRICE = T.PRICE/DIV%
	END IF

	IC_35HISTORY::PRODUCT	= PD_PRODUCT::PRODUCT_NUM
	IC_35HISTORY::LOCATION	= "MARC"
	IC_35HISTORY::TRANSTYPE	= "SA"
	IC_35HISTORY::CROSSREF	= ""
	IC_35HISTORY::SUBACCT = ""
	FOR I%=0% TO 12%
		IC_35HISTORY::PQUANTITY(I%) = 0.0
	NEXT I%
	IC_35HISTORY::PQUANTITY(3%) = -VAL(ROB.P4$)
	IC_35HISTORY::PQUANTITY(6%) = -VAL(ROB.P3$)
	IC_35HISTORY::PQUANTITY(9%) = -VAL(ROB.P2$)
	IC_35HISTORY::PQUANTITY(12%) = -VAL(ROB.P1$)

	IF IC_35HISTORY::PQUANTITY(3%) <> 0. OR &
			IC_35HISTORY::PQUANTITY(6%) <> 0.0 OR &
			IC_35HISTORY::PQUANTITY(9%) <> 0.0 OR &
			IC_35HISTORY::PQUANTITY(12%) <> 0.0
	THEN

		IC_35HISTORY::PQUANTITY(1%) = -INT(ABS(IC_35HISTORY::PQUANTITY(3%))/3%)
		IC_35HISTORY::PQUANTITY(2%) = IC_35HISTORY::PQUANTITY(1%)
		IC_35HISTORY::PQUANTITY(3%) = IC_35HISTORY::PQUANTITY(3%) - &
				IC_35HISTORY::PQUANTITY(1%) - &
				IC_35HISTORY::PQUANTITY(2%)

		IC_35HISTORY::PQUANTITY(4%) = -INT(ABS(IC_35HISTORY::PQUANTITY(6%))/3%)
		IC_35HISTORY::PQUANTITY(5%) = IC_35HISTORY::PQUANTITY(4%)
		IC_35HISTORY::PQUANTITY(6%) = IC_35HISTORY::PQUANTITY(6%) - &
				IC_35HISTORY::PQUANTITY(4%) - &
				IC_35HISTORY::PQUANTITY(5%)

		IC_35HISTORY::PQUANTITY(7%) = -INT(ABS(IC_35HISTORY::PQUANTITY(9%))/3%)
		IC_35HISTORY::PQUANTITY(8%) = IC_35HISTORY::PQUANTITY(7%)
		IC_35HISTORY::PQUANTITY(9%) = IC_35HISTORY::PQUANTITY(9%) - &
				IC_35HISTORY::PQUANTITY(7%) - &
				IC_35HISTORY::PQUANTITY(8%)

		IC_35HISTORY::PQUANTITY(10%) = -INT(ABS(IC_35HISTORY::PQUANTITY(12%))/3%)
		IC_35HISTORY::PQUANTITY(11%) = IC_35HISTORY::PQUANTITY(10%)
		IC_35HISTORY::PQUANTITY(12%) = IC_35HISTORY::PQUANTITY(12%) - &
				IC_35HISTORY::PQUANTITY(10%) - &
				IC_35HISTORY::PQUANTITY(11%)

		FOR I%=0% TO 12%
			IC_35HISTORY::PRICEAMT(I%) = &
				FUNC_ROUND(ABS(PRICE * IC_35HISTORY::PQUANTITY(I%)),2%)
			IC_35HISTORY::COSTAMT(I%) = &
				FUNC_ROUND(ABS(COST * IC_35HISTORY::PQUANTITY(I%)),2%)
		NEXT I%

		PUT #IC_35HISTORY.CH%
	END IF

2450	FOR I%=0% TO 12%
		IC_35HISTORY::PQUANTITY(I%) = 0.0
	NEXT I%

	IC_35HISTORY::PQUANTITY(12%) = -VAL(ROB.P5$)

	IF IC_35HISTORY::PQUANTITY(12%) <> 0.0
	THEN
		IC_35HISTORY::PQUANTITY(10%) = -INT(ABS(IC_35HISTORY::PQUANTITY(12%))/3%)
		IC_35HISTORY::PQUANTITY(11%) = IC_35HISTORY::PQUANTITY(10%)
		IC_35HISTORY::PQUANTITY(12%) = IC_35HISTORY::PQUANTITY(12%) - &
				IC_35HISTORY::PQUANTITY(10%) - &
				IC_35HISTORY::PQUANTITY(11%)

		FOR I%=0% TO 12%
			IC_35HISTORY::PRICEAMT(I%) = &
				FUNC_ROUND(ABS(PRICE * IC_35HISTORY::PQUANTITY(I%)),2%)
			IC_35HISTORY::COSTAMT(I%) = &
				FUNC_ROUND(ABS(COST * IC_35HISTORY::PQUANTITY(I%)),2%)
		NEXT I%

		PUT #IC_35HISTORY_1990.CH%
	END IF

2460	IC_35HISTORY::PRODUCT	= PD_PRODUCT::PRODUCT_NUM
	IC_35HISTORY::LOCATION	= "ROBI"
	IC_35HISTORY::TRANSTYPE	= "SA"
	IC_35HISTORY::CROSSREF	= ""
	IC_35HISTORY::SUBACCT = ""
	FOR I%=0% TO 12%
		IC_35HISTORY::PQUANTITY(I%) = 0.0
	NEXT I%
	IC_35HISTORY::PQUANTITY(3%) = -VAL(ROB.P4STR1$)
	IC_35HISTORY::PQUANTITY(6%) = -VAL(ROB.P3STR1$)
	IC_35HISTORY::PQUANTITY(9%) = -VAL(ROB.P2STR1$)
	IC_35HISTORY::PQUANTITY(12%) = -VAL(ROB.P1STR1$)

	IF IC_35HISTORY::PQUANTITY(3%) <> 0. OR &
			IC_35HISTORY::PQUANTITY(6%) <> 0.0 OR &
			IC_35HISTORY::PQUANTITY(9%) <> 0.0 OR &
			IC_35HISTORY::PQUANTITY(12%) <> 0.0
	THEN
		IC_35HISTORY::PQUANTITY(1%) = -INT(ABS(IC_35HISTORY::PQUANTITY(3%))/3%)
		IC_35HISTORY::PQUANTITY(2%) = IC_35HISTORY::PQUANTITY(1%)
		IC_35HISTORY::PQUANTITY(3%) = IC_35HISTORY::PQUANTITY(3%) - &
				IC_35HISTORY::PQUANTITY(1%) - &
				IC_35HISTORY::PQUANTITY(2%)

		IC_35HISTORY::PQUANTITY(4%) = -INT(ABS(IC_35HISTORY::PQUANTITY(6%))/3%)
		IC_35HISTORY::PQUANTITY(5%) = IC_35HISTORY::PQUANTITY(4%)
		IC_35HISTORY::PQUANTITY(6%) = IC_35HISTORY::PQUANTITY(6%) - &
				IC_35HISTORY::PQUANTITY(4%) - &
				IC_35HISTORY::PQUANTITY(5%)

		IC_35HISTORY::PQUANTITY(7%) = -INT(ABS(IC_35HISTORY::PQUANTITY(9%))/3%)
		IC_35HISTORY::PQUANTITY(8%) = IC_35HISTORY::PQUANTITY(7%)
		IC_35HISTORY::PQUANTITY(9%) = IC_35HISTORY::PQUANTITY(9%) - &
				IC_35HISTORY::PQUANTITY(7%) - &
				IC_35HISTORY::PQUANTITY(8%)

		IC_35HISTORY::PQUANTITY(10%) = -INT(ABS(IC_35HISTORY::PQUANTITY(12%))/3%)
		IC_35HISTORY::PQUANTITY(11%) = IC_35HISTORY::PQUANTITY(10%)
		IC_35HISTORY::PQUANTITY(12%) = IC_35HISTORY::PQUANTITY(12%) - &
				IC_35HISTORY::PQUANTITY(10%) - &
				IC_35HISTORY::PQUANTITY(11%)

		FOR I%=0% TO 12%
			IC_35HISTORY::PRICEAMT(I%) = &
				FUNC_ROUND(ABS(PRICE * IC_35HISTORY::PQUANTITY(I%)),2%)
			IC_35HISTORY::COSTAMT(I%) = &
				FUNC_ROUND(ABS(COST * IC_35HISTORY::PQUANTITY(I%)),2%)
		NEXT I%

		PUT #IC_35HISTORY.CH%
	END IF

2470	FOR I%=0% TO 12%
		IC_35HISTORY::PQUANTITY(I%) = 0.0
	NEXT I%
	IC_35HISTORY::PQUANTITY(12%) = -VAL(ROB.P5STR1$)

	IF IC_35HISTORY::PQUANTITY(12%) <> 0.0
	THEN
		IC_35HISTORY::PQUANTITY(10%) = -INT(ABS(IC_35HISTORY::PQUANTITY(12%))/3%)
		IC_35HISTORY::PQUANTITY(11%) = IC_35HISTORY::PQUANTITY(10%)
		IC_35HISTORY::PQUANTITY(12%) = IC_35HISTORY::PQUANTITY(12%) - &
				IC_35HISTORY::PQUANTITY(10%) - &
				IC_35HISTORY::PQUANTITY(11%)

		FOR I%=0% TO 12%
			IC_35HISTORY::PRICEAMT(I%) = &
				FUNC_ROUND(ABS(PRICE * IC_35HISTORY::PQUANTITY(I%)),2%)
			IC_35HISTORY::COSTAMT(I%) = &
				FUNC_ROUND(ABS(COST * IC_35HISTORY::PQUANTITY(I%)),2%)
		NEXT I%

		PUT #IC_35HISTORY_1990.CH%
	END IF

2900	!
	! Get next product
	!
	goto 1000

30000	select erl

	CASE 510%
		RESUME 1000 IF ERR = 11%

	CASE 530%
		print "dupl"+AP_TEMP.PRIORITY$+AP_TEMP.VENCODE$
		RESUME 535 IF ERR = 134%

	case 1000%
		print
		print XX$
		print
		resume if err = 11%

	case 2100%

		IF err = 134%
		then
			PD_PRODUCT::PRODUCT_NUM	= "134 "+trm$(ROB.PN$)+rob.vc$
			resume 1000 if e134% = -1%
			e134% = -1%
			resume AddProduct
		end if

	case 2110%
		resume 2120 if err = 52%

	CASE 2150%
		RESUME 2180 IF ERR = 155%

	CASE 2160%
		RESUME 2180 IF ERR = 11%

	case 2400%
		resume 2410 if err = 52%

	case 2410%
		resume 2420 if err = 52%

	case 2420%
		resume 2430 if err = 52%

	case 2430%
		resume 2440 if err = 52%

	case 2440%
		resume 2450 if err = 52%

	case 2450%
		resume 2460 if err = 52%

	end select

		print
		print XX$
		print
		print
		print XX$
		print
	print erl;err
	resume 32767

32767	end
