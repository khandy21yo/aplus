1	%TITLE "Inventory Ledger Scan Report"
	%SBTTL "IC_OUTP_LEDGER"
	%IDENT "V3.6a Calico"

	FUNCTION LONG IC_OUTP_LEDGER

	!
	! COPYRIGHT (C) 1986, 1988 BY
	!
	! Computer Management Center, Inc.
	! Idaho Falls, Idaho.
	!
	! This software is furnished under a license and may be used and
	! copied only in accordance with terms of such license and with
	! the inclusion of the above copyright notice.  This software or
	! any other copies thereof may not be provided or otherwise made
	! available to any other person.  No title to and ownership of
	! the software is hereby transferred.
	!
	! The information in this software is subject to change without
	! notice and should not be construed as a commitment by
	! Computer Management Center, Inc.
	!
	! CMC assumes no responsibility for the use or reliability of
	! its software on equipment which is not supported by CMC.
	!
	!++
	!
	! Abstract:HELP
	!	.b
	!	.lm +5
	!	This program prints Inventory ledger scan report
	!	.lm -5
	!
	! Index:
	!
	! Option:
	!
	! Compile:
	!
	!	$ BAS IC_SOURCE:IC_OUTP_LEDGER/LINE
	!	$ LIB FUNC_LIB:CMCFUN/REP IC_OUTP_LEDGER
	!	$ DELETE IC_OUTP_LEDGER.OBJ;*
	!
	! Author:
	!
	!	08/09/88 - Frank Starman
	!
	! Modification History:
	!
	!	12/20/91 - Dan Perkins
	!		Removed some undefined sort keys so the
	!		program wouldn't die when these keys were
	!		selected.
	!
	!	04/15/95 - Kevin Handy
	!		(V3.6)
	!		Update to V3.6 coding standards
	!
	!	09/04/96 - Kevin Handy
	!		Reformat source code.
	!
	!	05/09/97 - Kevin Handy
	!		Use OUTP_INITFORM function
	!
	!	08/30/97 - Kevin Handy
	!		Change 'val' to 'val%'
	!
	!	08/25/97 - Kevin Handy
	!		Lose error trap for 500, which doesn;t exist.
	!
	!	08/19/98 - Kevin Handy
	!		(V3.6a Calico)
	!		Update to V3.6a coding standards
	!
	!	08/30/2000 - Kevin Handy
	!		Use WHEN ERROR IN
	!--

	%PAGE

	OPTION SIZE = (INTEGER LONG, REAL GFLOAT)

	!
	! Include files
	!
	%INCLUDE "FUNC_INCLUDE:FUNCTION.HB"

	MAP (SCOPE) SCOPE_STRUCT SCOPE

	%INCLUDE "SOURCE:[UTL.OPEN]UTL_REPORTX.HB"
	DECLARE			UTL_REPORTX_CDD		UTL_REPORTX

	%INCLUDE "SOURCE:[PD.OPEN]PD_PRODUCT.HB"
	MAP (PD_PRODUCT)	PD_PRODUCT_CDD		PD_PRODUCT

	%INCLUDE "SOURCE:[IC.OPEN]IC_TRANSACTION.HB"
	MAP (IC_TRANSACTION)	IC_TRANSACTION_CDD	IC_TRANSACTION

	%INCLUDE "SOURCE:[UTL.OPEN]UTL_TRANSTYPE.HB"
	MAP (UTL_TRANSTYPE)	UTL_TRANSTYPE_CDD	UTL_TRANSTYPE

	!
	! External functions
	!
	EXTERNAL LONG	FUNCTION OUTP_INITFORM

	DIM IC_TRANSACTION_FILE$(100%)

	%PAGE

	ON ERROR GOTO 19000

	TEMP_PROGRAM$ = SCOPE::PRG_PROGRAM
	TEMP_ITEM$ = SCOPE::PRG_ITEM
	TEMP_IDENT$ = SCOPE::PRG_IDENT

	SCOPE::PRG_PROGRAM = "IC_OUTP_LEDGER"
	SCOPE::PRG_ITEM = "HELP"
	SCOPE::PRG_IDENT = "H"

	IC_OUTP_LEDGER = 0%
	REPORT$ = "IC051"

 SetScreen:
	!******************************************************************
	! Set up the report settings screen
	!******************************************************************

	!
	! Ask user to change settings
	!
	GOTO Exit1 &
		IF OUTP_INITFORM(UTL_REPORTX, REPORT$, "") <> CMC$_NORMAL

	!
	! Set up from user input
	!
	SORT.BY$ = EDIT$(UTL_REPORTX::OPTDEF(0%), 132%)

	!++
	! Abstract:FLD01
	!	^*(01) Sort \*
	!	.b
	!	.lm +5
	!	The contents of the ^*Sort\* field determines the order in which the report
	!	will be printed or displayed.
	!	.b
	!	Valid entries are:
	!	.table 3,25
	!	.te
	!	^*B\* - Batch Number
	!	.te
	!	^*C\* - Cross Reference
	!	.te
	!	^*L\* - Location
	!	.te
	!	^*P\* - Product Number
	!	.te
	!	^*S\* - Sub Account Number
	!	.end table
	!	An entry is required in this field.
	!	.lm -5
	!
	! Index:
	!	.x Sort>Query
	!	.x Query>Sort
	!
	!--

	FROM.ITEM$ = EDIT$(UTL_REPORTX::OPTDEF(1%), 132%)

	!++
	! Abstract:FLD02
	!	^*(02) From Item\*
	!	.b
	!	.lm +5
	!	The ^*From Item\* value entered in this field causes
	!	the report to begin with a selected item number.  The value entered
	!	must be in agreement with the value in field (01) Sort by.
	!	.b
	!	A blank setting will cause the report to begin with the first
	!	item number in the file.
	!	.lm -5
	!
	! Index:
	!	.x From Item
	!	.x Item>From
	!
	!--

	TO.ITEM$ = EDIT$(UTL_REPORTX::OPTDEF(2%), 132%)

	!++
	! Abstract:FLD03
	!	^*(03) To Item\*
	!	.b
	!	.lm +5
	!	The ^*To Item\* value entered in this field will cause the report
	!	to end with a selected item number.  The value entered must be in
	!	agreement with the value in field (01) Sort by.
	!	.b
	!	A blank setting will cause the report to end with the last item
	!	number in the file.
	!	.lm -5
	!
	! Index:
	!	.x To Item
	!	.x Item>To
	!
	!--

	WLDCRD$ = EDIT$(UTL_REPORTX::OPTDEF(3%), -1%)

	!++
	! Abstract:FLD04
	!	^*(04) Wildcard\*
	!	.b
	!	.lm +5
	!	The ^*Wildcard\* field provides the means to select
	!	designated item numbers to be printed or displayed by entering a
	!	"wildcard" value in this field.
	!	.lm -5
	!
	! Index:
	!	.x Wildcard>Query
	!	.x Query>Wildcard
	!
	!--

	!LOCATION$ = EDIT$(UTL_REPORTX::OPTDEF(4%), -1%)

	!++
	! Abstract:FLD05
	!	^*(05) Locations\*
	!	.b
	!	.lm +5
	!	The ^*Locations\* field provides the means to enter the locations
	!	codes (which have been established in the Utility system) that are
	!	to be printed or displayed in the report.
	!	.b
	!	An entry is required in this field.
	!	.lm -5
	!
	! Index:
	!	.x Locations>Query
	!	.x Query>Locations
	!
	!--

	SCAN.BY$ = EDIT$(UTL_REPORTX::OPTDEF(5%), 132%)

	!++
	! Abstract:FLD06
	!	^*(06) Scan\*
	!	.b
	!	.lm +5
	!	The ^*Scan\* option provides the means to Scan the report
	!	in a selected order.
	!	.b
	!	Valid settings are:
	!	.table 3,25
	!	.te
	!	^*B\* - Batch _#
	!	.te
	!	^*C\* - Cross Reference
	!	.te
	!	^*L\* - Location
	!	.te
	!	^*P\* - Product Number
	!	.te
	!	^*S\* - Sub Account Number
	!	.end table
	!	An entry is required in this field.
	!	.lm -5
	!
	! Index:
	!	.x Scan>Query
	!	.x Query>Scan
	!
	!--

	SCAN.WLDCRD$ = EDIT$(UTL_REPORTX::OPTDEF(6%), -1%)

	!++
	! Abstract:FLD07
	!	^*(07) Scan Wildcard\*
	!	.b
	!	.lm +5
	!	The ^*Scan Wildcard\* field provides the means to select
	!	designated item numbers to be printed by entering
	!	a "wildcard" value in this field.
	!	.lm -5
	!
	! Index:
	!	.x Scan Wildcard>Query
	!	.x Query>Scan Wildcard
	!
	!--

	FROM.PERIOD$ = EDIT$(UTL_REPORTX::OPTDEF(8%), 132%)

	!++
	! Abstract:FLD09
	!	^*(09) From Period\*
	!	.b
	!	.lm +5
	!	The ^*From Period\* value entered in this field
	!	causes the report to begin at a specified period.
	!	.b
	!	A blank setting will cause the report to begin from
	!	the first period in the file.
	!	.b
	!	The format for entry is YYYYPP.
	!	.lm -5
	!
	! Index:
	!	.x From Period
	!	.x Period>From
	!
	!--

	TO.PERIOD$ = EDIT$(UTL_REPORTX::OPTDEF(9%), 132%)

	!++
	! Abstract:FLD10
	!	^*(10) To Period\*
	!	.b
	!	.lm +5
	!	The ^*To Period\* value entered in this field will cause
	!	the report to end at a specified period.
	!	.b
	!	A blank setting will cause the report to print to the
	!	end of the file.
	!	.b
	!	The format for entry is YYYYPP.
	!	.lm -5
	!
	! Index:
	!	.x To Period
	!	.x Period>To
	!
	!--

510	WHEN ERROR IN
		%INCLUDE "SOURCE:[UTL.OPEN]UTL_TRANSTYPE.OPN"
	USE
		FILENAME$ = "UTL_TRANSTYPE"
		CONTINUE HelpError
	END WHEN

520	WHEN ERROR IN
		%INCLUDE "SOURCE:[PD.OPEN]PD_PRODUCT.OPN"
	USE
		CONTINUE FindTrans IF ERR = 5%
		FILENAME$ = "PD_PRODUCT"
		CONTINUE HelpError
	END WHEN

 FindTrans:
	CALL READ_DEVICE("IC_TRANSACTION",IC_TRANSACTION.DEV$,STAT%)
	CALL FIND_FILE(IC_TRANSACTION.DEV$ + "IC_TRANSACTION_*.LED", &
		IC_TRANSACTION_FILE$(), 16%, "", "")

	IC_TRANSACTION_FILE% = VAL%(IC_TRANSACTION_FILE$(0%))

	IF IC_TRANSACTION_FILE%
	THEN
		IC_TRANSACTION_FILE$(LOOP%) = &
			MID(IC_TRANSACTION_FILE$(LOOP%),16%,6%) &
				FOR LOOP% = 1% TO IC_TRANSACTION_FILE%
	ELSE
		CALL ENTR_3MESSAGE(SCOPE, &
			"Unable to find any inventory ledger file", 0%)
		GOTO ExitFunction
	END IF

 ReportTitle:
	!
	! Title
	!
	SELECT SORT.BY$

	CASE "B"
		SORT.KEY% = 1%
		ADD.TITLE$ = "BY  BATCH  NUMBER"

	CASE "C"
		SORT.KEY% = 3%
		ADD.TITLE$ = "BY  CROSS  REFERENCE"

	CASE "L"
		SORT.KEY% = 4%
		ADD.TITLE$ = "BY  LOCATION"

	CASE "P"
		SORT.KEY% = 0%
		ADD.TITLE$ = "BY  PRODUCT  NUMBER"

	CASE "S"
		SORT.KEY% = 2%
		ADD.TITLE$ = "BY  SUBACCOUNT"
	END SELECT

	TITLE$(1%) = "INVENTORY  LEDGER  QUERY  " + ADD.TITLE$
	TITLE$(2%) = "Inventory control system"
	TITLE$(3%) = ""

	!
	! Heading
	!
	TITLE$(4%) = "Product#       Description                    "+ &
		"          Loc  TransDate  "                            + &
		"      Onhand       Alloc     OnOrder"

	TITLE$(5%) = "               PostDate   Batch# PrimRef   "   + &
		"       CrossRef   Subacct    Lot#"

	TITLE$(6%) = "."

	%PAGE

17000	!******************************************************************
	! OUTPUT REPORT
	!******************************************************************

	FOR LOOP% = IC_TRANSACTION_FILE% TO 1% STEP -1%

		YYYYPP$ = IC_TRANSACTION_FILE$(LOOP%)
		GOTO NextPeriod IF FROM.PERIOD$ <> "" AND FROM.PERIOD$ < YYYYPP$
		GOTO ExitFunction IF TO.PERIOD$ <> "" AND TO.PERIOD$ > YYYYPP$

		CLOSE IC_TRANSACTION.CH%
		WHEN ERROR IN
			%INCLUDE "SOURCE:[IC.OPEN]IC_TRANSACTION.OPN"
		USE
			FILENAME$ = "IC_TRANSACTION"
			CONTINUE HelpError
		END WHEN

		TEST_PRINT$ = ""

		TEXT$ = "    Period " + YYYYPP$ + &
			STRING$(54%, ASCII("."))

		CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), TEXT$, 2%) &

17010		WHEN ERROR IN
			IF FROM.ITEM$ = ""
			THEN
				RESET #IC_TRANSACTION.CH%, KEY#SORT.KEY%
			ELSE
				FIND #IC_TRANSACTION.CH%, &
					KEY#SORT.KEY% GE FROM.ITEM$, &
					REGARDLESS
			END IF
		USE
			CONTINUE 17330 IF ERR = 155%
			FILENAME$ = "IC_TRANSACTION"
			CONTINUE HelpError
		END WHEN

 GetNextRec:
17020		!
		! Main loop starts here
		!
		GOTO ExitFunction IF UTL_REPORTX::STAT

		!
		! Get next record
		!
		WHEN ERROR IN
			GET #IC_TRANSACTION.CH%, REGARDLESS
		USE
			CONTINUE 17330 IF ERR = 11%
			FILENAME$ = "IC_TRANSACTION"
			CONTINUE HelpError
		END WHEN

		!
		! Check current record
		!
		SELECT SORT.BY$

		CASE "B"
			GOTO NextPeriod &
				IF (IC_TRANSACTION::BATCH > TO.ITEM$) AND &
				TO.ITEM$ <> ""

			GOTO GetNextRec IF WLDCRD$ <> "" AND &
				COMP_STRING(EDIT$(IC_TRANSACTION::BATCH, -1%), WLDCRD$) = 0%

		CASE "C"
			GOTO NextPeriod IF (IC_TRANSACTION::CROSS_REF > TO.ITEM$) AND &
				TO.ITEM$ <> ""

			GOTO GetNextRec IF WLDCRD$ <> "" AND &
				COMP_STRING(EDIT$(IC_TRANSACTION::CROSS_REF, -1%), WLDCRD$) = 0%

			GOTO GetNextRec IF WLDCRD$ <> "" AND &
				COMP_STRING(EDIT$(IC_TRANSACTION::POSTDATE, -1%), WLDCRD$) = 0%

		CASE "L"
			GOTO NextPeriod IF (IC_TRANSACTION::LOCATION > TO.ITEM$) AND &
				TO.ITEM$ <> ""

			GOTO GetNextRec IF WLDCRD$ <> "" AND &
				COMP_STRING(EDIT$(IC_TRANSACTION::LOCATION, -1%), WLDCRD$) = 0%

		CASE "P"
			GOTO NextPeriod IF (IC_TRANSACTION::PRODUCT > TO.ITEM$) AND &
				TO.ITEM$ <> ""

			GOTO GetNextRec IF WLDCRD$ <> "" AND &
				COMP_STRING(EDIT$(IC_TRANSACTION::PRODUCT, -1%), WLDCRD$) = 0%

		CASE "S"
			GOTO NextPeriod IF (IC_TRANSACTION::SUBACCOUNT > TO.ITEM$) AND &
				TO.ITEM$ <> ""

			GOTO GetNextRec IF WLDCRD$ <> "" AND &
				COMP_STRING(EDIT$(IC_TRANSACTION::SUBACCOUNT, -1%), WLDCRD$) = 0%

		END SELECT

		SELECT SCAN.BY$

		CASE "B"
			GOTO GetNextRec IF SCAN.WLDCRD$ <> "" AND &
				COMP_STRING(EDIT$(IC_TRANSACTION::BATCH,-1%), SCAN.WLDCRD$) = 0%

		CASE "C"
			GOTO GetNextRec IF SCAN.WLDCRD$ <> "" AND &
				COMP_STRING(EDIT$(IC_TRANSACTION::CROSS_REF,-1%), SCAN.WLDCRD$) = 0%

		CASE "L"
			GOTO GetNextRec IF SCAN.WLDCRD$ <> "" AND &
				COMP_STRING(EDIT$(IC_TRANSACTION::LOCATION,-1%), SCAN.WLDCRD$) = 0%

		CASE "P"
			GOTO GetNextRec IF SCAN.WLDCRD$ <> "" AND &
				COMP_STRING(EDIT$(IC_TRANSACTION::PRODUCT,-1%), SCAN.WLDCRD$) = 0%

		CASE "S"
			GOTO GetNextRec IF SCAN.WLDCRD$ <> "" AND &
				COMP_STRING(EDIT$(IC_TRANSACTION::SUBACCOUNT,-1%), SCAN.WLDCRD$) = 0%

		END SELECT

17200		PD_PRODUCT::DESCRIPTION = &
			STRING$(LEN(PD_PRODUCT::DESCRIPTION), ASCII("?"))

		WHEN ERROR IN
			GET #PD_PRODUCT.CH%, &
				KEY#0% EQ IC_TRANSACTION::PRODUCT, &
				REGARDLESS
		USE
			CONTINUE 17300 IF ERR = 155% OR ERR = 9%
			FILENAME$ = "PD_PRODUCT"
			CONTINUE HelpError
		END WHEN

		QTY(I%) = 0.0 FOR I% = 1% TO 3%

17300		WHEN ERROR IN
			GET #UTL_TRANSTYPE.CH%, &
				KEY #0% EQ IC_TRANSACTION::TYPE_A, REGARDLESS
		USE
			CONTINUE 17310 IF ERR = 155% OR ERR = 9%
			FILENAME$ = "UTL_TRANSTYPE"
			CONTINUE HelpError
		END WHEN
		I% = VAL%(UTL_TRANSTYPE::CLASS)
		QTY(I%) = IC_TRANSACTION::QUANTITY_A

17310		IF IC_TRANSACTION::TYPE_B <> ""
		THEN
			WHEN ERROR IN
				GET #UTL_TRANSTYPE.CH%, &
					KEY #0% EQ IC_TRANSACTION::TYPE_B, &
					REGARDLESS
			USE
				CONTINUE 17320 IF ERR = 155% OR ERR = 9%
				FILENAME$ = "UTL_TRANSTYPE"
				CONTINUE HelpError
			END WHEN

			I% = VAL%(UTL_TRANSTYPE::CLASS)
			QTY(I%) = QTY(I%) + IC_TRANSACTION::QUANTITY_B
		END IF

17320		TEXT_LIN$ = IC_TRANSACTION::PRODUCT + " " + &
			PD_PRODUCT::DESCRIPTION + " " + &
			IC_TRANSACTION::LOCATION + " " + &
			PRNT_DATE(IC_TRANSACTION::TRANS_DATE, 8%) + "  " + &
			FORMAT$(QTY(1%), "<%>######.###") + " " + &
			FORMAT$(QTY(2%), "<%>######.###") + " " + &
			FORMAT$(QTY(3%), "<%>######.###")

		SELECT SORT.BY$
		CASE "B"
			CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), " ", -1%) &
				IF TEST_PRINT$ <> IC_TRANSACTION::BATCH AND &
				TEST_PRINT$ <> ""
			TEST_PRINT$ = IC_TRANSACTION::BATCH

		CASE "C"
			CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), " ", -1%) &
				IF TEST_PRINT$ <> IC_TRANSACTION::CROSS_REF AND &
				TEST_PRINT$ <> ""
			TEST_PRINT$ = IC_TRANSACTION::CROSS_REF

		CASE "L"
			CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), " ", -1%) &
				IF TEST_PRINT$ <> IC_TRANSACTION::LOCATION AND &
				TEST_PRINT$ <> ""
			TEST_PRINT$ = IC_TRANSACTION::LOCATION

		CASE "P"
			CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), " ", -1%) &
				IF TEST_PRINT$ <> IC_TRANSACTION::PRODUCT AND &
				TEST_PRINT$ <> ""
			TEST_PRINT$ = IC_TRANSACTION::PRODUCT

		CASE "S"
			CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), " ", -1%) &
				IF TEST_PRINT$ <> IC_TRANSACTION::SUBACCOUNT AND &
				TEST_PRINT$ <> ""
			TEST_PRINT$ = IC_TRANSACTION::SUBACCOUNT

		END SELECT

		CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), TEXT_LIN$, 1%)

		TEXT$ = SPACE$(15%) + &
			PRNT_DATE(IC_TRANSACTION::POSTDATE, 8%) + " " + &
			IC_TRANSACTION::BATCH + " " + &
			IC_TRANSACTION::PRIMARY_REF + " " + &
			IC_TRANSACTION::CROSS_REF + " " + &
			IC_TRANSACTION::SUBACCOUNT + " " + &
			IC_TRANSACTION::LOT

		CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), TEXT$, 0%)

		GOTO GetNextRec

 NextPeriod:
17330	! Period loop
	NEXT LOOP%

 ExitFunction:

	CALL OUTP_FINISH(UTL_REPORTX)

	CLOSE IC_TRANSACTION.CH%
	CALL ASSG_FREECHANNEL(IC_TRANSACTION.CH%)

	CLOSE PD_PRODUCT.CH%
	CALL ASSG_FREECHANNEL(PD_PRODUCT.CH%)

	CLOSE UTL_TRANSTYPE.CH%
	CALL ASSG_FREECHANNEL(UTL_TRANSTYPE.CH%)

 Exit1:
	CLOSE UTL_REPORT.CH%
	CALL ASSG_FREECHANNEL(UTL_REPORT.CH%)

	SCOPE::PRG_PROGRAM = TEMP_PROGRAM$
	SCOPE::PRG_ITEM = TEMP_ITEM$
	SCOPE::PRG_IDENT = TEMP_IDENT$

	EXIT FUNCTION

	%PAGE

 HelpError:
	!******************************************************************
	! Help Message for an error
	!******************************************************************
	CALL HELP_34MESSAGE(SCOPE, NUM1$(ERL) + " " + ERT$(ERR), &
		"E", ERN$, FILENAME$, NUM1$(ERR))
	UTL_REPORTX::STAT = -1%
	GOTO ExitFunction

	%Page

19000	!******************************************************************
	! ERROR TRAPPING
	!******************************************************************

	!
	! Untrapped error
	!
	FILENAME$ = ""
	RESUME HelpError

32767	END FUNCTION
