1	%TITLE "Product Allocation"
	%SBTTL "IC_WRIT_ALLOCATE"
	%IDENT "V3.6a Calico"

	FUNCTION LONG IC_WRIT_ALLOCATE(PD_PRODUCT_CDD PD_PRODUCT, &
		STRING LOCATION, REAL DIFFQTY)

	!
	! COPYRIGHT (C) 1992 BY
	!
	! Computer Management Center, Inc.
	! Idaho Falls, Idaho.
	!
	! This software is furnished under a license and may be used and
	! copied only in accordance with terms of such license and with
	! the inclusion of the above copyright notice.  This software or
	! any other copies thereof may not be provided or otherwise made
	! available to any other person.  No title to and ownership of
	! the software is hereby transferred.
	!
	! The information in this software is subject to change without
	! notice and should not be construed as a commitment by
	! Computer Management Center, Inc.
	!
	! CMC assumes no responsibility for the use or reliability of
	! its software on equipment which is not supported by CMC.
	!
	!++
	!
	! Abstract:HELP
	!	.b
	!	.lm +5
	!	This program prints Inventory allocation report
	!	.lm -5
	!
	! Index:
	!
	! Option:
	!
	! Compile:
	!
	!	$ BAS IC_SOURCE:IC_WRIT_ALLOCATE/LINE
	!	$ LIB FUNC_LIB:CMCFUN/REP IC_WRIT_ALLOCATE
	!	$ DELETE IC_WRIT_ALLOCATE.OBJ;*
	!
	! Author:
	!
	!	10/13/93 - Frank F. Starman
	!
	! Modification History:
	!
	!	01/12/94 - Kevin Handy
	!		Clean up (check)
	!
	!	04/15/95 - Kevin Handy
	!		(V3.6)
	!		Update to V3.6 coding standards
	!
	!	07/25/96 - Kevin Handy
	!		Reformat source code.
	!		Change references from MO_REGHEADER to
	!		OE_REGHEADER.
	!
	!	05/09/97 - Kevin Handy
	!		Clean out some garbage variables
	!
	!	08/19/98 - Kevin Handy
	!		(V3.6a Calico)
	!		Update to V3.6a coding standards
	!
	!	11/28/2000 - Kevin Handy
	!		Use WHEN ERROR IN
	!--

	%PAGE

	OPTION SIZE = (INTEGER LONG, REAL GFLOAT)

	!
	! Include files
	!
	%INCLUDE "FUNC_INCLUDE:FUNCTION.HB"

	MAP (SCOPE) SCOPE_STRUCT SCOPE

	%INCLUDE "SOURCE:[UTL.OPEN]UTL_REPORTX.HB"
	DECLARE			UTL_REPORTX_CDD		UTL_REPORTX

	%INCLUDE "SOURCE:[UTL.OPEN]UTL_REPORT.HB"
	MAP (UTL_REPORT)	UTL_REPORT_CDD		UTL_REPORT

	%INCLUDE "SOURCE:[PD.OPEN]PD_PRODUCT.HB"

	%INCLUDE "SOURCE:[WP.OPEN]WP_REQREGISTER.HB"
	MAP (WP_REQREGISTER)	WP_REQREGISTER_CDD	WP_REQREGISTER
	DECLARE			WP_REQREGISTER_CDD	WP_REQREGISTER_TEST

	%INCLUDE "SOURCE:[OE.OPEN]OE_REGLINE.HB"
	MAP (OE_REGLINE)	OE_REGLINE_CDD		OE_REGLINE
	DECLARE			OE_REGLINE_CDD		OE_REGLINE_TEST

	%INCLUDE "SOURCE:[OE.OPEN]OE_REGHEADER.HB"
	DECLARE			OE_REGHEADER_CDD	OE_REGHEADER_READ

	%INCLUDE "SOURCE:[MO.OPEN]MO_REGLINE.HB"
	MAP (MO_REGLINE)	MO_REGLINE_CDD		MO_REGLINE
	DECLARE			MO_REGLINE_CDD		MO_REGLINE_TEST

	%INCLUDE "SOURCE:[MO.OPEN]MO_REGLINEOPT.HB"
	MAP (MO_REGLINEOPT)	MO_REGLINEOPT_CDD	MO_REGLINEOPT
	DECLARE			MO_REGLINEOPT_CDD	MO_REGLINEOPT_TEST

	%INCLUDE "SOURCE:[AR.OPEN]AR_35CUSTOM.HB"
	DECLARE			AR_35CUSTOM_CDD		AR_35CUSTOM_EXAM

	!
	! External functions
	!
	EXTERNAL LONG    FUNCTION OE_READ_REGHEADER
	EXTERNAL LONG    FUNCTION AR_EXAM_CUSTOM
	EXTERNAL LONG    FUNCTION IC_READ_35BALANCE

	COM (IC_WRIT_ALLOCATE) WP_REQREGISTER.CH%, &
		OE_REGLINE.CH%, &
		MO_REGLINE.CH%, &
		MO_REGLINEOPT.CH%

	%PAGE

	ON ERROR GOTO 19000

	TEMP_PROGRAM$ = SCOPE::PRG_PROGRAM
	TEMP_ITEM$ = SCOPE::PRG_ITEM
	TEMP_IDENT$ = SCOPE::PRG_IDENT

	SCOPE::PRG_PROGRAM = "IC_WRIT_ALLOCATE"
	SCOPE::PRG_ITEM = "HELP"
	SCOPE::PRG_IDENT = "H"

	IC_WRIT_ALLOCATE = 0%
	DIFFQTY = 0.0

	!
	! Open needed files
	!
600	IF WP_REQREGISTER.CH% <= 0%
	THEN
		WHEN ERROR IN
			%INCLUDE "SOURCE:[WP.OPEN]WP_REQREGISTER.OPN"
		USE
			CONTINUE 610 IF ERR = 5%
			FILENAME$ = "WP_REQREGISTER"
			CONTINUE HelpError
		END WHEN
	END IF

610	IF OE_REGLINE.CH% <= 0%
	THEN
		WHEN ERROR IN
			%INCLUDE "SOURCE:[OE.OPEN]OE_REGLINE.OPN"
		USE
			CONTINUE 620 IF ERR = 5%
			FILENAME$ = "OE_REGLINE"
			CONTINUE HelpError
		END WHEN
	END IF

620	IF MO_REGLINE.CH% <= 0%
	THEN
		WHEN ERROR IN
			%INCLUDE "SOURCE:[MO.OPEN]MO_REGLINE.OPN"
		USE
			CONTINUE 630 IF ERR = 5%
			FILENAME$ = "MO_REGLINE"
			CONTINUE HelpError
		END WHEN
	END IF

630	IF MO_REGLINEOPT.CH% <= 0%
	THEN
		WHEN ERROR IN
			%INCLUDE "SOURCE:[MO.OPEN]MO_REGLINEOPT.OPN"
		USE
			CONTINUE 640 IF ERR = 5%
			FILENAME$ = "MO_REGLINEOPT"
			CONTINUE HelpError
		END WHEN
	END IF

640	!

	%PAGE

17000	!******************************************************************
	! OUTPUT REPORT
	!******************************************************************

	WHEN ERROR IN
		FIND #WP_REQREGISTER.CH%, KEY #2% EQ PD_PRODUCT::PRODUCT_NUM + &
			LOCATION, REGARDLESS
	USE
		CONTINUE FindOERegline IF ERR = 155% OR ERR = 9%
		FILENAME$ = "WP_REQREGISTER"
		CONTINUE HelpError
	END WHEN

	WP_REQ_QTY, WP_ISS_QTY, WP_CAN_QTY = 0.0
	REQ_DATE$, ISS_DATE$ = "        "

 GetNextRec:
17020	WHEN ERROR IN
		GET #WP_REQREGISTER.CH%, REGARDLESS
	USE
		CONTINUE FindOERegline IF ERR = 11%
		FILENAME$ = "WP_REQREGISTER"
		CONTINUE HelpError
	END WHEN

	GOTO FindOERegline &
		IF WP_REQREGISTER::PRODUCT <> PD_PRODUCT::PRODUCT_NUM OR &
		WP_REQREGISTER::LOCATION <> LOCATION

	GOSUB PrintWPInfo IF WP_REQREGISTER::JOB <> WP_REQREGISTER_TEST::JOB OR &
		WP_REQREGISTER::LLINE <> WP_REQREGISTER_TEST::LLINE OR &
		WP_REQREGISTER::REQNUM <> WP_REQREGISTER_TEST::REQNUM OR &
		WP_REQREGISTER::REQLIN <> WP_REQREGISTER_TEST::REQLIN

	WP_REQREGISTER_TEST = WP_REQREGISTER

	SELECT WP_REQREGISTER::RECTYP

	CASE "01"
		REQ_QTY = REQ_QTY + WP_REQREGISTER::QTY

		REQ_DATE$ = WP_REQREGISTER::TRANDATE &
			IF WP_REQREGISTER::TRANDATE > REQ_DATE$

	CASE "02"
		ISS_QTY = ISS_QTY + WP_REQREGISTER::QTY

		ISS_DATE$ = WP_REQREGISTER::TRANDATE &
			IF WP_REQREGISTER::TRANDATE > ISS_DATE$

	CASE "03"
		CAN_QTY = CAN_QTY + WP_REQREGISTER::QTY

	END SELECT

	GOTO GetNextRec

 FindOERegline:
	GOSUB PrintWPInfo

	WP_BALANCE = WP_REQ_QTY - WP_ISS_QTY - WP_CAN_QTY

17100	WHEN ERROR IN
		FIND #OE_REGLINE.CH%, KEY #1% EQ PD_PRODUCT::PRODUCT_NUM, REGARDLESS
	USE
		CONTINUE FindMORegline IF ERR = 155% OR ERR = 9%
		FILENAME$ = "OE_REGLINE"
		CONTINUE HelpError
	END WHEN

	OE_ORD_QTY, OE_SHP_QTY, OE_CAN_QTY = 0.0
	SHP_DATE$ = "        "

 GetOERegline:
17120	WHEN ERROR IN
		GET #OE_REGLINE.CH%, REGARDLESS
	USE
		CONTINUE FindMORegline IF ERR = 11%
		FILENAME$ = "OE_REGLINE"
		CONTINUE HelpError
	END WHEN

	GOTO FindMORegline IF OE_REGLINE::PRODUCT <> PD_PRODUCT::PRODUCT_NUM

	GOSUB PrintOEInfo &
		IF OE_REGLINE::ORDNUM <> OE_REGLINE_TEST::ORDNUM OR &
		OE_REGLINE::LIN <> OE_REGLINE_TEST::LIN

	OE_REGLINE_TEST = OE_REGLINE

	SELECT OE_REGLINE::TRANTYPE

	CASE "01"
		ORD_QTY = ORD_QTY + OE_REGLINE::QTY

	CASE "02"
		SHP_QTY = SHP_QTY + OE_REGLINE::QTY

		SHP_DATE$ = OE_REGLINE::TDATE &
			IF OE_REGLINE::TDATE > SHP_DATE$

	CASE "03"
		CAN_QTY = CAN_QTY + OE_REGLINE::QTY

	END SELECT

	GOTO GetOERegline

 FindMORegline:
	GOSUB PrintOEInfo

	OE_BALANCE = OE_ORD_QTY - OE_SHP_QTY - OE_CAN_QTY

17200	WHEN ERROR IN
		FIND #MO_REGLINE.CH%, KEY #1% EQ PD_PRODUCT::PRODUCT_NUM, REGARDLESS
	USE
		CONTINUE FindMOReglineOPt IF ERR = 155% OR ERR = 9%
		FILENAME$ = "MO_REGLINE"
		CONTINUE HelpError
	END WHEN

	MO_ORD_QTY, MO_SHP_QTY, MO_CAN_QTY = 0.0

 GetMORegline:
17220	WHEN ERROR IN
		GET #MO_REGLINE.CH%, REGARDLESS
	USE
		CONTINUE FindMOReglineOPt IF ERR = 11%
		FILENAME$ = "MO_REGLINE"
		CONTINUE HelpError
	END WHEN

	GOTO FindMOReglineOpt IF MO_REGLINE::PRODUCT <> PD_PRODUCT::PRODUCT_NUM

	GOSUB PrintMOInfo IF MO_REGLINE::ORDNUM <> MO_REGLINE_TEST::ORDNUM OR &
		MO_REGLINE::LIN <> MO_REGLINE_TEST::LIN

	MO_REGLINE_TEST = MO_REGLINE

	SELECT MO_REGLINE::TRANTYPE

	CASE "01"
		ORD_QTY = ORD_QTY + MO_REGLINE::QTY

	CASE "02"
		SHP_QTY = SHP_QTY + MO_REGLINE::QTY

		SHP_DATE$ = MO_REGLINE::TDATE &
			IF MO_REGLINE::TDATE > SHP_DATE$

	CASE "03"
		CAN_QTY = CAN_QTY + MO_REGLINE::QTY

	END SELECT

	GOTO GetMORegline

 FindMOReglineOpt:
	GOSUB PrintMOInfo

17300	WHEN ERROR IN
		FIND #MO_REGLINEOPT.CH%, &
			KEY #3% EQ PD_PRODUCT::PRODUCT_NUM, &
			REGARDLESS
	USE
		CONTINUE ExitTotal IF ERR = 155% OR ERR = 9%
		FILENAME$ = "MO_REGLINEOPT"
		CONTINUE HelpError
	END WHEN

 GetMOReglineOpt:
17320	WHEN ERROR IN
		GET #MO_REGLINEOPT.CH%, REGARDLESS
	USE
		CONTINUE ExitTotal IF ERR = 11%
		FILENAME$ = "MO_REGLINEOPT"
		CONTINUE HelpError
	END WHEN

	GOTO ExitTotal IF MO_REGLINEOPT::PRODUCT <> PD_PRODUCT::PRODUCT_NUM

	GOSUB PrintMOOptInfo &
		IF MO_REGLINEOPT::ORDNUM <> MO_REGLINEOPT_TEST::ORDNUM OR &
		MO_REGLINEOPT::LIN <> MO_REGLINEOPT_TEST::LIN OR &
		MO_REGLINEOPT::OPTLIN <> MO_REGLINEOPT_TEST::OPTLIN

	MO_REGLINEOPT_TEST = MO_REGLINEOPT

	SELECT MO_REGLINEOPT::TRANTYPE

	CASE "01"
		ORD_QTY = ORD_QTY + MO_REGLINEOPT::QTY

	CASE "02"
		SHP_QTY = SHP_QTY + MO_REGLINEOPT::QTY

	CASE "03"
		CAN_QTY = CAN_QTY + MO_REGLINEOPT::QTY

	END SELECT

	GOTO GetMOReglineOpt

 PrintWPInfo:
	BALANCE = REQ_QTY - ISS_QTY - CAN_QTY

	GOTO ExitWP IF FUNC_ROUND(BALANCE, 3%) <= 0.0

	WP_REQ_QTY = WP_REQ_QTY + REQ_QTY
	WP_ISS_QTY = WP_ISS_QTY + ISS_QTY
	WP_CAN_QTY = WP_CAN_QTY + CAN_QTY

 ExitWP:
	REQ_QTY, ISS_QTY, CAN_QTY = 0.0
	REQ_DATE$, ISS_DATE$ = "        "

	RETURN

 PrintOEInfo:
	BALANCE = ORD_QTY - SHP_QTY - CAN_QTY

	GOTO ExitOE IF FUNC_ROUND(BALANCE, 3%) <= 0.0

	GOTO ExitOE IF OE_READ_REGHEADER(OE_REGLINE_TEST::ORDNUM, &
		OE_REGHEADER_READ) <> CMC$_NORMAL

	GOTO ExitOE IF OE_REGHEADER_READ::LOCATION <> LOCATION

	OE_ORD_QTY = OE_ORD_QTY + ORD_QTY
	OE_SHP_QTY = OE_SHP_QTY + SHP_QTY
	OE_CAN_QTY = OE_CAN_QTY + CAN_QTY

 ExitOE:
	ORD_QTY, SHP_QTY, CAN_QTY = 0.0
	SHP_DATE$ = "        "

	RETURN

 PrintMOInfo:
	BALANCE = ORD_QTY - SHP_QTY - CAN_QTY

	GOTO ExitMO IF FUNC_ROUND(BALANCE, 3%) <= 0.0

	GOTO ExitMO IF OE_READ_REGHEADER(MO_REGLINE_TEST::ORDNUM, &
		OE_REGHEADER_READ) <> CMC$_NORMAL

	GOTO ExitMO IF OE_REGHEADER_READ::LOCATION <> LOCATION

	MO_ORD_QTY = MO_ORD_QTY + ORD_QTY
	MO_SHP_QTY = MO_SHP_QTY + SHP_QTY
	MO_CAN_QTY = MO_CAN_QTY + CAN_QTY

 ExitMO:
	ORD_QTY, SHP_QTY, CAN_QTY = 0.0
	SHP_DATE$ = "        "

	RETURN

 PrintMOOptInfo:
	BALANCE = ORD_QTY - SHP_QTY - CAN_QTY

	GOTO ExitMO IF FUNC_ROUND(BALANCE, 3%) <= 0.0

	GOTO ExitMO IF OE_READ_REGHEADER(MO_REGLINEOPT_TEST::ORDNUM, &
		OE_REGHEADER_READ) <> CMC$_NORMAL

	GOTO ExitMO IF OE_REGHEADER_READ::LOCATION <> LOCATION

	V% = AR_EXAM_CUSTOM(OE_REGHEADER_READ::CUSNUM, AR_35CUSTOM_EXAM)

	MO_ORD_QTY = MO_ORD_QTY + ORD_QTY
	MO_SHP_QTY = MO_SHP_QTY + SHP_QTY
	MO_CAN_QTY = MO_CAN_QTY + CAN_QTY

 ExitMOOpt:
	ORD_QTY, SHP_QTY, CAN_QTY = 0.0

	RETURN

 ExitTotal:
	GOSUB PrintMOOptInfo

	MO_BALANCE = MO_ORD_QTY - MO_SHP_QTY - MO_CAN_QTY

	TOTAL_ORD_QTY = WP_REQ_QTY + OE_ORD_QTY + MO_ORD_QTY
	TOTAL_REC_QTY = WP_ISS_QTY + OE_SHP_QTY + MO_SHP_QTY
	TOTAL_CAN_QTY = WP_CAN_QTY + OE_CAN_QTY + MO_CAN_QTY

	TOTAL_BALANCE = TOTAL_ORD_QTY - TOTAL_REC_QTY - TOTAL_CAN_QTY

	V% = IC_READ_35BALANCE(PD_PRODUCT::PRODUCT_NUM, &
		LOCATION, BALANCE(,))

	ALLOC = -FUNC_ROUND(BALANCE(2%, 1%) + BALANCE(2%, 2%), 3%)

	DIFFQTY = FUNC_ROUND(ALLOC - TOTAL_BALANCE, 3%)

 ExitFunction:

	SCOPE::PRG_PROGRAM = TEMP_PROGRAM$
	SCOPE::PRG_ITEM = TEMP_ITEM$
	SCOPE::PRG_IDENT = TEMP_IDENT$

	EXIT FUNCTION

	%PAGE

 HelpError:
	!******************************************************************
	! Help Message for an error
	!******************************************************************
	CALL HELP_34MESSAGE(SCOPE, NUM1$(ERL) + " " + ERT$(ERR), &
		"E", ERN$, FILENAME$, NUM1$(ERR))

	UTL_REPORTX::STAT = -1%
	GOTO ExitFunction

19000	!******************************************************************
	! ERROR TRAPPING
	!******************************************************************

	!
	! Untrapped error
	!
	FILENAME$ = ""
	RESUME HelpError

32767	END FUNCTION
