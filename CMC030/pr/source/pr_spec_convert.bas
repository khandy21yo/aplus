1	%TITLE "Payroll Conversion"
	%SBTTL "PR_SPEC_CONVERT"
	%IDENT "V3.6a Calico"

	!
	! COPYRIGHT (C) 1986, 1988 BY
	!
	! Computer Management Center, Inc.
	! Idaho Falls, Idaho.
	!
	! This software is furnished under a license and may be used and
	! copied only in accordance with terms of such license and with
	! the inclusion of the above copyright notice.  This software or
	! any other copies thereof may not be provided or otherwise made
	! available to any other person.  No title to and ownership of
	! the software is hereby transferred.
	!
	! The information in this software is subject to change without
	! notice and should not be construed as a commitment by
	! Computer Management Center, Inc.
	!
	! CMC assumes no responsibility for the use or reliability of
	! its software on equipment which is not supported by CMC.
	!
	!++
	! Abstract:HELP
	!	.p
	!	This program converts ascii file to employee master file
	!
	! Index:
	!
	! Option:
	!
	! Compile:
	!
	!	$ BAS PR_SOURCE:PR_SPEC_CONVERT/LINE
	!	$ LINK/EXECUTABLE=PR_EXE: PR_SPEC_CONVERT, FUNC_LIB:CMCLINK/OPTION
	!	$ DELETE PR_SPEC_CONVERT.OBJ;*
	!
	! Author:
	!
	!	11/27/87 - Robert Peterson
	!
	! Modification history:
	!
	!	06/27/89 - Kevin Handy
	!		Modified to use READ_INITIALIZE.
	!
	!	12/13/90 - Kevin Handy
	!		Added Addition Exemption field &
	!		"PR_EMP_STATUS::ADDEXEMPT"
	!
	!	06/30/92 - Kevin Handy
	!		Updated for current file layouts.
	!
	!	04/15/95 - Kevin Handy
	!		(V3.6)
	!		Update to V3.6 coding standards
	!
	!	10/25/96 - Kevin Handy
	!		Clean up (Check)
	!
	!	05/15/97 - Kevin Handy
	!		Reformat source code
	!
	!	06/17/98 - Kevin Handy
	!		Modified to fill in additional fields and
	!		blank out null dates. Get default from
	!		location from profile.
	!		Put the proper dashes in a SSN if missing.
	!
	!	08/21/98 - Kevin Handy
	!		(V3.6a Calico)
	!		Update to V3.6a coding standards
	!
	!	12/08/98 - Kevin Handy
	!		Set up PR_ERNDED_DEF::W2LOCATION
	!
	!	03/26/99 - Kevin Handy
	!		Upgrade the fillin for several fields.
	!
	!	09/18/2000 - Kevin Handy
	!		Use LIB$DELETE_FILE instead of KILL
	!		Note that many of the names are wrong in the kill's
	!		Use WHEN ERROR IN
	!--
	%PAGE

	OPTION SIZE = (INTEGER LONG, REAL GFLOAT)

	!
	! Include files
	!
	%INCLUDE "LIB$ROUTINES" %FROM %LIBRARY "SYS$LIBRARY:BASIC$STARLET.TLB"
	%INCLUDE "FUNC_INCLUDE:FUNCTION.HB"

	MAP (SCOPE) SCOPE_STRUCT SCOPE

	%INCLUDE "SOURCE:[PR.OPEN]PR_EMP_MASTER.HB"
	MAP	(PR_EMP_MASTER)		PR_EMP_MASTER_CDD	PR_EMP_MASTER

	%INCLUDE "SOURCE:[PR.OPEN]PR_EMP_STATUS.HB"
	MAP	(PR_EMP_STATUS)		PR_EMP_STATUS_CDD	PR_EMP_STATUS

	%INCLUDE "SOURCE:[PR.OPEN]PR_EMP_RATE.HB"
	MAP	(PR_EMP_RATE)		PR_EMP_RATE_CDD		PR_EMP_RATE

	%INCLUDE "SOURCE:[PR.OPEN]PR_EMP_STD_ERNDED.HB"
	MAP (PR_EMP_STD_ERNDED)	PR_EMP_STD_ERNDED_CDD	PR_EMP_STD_ERNDED

	%INCLUDE "SOURCE:[PR.OPEN]PR_ERNDED_DEF.HB"
	MAP	(PR_ERNDED_DEF)		PR_ERNDED_DEF_CDD	PR_ERNDED_DEF

	%INCLUDE "SOURCE:[PR.OPEN]PR_REG_TAXES.HB"
	MAP	(PR_REG_TAXES)		PR_REG_TAXES_CDD	PR_REG_TAXES

	%INCLUDE "SOURCE:[PR.OPEN]PR_REG_ERNDED.HB"
	MAP	(PR_REG_ERNDED)		PR_REG_ERNDED_CDD	PR_REG_ERNDED

	%INCLUDE "SOURCE:[UTL.OPEN]UTL_PROFILE.HB"
	MAP	(UTL_PROFILE)		UTL_PROFILE_CDD		UTL_PROFILE

	EXTERNAL STRING  FUNCTION FIND_STRING

10	ON ERROR GOTO 19000

	CALL ASSG_CHANNEL(PRSYS.CH%, STAT%)

	!
	! Open the keyboard
	!
	CALL READ_INITIALIZE

100	!
	! Open UTL_DEVICE file and read information
	!
	CALL READ_DEVICE("PRSYS.ASC",PRSYS_ASC.DEV$, STAT%)

200	! RESUME LINE

250	WHEN ERROR IN
		OPEN PRSYS_ASC.DEV$ + "PRSYS.ASC" FOR INPUT AS FILE PRSYS.CH%, &
			RECORDSIZE 512%, &
			ACCESS READ
	USE
		CALL ENTR_3MESSAGE(SCOPE, "PRSYS.ASC file is missingERROR " + &
			NUM1$(ERR), 0%)
		CONTINUE ExitProgram
	END WHEN

300	!
	! Grab the profile if possible
	!
	WHEN ERROR IN
		%INCLUDE "SOURCE:[UTL.OPEN]UTL_PROFILE.OPN"
		GET #UTL_PROFILE.CH%, RECORD 1%, REGARDLESS
	USE
		UTL_PROFILE::DEFLOCATION = ""
		CONTINUE 310
	END WHEN

310	!~

550	WHEN ERROR IN
		INPUT LINE #PRSYS.CH%, INP$
	USE
		CONTINUE 560 IF STRG$ <> ""
		CONTINUE 600
	END WHEN

	IF INSTR(1%, INP$, "<ENDFILE>") = 0% AND &
		INSTR(1%, INP$, "<STARTFILE>") = 0%
	THEN
		IF INSTR(1%, INP$, "<>") = 0%
		THEN
			STRG$ = STRG$ + "<" + EDIT$(INP$, 4%) + ">"
			GOTO 550
		ELSE
			STRG$ = STRG$ + INP$
		END IF
	END IF

	STRG$ = STRG$ + INP$

560	TEMP$ = "<STARTFILE>"

	GOTO 580 IF INSTR(1%, STRG$, TEMP$) = 0%

	ON_LOOP% = 0%
	ON_LOOP% = 1% IF INSTR(1% + LEN(TEMP$), STRG$, "MSTRFL")
	ON_LOOP% = 2% IF INSTR(1% + LEN(TEMP$), STRG$, "STATUS")
	ON_LOOP% = 3% IF INSTR(1% + LEN(TEMP$), STRG$, "RATE")
	ON_LOOP% = 4% IF INSTR(1% + LEN(TEMP$), STRG$, "STD_ERNDED")
	ON_LOOP% = 5% IF INSTR(1% + LEN(TEMP$), STRG$, "ERNDED_DEF")
	ON_LOOP% = 6% IF INSTR(1% + LEN(TEMP$), STRG$, "ERNDED_19")
	ON_LOOP% = 7% IF INSTR(1% + LEN(TEMP$), STRG$, "TAXWH_19")

	IF INSTR(1% + LEN(TEMP$), STRG$, "TAXWH_19") OR &
		INSTR(1% + LEN(TEMP$), STRG$, "ERNDED_19")
	THEN
		YYYY$ = MID(STRG$, INSTR(1%, STRG$, "_19") + 1%, 4%)
	END IF

	IF ON_LOOP% = 0%
	THEN
		PRINT STRG$
		STOP
	END IF

	ON ON_LOOP% GOSUB 1000, 2000, 3000, 4000, 5000, 6000, 7000

	STRG$ = ""
	GOTO 550

580	TEMP$ = "<ENDFILE>"

	IF INSTR(1%, STRG$, TEMP$)
	THEN

		ON ON_LOOP% GOSUB 1200, 2200, 3200, 4200, 5200, 6200, 7200

		STRG$ = ""
		GOTO 550
	END IF

	ON ON_LOOP% GOSUB 1100, 2100, 3100, 4100, 5100, 6100, 7100

	STRG$ = ""

	GOTO 550

600	GOTO ExitProgram

1000	!
	! MASTER file does not exist, so create it
	!
	!======================================================================
	CALL ENTR_3MESSAGE(SCOPE, "Creating new  MASTER file", 1%)

 !	KILL PR_EMP_MASTER.DEV$ + "PR_EMP_MASTER.MAS"

	SMG_STATUS% = LIB$DELETE_FILE(PR_EMP_MASTER.DEV$ + "PR_EMP_MASTER.MAS;*")

1050	%INCLUDE "SOURCE:[PR.OPEN]PR_EMP_MASTER.CRE"

1090	! Convert the PR_EMP_MASTER
	RETURN

1100	!
	! Create new record
	!
	PR_EMP_MASTER::EMPNUM	= FIND_STRING(STRG$, "EMPNUM")
	PR_EMP_MASTER::EMPNAME	= FIND_STRING(STRG$, "EMPNAM")
	PR_EMP_MASTER::ADD1	= FIND_STRING(STRG$, "ADD1")
	PR_EMP_MASTER::ADD2	= FIND_STRING(STRG$, "ADD2")

	TEST$ = FIND_STRING(STRG$, "CITY")
	IF RIGHT(TEST$, LEN(TEST$)) = ","
	THEN
		TEST$ = LEFT(TEST$, LEN(TEST$) - 1%)
	END IF
	PR_EMP_MASTER::CITY	= TEST$

	PR_EMP_MASTER::STATE	= FIND_STRING(STRG$, "STATE")
	PR_EMP_MASTER::ZIP	= FIND_STRING(STRG$, "ZIP")
	PR_EMP_MASTER::COUNTRY	= FIND_STRING(STRG$, "COUNTRY")
	PR_EMP_MASTER::PHONE	= FIND_STRING(STRG$, "PHONE")

	PR_EMP_MASTER::SSN	= FIND_STRING(STRG$, "SSN")
	IF (LEN(TRM$(PR_EMP_MASTER::SSN)) = 9%) AND &
		(INSTR(1%, PR_EMP_MASTER::SSN, "-") = 0%)
	THEN
		PR_EMP_MASTER::SSN = LEFT(PR_EMP_MASTER::SSN, 3%) + "-" + &
			MID(PR_EMP_MASTER::SSN, 4%, 2%) + "-" + &
			RIGHT(PR_EMP_MASTER::SSN, 6%)
	END IF

	PR_EMP_MASTER::SORT	= FIND_STRING(STRG$, "SORT")
	PR_EMP_MASTER::SUBACC	= FIND_STRING(STRG$, "SUBACC")
	PR_EMP_MASTER::ACCT	= FIND_STRING(STRG$, "ACCT")
	PR_EMP_MASTER::TRADE	= FIND_STRING(STRG$, "TRADE")
	PR_EMP_MASTER::OPER	= FIND_STRING(STRG$, "OPER")
	PR_EMP_MASTER::UNION	= FIND_STRING(STRG$, "UNION")

	PR_EMP_MASTER::LOCATION	= FIND_STRING(STRG$, "LOCATION")
	PR_EMP_MASTER::LOCATION	= UTL_PROFILE::DEFLOCATION &
		IF PR_EMP_MASTER::LOCATION = ""

	PR_EMP_MASTER::DEPT	= FIND_STRING(STRG$, "DEPT")
	PR_EMP_MASTER::WORK_CENTER= FIND_STRING(STRG$, "WORK_CENTER")
	PR_EMP_MASTER::EMP_SKILL= FIND_STRING(STRG$, "EMP_CLASS")
	PR_EMP_MASTER::EMP_GRADE= FIND_STRING(STRG$, "EMP_TYPE")
	PR_EMP_MASTER::DISABLED	= FIND_STRING(STRG$, "DISABLED")
	PR_EMP_MASTER::PAYFREQ	= VAL(FIND_STRING(STRG$, "PAYFREQ"))

	PR_EMP_MASTER::SUI_SW	= FIND_STRING(STRG$, "SUI_SW")
	PR_EMP_MASTER::SUI_SW = PR_EMP_MASTER::STATE &
		IF PR_EMP_MASTER::SUI_SW = ""

	PR_EMP_MASTER::TAX_PKG	= FIND_STRING(STRG$, "TAX_PKG")
	PR_EMP_MASTER::TAX_PKG	= PR_EMP_MASTER::STATE &
		IF PR_EMP_MASTER::TAX_PKG = ""

	PR_EMP_MASTER::W2_1099	= FIND_STRING(STRG$, "W2_1099")

	TEST$ = FIND_STRING(STRG$, "BIRTH")
	TEST$ = "" IF TEST$ <= "00000000"
	PR_EMP_MASTER::BIRTH	= TEST$

	TEST$ = FIND_STRING(STRG$, "HIREDAY")
	TEST$ = "" IF TEST$ <= "00000000"
	PR_EMP_MASTER::HIREDAY	= TEST$

	TEST$ = FIND_STRING(STRG$, "TERMDAY")
	TEST$ = "" IF TEST$ <= "00000000"
	PR_EMP_MASTER::TERMDAY	= TEST$

	PR_EMP_MASTER::SEX	= FIND_STRING(STRG$, "SEX")
	PR_EMP_MASTER::RACE	= FIND_STRING(STRG$, "RACE")
	PR_EMP_MASTER::USCIT	= FIND_STRING(STRG$, "USCIT")
	PR_EMP_MASTER::WRKPERMIT= FIND_STRING(STRG$, "WRKPERMIT")
	PR_EMP_MASTER::HOMCNTRY	= FIND_STRING(STRG$, "HOMCNTRY")
	PR_EMP_MASTER::ACTIVE_FLAG = "Y"
	PR_EMP_MASTER::RATE_TYPE= FIND_STRING(STRG$, "RATE_TYPE")
	PR_EMP_MASTER::RATE_CDE	= FIND_STRING(STRG$, "RATE_CODE")
	PR_EMP_MASTER::WC	= ""
	PR_EMP_MASTER::REHIRE_FLAG = "Y"

	PUT	#PR_EMP_MASTER.CH%

	RETURN

1200	CLOSE #PR_EMP_MASTER.CH%
	RETURN

2000	!
	! PR_EMP_STATUS file does not exist, so create it
	!
	!======================================================================
	CALL ENTR_3MESSAGE(SCOPE, "Creating new  PR_EMP_STATUS file", 1%)

 !	KILL PR_EMP_STATUS.DEV$ + "PR_EMP_STATUS.MAS"

	SMG_STATUS% = LIB$DELETE_FILE(PR_EMP_STATUS.DEV$ + "PR_EMP_STATUS.MAS;*")

2050	%INCLUDE "SOURCE:[PR.OPEN]PR_EMP_STATUS.CRE"

2090	! Convert the PR_EMP_STATUS
	RETURN

2100	!
	! Create new record
	!
	PR_EMP_STATUS::EMPNUM	= FIND_STRING(STRG$, "EMPNUM")
	PR_EMP_STATUS::STTYPE	= FIND_STRING(STRG$, "STTYPE")
	PR_EMP_STATUS::CODE	= FIND_STRING(STRG$, "CODE")
	PR_EMP_STATUS::STSTATUS	= FIND_STRING(STRG$, "STSTATUS")
	PR_EMP_STATUS::EXEMPT	= VAL(FIND_STRING(STRG$, "EXEMPT"))
	PR_EMP_STATUS::ADDEXEMPT= VAL(FIND_STRING(STRG$, "ADDEXE"))

	PUT	#PR_EMP_STATUS.CH%

	RETURN

2200	CLOSE #PR_EMP_STATUS.CH%
	RETURN

3000	!
	! PR_EMP_RATE file does not exist, so create it
	!
	!======================================================================
	CALL ENTR_3MESSAGE(SCOPE, "Creating new  PR_EMP_RATE file", 1%)

 !	KILL PR_EMP_RATE.DEV$ + "PR_EMP_RATE.MAS"

	SMG_STATUS% = LIB$DELETE_FILE(PR_EMP_RATE.DEV$ + "PR_EMP_RATE.MAS;*")

3050	%INCLUDE "SOURCE:[PR.OPEN]PR_EMP_RATE.CRE"

3090	! Convert the PR_EMP_RATE
	RETURN

3100	!
	! Create new record
	!
	PR_EMP_RATE::EMPNUM	= FIND_STRING(STRG$, "EMPNUM")
	PR_EMP_RATE::OPER	= FIND_STRING(STRG$, "OPER")
	PR_EMP_RATE::EFFDAT	= FIND_STRING(STRG$, "EFFDAT")
	PR_EMP_RATE::RATE_TYPE	= FIND_STRING(STRG$, "RATE_TYPE")
	PR_EMP_RATE::RATE_CDE	= FIND_STRING(STRG$, "RATE_CDE")
	PR_EMP_RATE::HOUR_RATE	= VAL(FIND_STRING(STRG$, "HOUR_RATE"))
	PR_EMP_RATE::PIECE_RATE	= VAL(FIND_STRING(STRG$, "PIECE_RATE"))
	PR_EMP_RATE::FACTOR	= VAL(FIND_STRING(STRG$, "FACTOR"))
	PR_EMP_RATE::STDEFF	= VAL(FIND_STRING(STRG$, "STDEFF"))
	PR_EMP_RATE::EVAL_DATE	= "00000000"

	PUT	#PR_EMP_RATE.CH%

	RETURN

3200	CLOSE #PR_EMP_RATE.CH%
	RETURN

4000	!
	! PR_EMP_STD_ERNDED file does not exist, so create it
	!
	!======================================================================
	CALL ENTR_3MESSAGE(SCOPE, "Creating new  PR_EMP_STD_ERNDED file", 1%)

 !	KILL PR_EMP_STD_ERNDED.DEV$ + "PR_EMP_STD_ERNDED"

	SMG_STATUS% = LIB$DELETE_FILE(PR_EMP_STD_ERNDED.DEV$ + &
		"PR_EMP_STD_ERNDED.MAS;*")

4050	%INCLUDE "SOURCE:[PR.OPEN]PR_EMP_STD_ERNDED.CRE"

4090	! Convert the PR_EMP_STD_ERNDED
	RETURN

4100	!
	! Create new record
	!
	PR_EMP_STD_ERNDED::EMPNUM	= FIND_STRING(STRG$, "EMPNUM")
	PR_EMP_STD_ERNDED::RTYPE	= FIND_STRING(STRG$, "RTYPE")
	PR_EMP_STD_ERNDED::CODE		= FIND_STRING(STRG$, "CODE")
	PR_EMP_STD_ERNDED::RATE		= VAL(FIND_STRING(STRG$, "RATE"))
	PR_EMP_STD_ERNDED::LIMIT	= VAL(FIND_STRING(STRG$, "LIMIT"))
	PR_EMP_STD_ERNDED::CTDBAL	= VAL(FIND_STRING(STRG$, "CTDBAL"))
	PR_EMP_STD_ERNDED::ACCRUED	= VAL(FIND_STRING(STRG$, "ACCRUED"))
	PR_EMP_STD_ERNDED::ENDDAT	= FIND_STRING(STRG$, "ENDDAT")
	PR_EMP_STD_ERNDED::FREQ		= FIND_STRING(STRG$, "FREQ")
	PR_EMP_STD_ERNDED::METHOD	= FIND_STRING(STRG$, "METHOD")
	PR_EMP_STD_ERNDED::USERDEF	= FIND_STRING(STRG$, "USERDEF")

	PUT	#PR_EMP_STD_ERNDED.CH%

	RETURN

4200	CLOSE PR_EMP_STD_ERNDED.CH%
	RETURN

5000	!
	! PR_ERNDED_DEF file does not exist, so create it
	!
	!======================================================================
	CALL ENTR_3MESSAGE(SCOPE, "Creating new  PR_ERNDED_DEF file", 1%)

 !	KILL PR_ERNDED_DEF.DEV$ + "PR_ERNDED_DEF"

	SMG_STATUS% = LIB$DELETE_FILE(PR_ERNDED_DEF.DEV$ + "PR_ERNDED_DEF.MAS;*")

5050	%INCLUDE "SOURCE:[PR.OPEN]PR_ERNDED_DEF.CRE"

5090	! Convert the PR_ERNDED_DEF
	RETURN

5100	!
	! Create new record
	!
	PR_ERNDED_DEF::ETYPE	= FIND_STRING(STRG$, "ETYPE")
	PR_ERNDED_DEF::CODE	= FIND_STRING(STRG$, "CODE")
	PR_ERNDED_DEF::DESCR	= FIND_STRING(STRG$, "DESCR")
	PR_ERNDED_DEF::DRCR_ACCT= FIND_STRING(STRG$, "DRCR_ACCT")
	PR_ERNDED_DEF::ACCRUAL_ACCT= FIND_STRING(STRG$, "ACCRUAL_ACCT")
	PR_ERNDED_DEF::SUMMARY	= FIND_STRING(STRG$, "SUMMARY")
	PR_ERNDED_DEF::TAXABLE_FWH	= FIND_STRING(STRG$, "T_FWH")
	PR_ERNDED_DEF::TAXABLE_FIE	= FIND_STRING(STRG$, "T_FIE")
	PR_ERNDED_DEF::TAXABLE_FIR	= FIND_STRING(STRG$, "T_FIR")
	PR_ERNDED_DEF::TAXABLE_FUI	= FIND_STRING(STRG$, "T_FUI")
	PR_ERNDED_DEF::TAXABLE_SWH	= FIND_STRING(STRG$, "T_SWH")
	PR_ERNDED_DEF::TAXABLE_SUI	= FIND_STRING(STRG$, "T_SUI")
	PR_ERNDED_DEF::TAXABLE_OST	= FIND_STRING(STRG$, "T_OST")
	PR_ERNDED_DEF::TAXABLE_CWH	= FIND_STRING(STRG$, "T_CWH")
	PR_ERNDED_DEF::TAXABLE_DWH	= FIND_STRING(STRG$, "T_DWH")
	PR_ERNDED_DEF::TAXABLE_EWH	= FIND_STRING(STRG$, "T_EWH")

	PR_ERNDED_DEF::REPORTABLE_FWH	= FIND_STRING(STRG$, "R_FWH")
	PR_ERNDED_DEF::REPORTABLE_FIE	= FIND_STRING(STRG$, "R_FIE")
	PR_ERNDED_DEF::REPORTABLE_FIR	= FIND_STRING(STRG$, "R_FIR")
	PR_ERNDED_DEF::REPORTABLE_FUI	= FIND_STRING(STRG$, "R_FUI")
	PR_ERNDED_DEF::REPORTABLE_SWH	= FIND_STRING(STRG$, "R_SWH")
	PR_ERNDED_DEF::REPORTABLE_SUI	= FIND_STRING(STRG$, "R_SUI")
	PR_ERNDED_DEF::REPORTABLE_OST	= FIND_STRING(STRG$, "R_OST")
	PR_ERNDED_DEF::REPORTABLE_CWH	= FIND_STRING(STRG$, "R_CWH")
	PR_ERNDED_DEF::REPORTABLE_DWH	= FIND_STRING(STRG$, "R_DWH")
	PR_ERNDED_DEF::REPORTABLE_EWH	= FIND_STRING(STRG$, "R_EWH")
	PR_ERNDED_DEF::SUBJ_WC		= "Y"
	PR_ERNDED_DEF::W2LOCATION	= ""

	PUT	#PR_ERNDED_DEF.CH%

	RETURN

5200	CLOSE #PR_ERNDED_DEF.CH%
	RETURN

6000	!
	! PR_REG_ERNDED file does not exist, so create it
	!
	!======================================================================
	CALL ENTR_3MESSAGE(SCOPE, "Creating new  PR_REG_ERNDED file", 1%)

 !	KILL PR_REG_ERNDED.DEV$ + "PR_REG_ERNDED.LED"

	SMG_STATUS% = LIB$DELETE_FILE(PR_REG_ERNDED.DEV$ + "PR_REG_ERNDED.LED;*")

6050	%INCLUDE "SOURCE:[PR.OPEN]PR_REG_ERNDED.CRE"

6090	! Convert the PR_REG_ERNDED
	RETURN

6100	!
	! Create new record
	!
	PR_REG_ERNDED::EMPNUM	= FIND_STRING(STRG$, "EMPNUM")
	PR_REG_ERNDED::ETYPE	= FIND_STRING(STRG$, "ETYPE")
	PR_REG_ERNDED::CODE	= FIND_STRING(STRG$, "CODE")

	PR_REG_ERNDED::QTR_DOLL(0%)= VAL(FIND_STRING(STRG$, "QTY_DOLL_1"))
	PR_REG_ERNDED::QTR_DOLL(1%)= VAL(FIND_STRING(STRG$, "QTY_DOLL_2"))
	PR_REG_ERNDED::QTR_DOLL(2%)= VAL(FIND_STRING(STRG$, "QTY_DOLL_3"))
	PR_REG_ERNDED::QTR_DOLL(3%)= VAL(FIND_STRING(STRG$, "QTY_DOLL_4"))

	PR_REG_ERNDED::REG_HRS(0%)= VAL(FIND_STRING(STRG$, "QTY_REG_HRS_1"))
	PR_REG_ERNDED::REG_HRS(1%)= VAL(FIND_STRING(STRG$, "QTY_REG_HRS_2"))
	PR_REG_ERNDED::REG_HRS(2%)= VAL(FIND_STRING(STRG$, "QTY_REG_HRS_3"))
	PR_REG_ERNDED::REG_HRS(3%)= VAL(FIND_STRING(STRG$, "QTY_REG_HRS_4"))

	PR_REG_ERNDED::PRE_HRS(0%)= VAL(FIND_STRING(STRG$, "QTY_PRE_HRS_1"))
	PR_REG_ERNDED::PRE_HRS(1%)= VAL(FIND_STRING(STRG$, "QTY_PRE_HRS_2"))
	PR_REG_ERNDED::PRE_HRS(2%)= VAL(FIND_STRING(STRG$, "QTY_PRE_HRS_3"))
	PR_REG_ERNDED::PRE_HRS(3%)= VAL(FIND_STRING(STRG$, "QTY_PRE_HRS_4"))

	PR_REG_ERNDED::UNITS(0%)= VAL(FIND_STRING(STRG$, "QTY_UNITS_1"))
	PR_REG_ERNDED::UNITS(1%)= VAL(FIND_STRING(STRG$, "QTY_UNITS_2"))
	PR_REG_ERNDED::UNITS(2%)= VAL(FIND_STRING(STRG$, "QTY_UNITS_3"))
	PR_REG_ERNDED::UNITS(3%)= VAL(FIND_STRING(STRG$, "QTY_UNITS_4"))

	PR_REG_ERNDED::UPDATE_COUNTER = 0%

	PUT	#PR_REG_ERNDED.CH%

	RETURN

6200	CLOSE #PR_REG_ERNDED.CH%
	RETURN

7000	!
	! PR_REG_TAXES file does not exist, so create it
	!
	!======================================================================
	CALL ENTR_3MESSAGE(SCOPE, "Creating new  PR_REG_TAXES file", 1%)

 !	KILL PR_REG_TAXES.DEV$ + "PR_REG_TAXES"

	SMG_STATUS% = LIB$DELETE_FILE(PR_REG_TAXES.DEV$ + "PR_REG_TAXES.LED;*")

7050	%INCLUDE "SOURCE:[PR.OPEN]PR_REG_TAXES.CRE"

7090	! Convert the PR_REG_TAXES
	RETURN

7100	!
	! Create new record
	!
	PR_REG_TAXES::EMPNUM	= FIND_STRING(STRG$, "EMPNUM")
	PR_REG_TAXES::TTYPE	= FIND_STRING(STRG$, "TTYPE")
	PR_REG_TAXES::CODE	= FIND_STRING(STRG$, "CODE")

	PR_REG_TAXES::TAX(0%)	= VAL(FIND_STRING(STRG$, "QTRTAX1"))
	PR_REG_TAXES::TAX(1%)	= VAL(FIND_STRING(STRG$, "QTRTAX2"))
	PR_REG_TAXES::TAX(2%)	= VAL(FIND_STRING(STRG$, "QTRTAX3"))
	PR_REG_TAXES::TAX(3%)	= VAL(FIND_STRING(STRG$, "QTRTAX4"))

	PR_REG_TAXES::WKWRK(0%)		= VAL(FIND_STRING(STRG$, "WKWRK1"))
	PR_REG_TAXES::WKWRK(1%)		= VAL(FIND_STRING(STRG$, "WKWRK2"))
	PR_REG_TAXES::WKWRK(2%)		= VAL(FIND_STRING(STRG$, "WKWRK3"))
	PR_REG_TAXES::WKWRK(3%)		= VAL(FIND_STRING(STRG$, "WKWRK4"))

	PR_REG_TAXES::UPDATE_COUNTER	= 0%

	PUT	#PR_REG_TAXES.CH%

	RETURN

7200	CLOSE #PR_REG_TAXES.CH%
	RETURN

 ExitProgram:
15000	!*******************************************************************
	! Exit program
	!*******************************************************************

	CALL SUBR_3EXITPROGRAM(SCOPE, "", "")

	%PAGE

 HelpError:
	!******************************************************************
	! Help Message for an error
	!******************************************************************
	CALL HELP_34MESSAGE(SCOPE, NUM1$(ERL) + " " + ERT$(ERR), &
		"E", ERN$, FILENAME$, NUM1$(ERR))
	GOTO ExitProgram

	%Page

19000	!*******************************************************************
	! Error trapping
	!*******************************************************************

	!===================================================================
	! Error NUMBER(ERR) cases
	!===================================================================
	SELECT ERR

	CASE 134%, 153%	! Dup key detected, record already exists
		IF ERL > 1000%
		THEN
			CALL ENTR_3MESSAGE(SCOPE, "DUPLICATE KEY/RECORD EXISTS ERL" + &
				NUM1$(ERL) + " ERR" + NUM1$(ERR), 1%)
			RESUME 1090
		END IF
	END SELECT

	!===================================================================
	! Error LINE(ERL) cases
	!===================================================================

	!
	! Untrapped error
	!
	FILENAME$ = ""
	RESUME HelpError

32767	END
