1	%TITLE "Product Lowest Level by Type"
	%SBTTL "RI_RPRT_LOWTYPE"
	%IDENT "V3.6a Calico"

	!
	! COPYRIGHT (C) 1986, 1988 BY
	!
	! Computer Management Center, Inc.
	! Idaho Falls, Idaho.
	!
	! This software is furnished under a license and may be used and
	! copied only in accordance with terms of such license and with
	! the inclusion of the above copyright notice.  This software or
	! any other copies thereof may not be provided or otherwise made
	! available to any other person.  No title to and ownership of
	! the software is hereby transferred.
	!
	! The information in this software is subject to change without
	! notice and should not be construed as a commitment by
	! Computer Management Center, Inc.
	!
	! CMC assumes no responsibility for the use or reliability of
	! its software on equipment which is not supported by CMC.
	!
	!++
	! ID:RI001
	!
	! Abstract:HELP
	!	.p
	!	The ^*Ingredients by Type\* option provides the means to
	!	print a report which summarizes all ingredients by
	!	ingredient type (based on the lowest level in selected
	!	products). The report screen contains the options to
	!	print the standard cost of ingredients and the standard
	!	cost of products. Included in this report are the following fields:
	!	.b
	!	.lm 15
	!	.list 0,"*"
	!	.le
	!	Product Number
	!	.le
	!	Product Description
	!	.le
	!	Product Type
	!	.le
	!	Ingredient Number
	!	.le
	!	Ingredient Type
	!	.le
	!	Ingredient Description
	!	.le
	!	Category
	!	.le
	!	Product Unit of Measure
	!	.le
	!	Ingredient Unit of Measure
	!	.le
	!	Quantity
	!	.le
	!	Cost
	!	.le
	!	Extension Cost
	!	.els
	!
	! Index:
	!	.x Ingredients by Type>Report
	!	.x Report>Ingredients by Type
	!
	! Option:
	!
	! Compile:
	!
	!	$ BAS RI_SOURCE:RI_RPRT_LOWTYPE/LINE
	!	$ LINK/EXE=RI_EXE: RI_RPRT_LOWTYPE, FUNC_LIB:CMCLINK/OPTION
	!	$ DELETE RI_RPRT_LOWTYPE.OBJ;*
	!
	! Author:
	!
	!	10/09/87 - Frank F. Starman
	!
	! Modification History:
	!
	!	03/13/92 - Kevin Handy
	!		Removed duplicate error trapping (check)
	!
	!	04/22/93 - Kevin Handy
	!		Clean up (Check)
	!
	!	06/11/93 - Kevin Handy
	!		Clean up (Check)
	!
	!	04/15/95 - Kevin Handy
	!		(V3.6)
	!		Update to V3.6 coding standards
	!
	!	09/16/96 - Kevin Handy
	!		Reformat source code.
	!
	!	06/02/97 - Kevin Handy
	!		Use integer for #key
	!
	!	08/22/98 - Kevin Handy
	!		(V3.6a Calico)
	!		Update to V3.6a coding standards
	!--
	%PAGE

	OPTION SIZE = (INTEGER LONG, REAL GFLOAT)

	!
	! Include files
	!
	%INCLUDE "FUNC_INCLUDE:FUNCTION.HB"

	MAP (SCOPE) SCOPE_STRUCT SCOPE

	%INCLUDE "SOURCE:[UTL.OPEN]UTL_REPORTX.HB"
	DECLARE UTL_REPORTX_CDD UTL_REPORTX

	%INCLUDE "SOURCE:[RI.OPEN]RI_RELATION.HB"
	MAP	(RI_RELATION)	RI_RELATION_CDD	RI_RELATION

	%INCLUDE "SOURCE:[PD.OPEN]PD_PRODUCT.HB"
	MAP	(PD_PRODUCT)	PD_PRODUCT_CDD	PD_PRODUCT

	%INCLUDE "SOURCE:[PD.OPEN]PD_PRODTYPE.HB"
	MAP	(PD_PRODTYPE)	PD_PRODTYPE_CDD	PD_PRODTYPE

	RECORD INGREDIENT_RECORD
		STRING NUMBER   = 14%, &
		STRING PROD_TYPE = 2%, &
		REAL   QUANTITY
	END RECORD

	DIM INGREDIENT_RECORD	INGREDIENT(1000%)
	DIM RFA			RFA_LEVEL(500%)
	DIM REAL		QTY_LEVEL(500%)
	DIM STRING		TEST_PRODUCT(500%)

	!
	! External functions
	!
	EXTERNAL REAL    FUNCTION PC_READ_COST

	%PAGE

	ON ERROR GOTO 19000

	!
 Init:	! Initilize report
	!
	CALL OUTP_INITFROMFILE(UTL_REPORTX, 132%)

	GOTO ExitProgram IF UTL_REPORTX::STAT

	FROM.ITEM$ = EDIT$(UTL_REPORTX::OPTDEF(0%), 132%)

	!++
	! Abstract:FLD01
	!	^*(01) From Item\*
	!	.p
	!	The ^*From Item\* field provides a means to begin the report
	!	with a selected item by entering the selection in this field.
	!	.p
	!	A blank field will cause the report to begin with the first
	!	item in the file.
	!
	! Index:
	!	.x From Item>Product Lowest Level by Type Report
	!	.x Product Lowest Level by Type Report>From Item
	!	.x Item>From
	!
	!--

	TO.ITEM$ = EDIT$(UTL_REPORTX::OPTDEF(1%), 132%)

	!++
	! Abstract:FLD02
	!	^*(02) To Item\*
	!	.p
	!	The ^*To Item\* field provides a means to enter an item
	!	with which the report will end by entering the selected
	!	item in this field.
	!	.p
	!	A blank setting will cause the report to end with the
	!	last item in the file.
	!
	! Index:
	!	.x To Item>Product Lowest Level by Type
	!	.x Product Lowest Level by Type>To Item
	!	.x Item>To
	!
	!--

	WLDCRD$ = EDIT$(UTL_REPORTX::OPTDEF(2%), -1%)

	!++
	! Abstract:FLD03
	!	^*(03) Wildcard\*
	!	.p
	!	The ^*Wildcard\* field provides the means to select designated
	!	items to be printed on the report by entering a "Wildcard"
	!	value in this field.
	!
	! Index:
	!	.x Wildcard>Product Lowest Level by Type Report
	!	.x Product Lowest Level by Type Report>Wildcard
	!
	!--

	LOCATION$ = EDIT$(UTL_REPORTX::OPTDEF(4%), -1%)

	!++
	! Abstract:FLD05
	!	^*(05) Location _#\*
	!	.p
	!	The ^*Location _#\* field is provided to enter a location
	!	code which is established in the Company Profile file
	!	located in the Utility system.
	!	.p
	!	This field will accommodate up to four (4) alphanumeric
	!	characters.
	!	.p
	!	An entry is required in this field.
	!
	! Index:
	!	.x Location Number>Product Lowest Level by Type Report
	!	.x Product Lowest Level by Type Report>Location Number
	!	.x Number>Location
	!
	!--

	!++
	! Abstract:FLD07
	!	^*(07) Ingredient Types\*
	!	.p
	!	DOES THIS FIELD REALLY EXIST?
	!	The ^*Ingredient Types\* field provides the means to
	!	enter the types of ingredients which will be listed
	!	on the report. A valid ingredient type must
	!	be entered.
	!
	! Index:
	!	.x Ingredient Types
	!
	!--

	DISPLAY_COST$ = EDIT$(UTL_REPORTX::OPTDEF(8%), 132%)

	!++
	! Abstract:FLD09
	!	^*(09) Cost Display (Y,N)\*
	!	.p
	!	The ^*Cost Display\* field is provided to enter a code
	!	to indicate whether the report is to contain the standard
	!	cost.
	!	.p
	!	Valid codes are:
	!	.lm +10
	!	.b
	!	.list 0,"*"
	!	.le
	!	Y = Yes
	!	.le
	!	N = No
	!	.els
	!	.lm -10
	!	.p
	!	An entry is required in this field.
	!
	! Index:
	!	.x Cost Display>Product Lowest Level by Type
	!	.x Product Lowest Level By Type>Cost Display
	!	.x Display>Cost
	!
	!--

	SORT.BY$ = EDIT$(UTL_REPORTX::OPTDEF(9%), 132%)

	!++
	! Abstract:FLD10
	!	^*(10) Sort (C,D,P,T)\*
	!	.p
	!	The ^*Sort\* field provides the means to select an order
	!	by which the report will print.
	!	.p
	!	Valid settings are:
	!	.lm +10
	!	.b
	!	.list 0,"*"
	!	.le
	!	C = Product Category
	!	.le
	!	D = Product Description
	!	.le
	!	P = Product Number
	!	.le
	!	T = Product Type
	!	.els
	!	.lm -10
	!	.p
	!	An entry is required in this field.
	!
	! Index:
	!	.x Sort>Product Lowest Level by Type
	!	.x Product Lowest Level by Type>Sort
	!
	!--


	SELECT SORT.BY$
	CASE "C"
		SORT.KEY% = 2%
		ADD.TITLE$ = "BY  CATEGORY"
	CASE "D"
		SORT.KEY% = 3%
		ADD.TITLE$ = "BY  DESCRIPTION"
	CASE "P"
		SORT.KEY% = 0%
		ADD.TITLE$ = "BY  PRODUCT  NUMBER"
	CASE "T"
		SORT.KEY% = 1%
		ADD.TITLE$ = "BY  PRODUCT  TYPE"
	END SELECT


300	%INCLUDE "SOURCE:[RI.OPEN]RI_RELATION.OPN"

310	%INCLUDE "SOURCE:[PD.OPEN]PD_PRODUCT.OPN"

320	PD_PRODUCT2.CH% = PD_PRODUCT.CH%
	PD_PRODUCT.CH% = 0%
	%INCLUDE "SOURCE:[PD.OPEN]PD_PRODUCT.OPN"

340	%INCLUDE "SOURCE:[PD.OPEN]PD_PRODTYPE.OPN"

 ReportTitle:
	!
	! Title
	!
	TITLE$(1%) = "PRODUCT  STRUCTURE  "+ ADD.TITLE$ + &
		"  ON  THE  LOWEST  LEVEL"
	TITLE$(2%) = "Recipe Ingredients System"
	TITLE$(3%) = ""

	!
	! Heading
	!
	TITLE$(4%) = "Product#       Description                   "+ &
		"           Type Cat  UOM"

	SELECT DISPLAY_COST$

	CASE "Y"
		TITLE$(5%) = SPACE$(26%)+"Type Ingredient#    "+ &
			"Description                              UOM     "+ &
			"Quantity      Cost      ExtCost"

	CASE "N"
		TITLE$(5%) = SPACE$(26%)+"Type Ingredient#    "+ &
			"Description                              UOM     "+ &
			"Quantity"

	END SELECT

	TITLE$(6%) = "."

	%PAGE

17000	!******************************************************************
	! OUTPUT REPORT
	!******************************************************************

	IF FROM.ITEM$ = ""
	THEN
		RESET #PD_PRODUCT.CH%,KEY#SORT.KEY%
	ELSE
		FIND #PD_PRODUCT.CH%, KEY#SORT.KEY% GE FROM.ITEM$,REGARDLESS
	END IF

 GetNextRec:
17020	!
	! Main loop starts here
	!
	GOTO ExitProgram IF UTL_REPORTX::STAT

	!
	! Get next record
	!
	GET #PD_PRODUCT.CH%, REGARDLESS

	!
	! Check current record
	!
	GOTO GetNextRec IF PD_PRODUCT::SSTATUS <> "A"

	SELECT SORT.BY$

	CASE "C"
		GOTO ExitTotal IF (PD_PRODUCT::CATEGORY > TO.ITEM$) AND &
			TO.ITEM$ <> ""

		IF TEST_CATEGORY$ <> PD_PRODUCT::CATEGORY AND &
			TEST_CATEGORY$ <>"" AND PRINT.LINE%
		THEN
			CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), " ", 2%)
			PRINT.LINE% = 0%
		END IF

		TEST_CATEGORY$ = PD_PRODUCT::CATEGORY

	CASE "D"
		GOTO ExitTotal IF (PD_PRODUCT::DESCRIPTION > TO.ITEM$) AND &
			TO.ITEM$ <> ""

		GOTO GetNextRec IF WLDCRD$ <> "" AND &
			COMP_STRING(EDIT$(PD_PRODUCT::DESCRIPTION,-1%), &
			WLDCRD$) = 0%

	CASE "P"
		GOTO ExitTotal IF (PD_PRODUCT::PRODUCT_NUM > TO.ITEM$) AND &
			TO.ITEM$ <> ""

		GOTO GetNextRec IF WLDCRD$ <> "" AND &
			COMP_STRING(EDIT$(PD_PRODUCT::PRODUCT_NUM,-1%), &
			WLDCRD$) = 0%

	CASE "T"
		GOTO ExitTotal IF (PD_PRODUCT::PROD_TYPE> TO.ITEM$) AND &
			TO.ITEM$ <> ""
		GOTO GetNextRec IF WLDCRD$ <> "" AND &
			COMP_STRING(EDIT$(PD_PRODUCT::PROD_TYPE,-1%), &
			WLDCRD$) = 0%

		IF TEST_PRODTYPE$ <> PD_PRODUCT::PROD_TYPE AND &
			TEST_PRODTYPE$ <>"" AND PRINT.LINE%
		THEN
			CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), " ", 2%)
			PRINT.LINE% = 0%
		END IF

		TEST_PRODTYPE$ = PD_PRODUCT::PROD_TYPE

	END SELECT

17200	GET #RI_RELATION.CH%, KEY#0% EQ PD_PRODUCT::PRODUCT_NUM, &
		REGARDLESS

17300	!
	! Print out Product
	!

	PD_PRODUCT$ = RI_RELATION::PRODUCT

	TEXT$ = RI_RELATION::PRODUCT + " " + &
		PD_PRODUCT::DESCRIPTION+" "+ &
		PD_PRODUCT::PROD_TYPE+"   "+ &
		PD_PRODUCT::CATEGORY+" "+ &
		PD_PRODUCT::UOM

	CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), TEXT$, 0%)

	ITEM_LOOP% = 0%
	QTY_LEVEL(0%),LEVEL% = 1%

 GoDownTree:
	!
	TEST_PRODUCT(LEVEL%) = RI_RELATION::PRODUCT
	QTY_LEVEL(LEVEL%) = QTY_LEVEL(LEVEL%-1%) * RI_RELATION::QUANTITY
	RFA_LEVEL(LEVEL%) = GETRFA(RI_RELATION.CH%)

	GOTO 18000 IF RI_RELATION::INGREDIENT = TEST_PRODUCT(I%) &
			FOR I% = 1 TO LEVEL%-1%

17320	GET #RI_RELATION.CH%, KEY#0% EQ RI_RELATION::INGREDIENT

	LEVEL% = LEVEL% + 1%
	GOTO GoDownTree

 GoUpTree:
	!
	GOTO PrintIngredients IF LEVEL% - 1% = 0%

	LEVEL% = LEVEL% - 1%

17330	GET #RI_RELATION.CH%, RFA RFA_LEVEL(LEVEL%),REGARDLESS

	GET #RI_RELATION.CH%, REGARDLESS

	IF RI_RELATION::PRODUCT <> TEST_PRODUCT(LEVEL%)
	THEN
		GOTO GoUpTree
	ELSE
		GOTO GoDownTree
	END IF


 PrintIngredients:
	!
	! Sort array
	!
	FOR I%=1% TO ITEM_LOOP%
		INDEX% = I%
		INGREDIENT(0%) = INGREDIENT(I%)
		FOR J%=I% TO ITEM_LOOP%

			IF INGREDIENT(J%)::PROD_TYPE+INGREDIENT(J%)::NUMBER < &
				INGREDIENT(0%)::PROD_TYPE+INGREDIENT(0%)::NUMBER
			THEN
				INGREDIENT(0%) = INGREDIENT(J%)
				INDEX% = J%
			END IF

		NEXT J%

		INGREDIENT(INDEX%) = INGREDIENT(I%)
		INGREDIENT(I%) = INGREDIENT(0%)

	NEXT I%

	INGREDIENT(0%) = INGREDIENT(1%)
	TOTAL_TYPE,TOTAL_PRODUCT = 0.

	!
	! Print array
	!
	FOR I%=1% TO ITEM_LOOP%

		PD_PRODUCT$ = INGREDIENT(I%)::NUMBER

		SELECT DISPLAY_COST$
		CASE "Y"
			GOSUB 18700 IF INGREDIENT(I%)::PROD_TYPE <> &
				INGREDIENT(I%-1%)::PROD_TYPE

			COST = PC_READ_COST(PD_PRODUCT$,LOCATION$,"","")

			TOTAL_INGREDIENT= FUNC_ROUND(INGREDIENT(I%)::QUANTITY* &
				COST,3%)
			TOTAL_TYPE = TOTAL_TYPE + &
				FUNC_ROUND(INGREDIENT(I%)::QUANTITY*COST,3%)
			TOTAL_PRODUCT = TOTAL_PRODUCT + &
				FUNC_ROUND(INGREDIENT(I%)::QUANTITY*COST,3%)

			GOSUB 18500
			TEXT$ = TEST_PRODUCT(1%)+SPACE$(12%)+ &
				INGREDIENT(I%)::PROD_TYPE+"   "+ &
				INGREDIENT(I%)::NUMBER+" "+ &
				PD_PRODUCT::DESCRIPTION+" "+ &
				PD_PRODUCT::UOM +"   "+ &
				FORMAT$(INGREDIENT(I%)::QUANTITY, &
					"###,###.###")+ " "+ &
				FORMAT$(COST,"#,###.###")+"  "+ &
				FORMAT$(TOTAL_INGREDIENT,"###,###.###")

		CASE "N"
			GOSUB 18500
			TEXT$ = TEST_PRODUCT(1%)+SPACE$(12%)+ &
				INGREDIENT(I%)::PROD_TYPE+"   "+ &
				INGREDIENT(I%)::NUMBER+" "+ &
				PD_PRODUCT::DESCRIPTION+" "+ &
				PD_PRODUCT::UOM +"   "+ &
				FORMAT$(INGREDIENT(I%)::QUANTITY, &
					"###,###.###")

		END SELECT

		CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), TEXT$, 0%)

	NEXT I%

	IF DISPLAY_COST$="Y"
	THEN
		GOSUB 18700

		TEXT$ = TEST_PRODUCT(1%)+SPACE$(17%)+ &
			"TOTAL"+SPACE$(79%)+ &
			FORMAT$(TOTAL_PRODUCT,"###,###.###")

			CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), TEXT$, 3%)
	END IF

	GOTO ExitProgram IF UTL_REPORTX::STAT

17350	!
	! Try for next record
	!
	FIND #RI_RELATION.CH%, KEY#0% GE TEST_PRODUCT(1%)+"9999", REGARDLESS

	CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), "", -1%)

	GOTO GetNextRec

 ExitTotal:
17400	!
	! Handle end of report
	!


 ExitProgram:

	CALL OUTP_FINISH(UTL_REPORTX)

	!
	! Exit to next program or menu
	!
	IF TRM$(UTL_REPORTX::NEXTRUN) = ""
	THEN
		CALL SUBR_3EXITPROGRAM(SCOPE, "", "")
	ELSE
		CALL SUBR_3EXITPROGRAM(SCOPE, "RUN " + UTL_REPORTX::NEXTRUN, "")
	END IF

	%PAGE

18000	!
	! Array of terminals
	!
	FOR I%=1% TO ITEM_LOOP%

		IF RI_RELATION::INGREDIENT = INGREDIENT(I%)::NUMBER
		THEN
			INGREDIENT(I%)::QUANTITY = INGREDIENT(I%)::QUANTITY + &
				FUNC_ROUND(QTY_LEVEL(LEVEL%),3%)
			GOTO Ret18010
		END IF

	NEXT I%

	PD_PRODUCT::PROD_TYPE = &
		STRING$(LEN(PD_PRODUCT::PROD_TYPE),ASCII("?"))
	GET #PD_PRODUCT2.CH%, KEY#0% EQ RI_RELATION::INGREDIENT,REGARDLESS

18010	GOTO Ret18010 &
		IF COMP_STRING(EDIT$(PD_PRODUCT::PROD_TYPE,-1%),TYPEWLD$) = 0% &
		AND TYPEWLD$ <> ""

	ITEM_LOOP% = ITEM_LOOP% + 1%
	INGREDIENT(ITEM_LOOP%)::NUMBER		= RI_RELATION::INGREDIENT
	INGREDIENT(ITEM_LOOP%)::PROD_TYPE	= PD_PRODUCT::PROD_TYPE
	INGREDIENT(ITEM_LOOP%)::QUANTITY	= QTY_LEVEL(LEVEL%)

 Ret18010:
	GOTO 17330

18500	!
	! Read Product File
	!
	PD_PRODUCT::DESCRIPTION = &
		STRING$(LEN(PD_PRODUCT::DESCRIPTION),ASCII("?"))
	PD_PRODUCT::CATEGORY    = &
		STRING$(LEN(PD_PRODUCT::CATEGORY),ASCII("?"))
	PD_PRODUCT::UOM         = &
		STRING$(LEN(PD_PRODUCT::UOM),ASCII("?"))
	GET #PD_PRODUCT2.CH%, KEY#0% EQ PD_PRODUCT$,REGARDLESS

18510	RETURN

18700	!
	! Read Product Type File
	!
	PD_PRODTYPE::DESCRIPTION = &
		STRING$(LEN(PD_PRODTYPE::DESCRIPTION),ASCII("?"))
	GET #PD_PRODTYPE.CH%, KEY#0% EQ PD_PRODUCT::PROD_TYPE,REGARDLESS

18710	TEXT$ = TEST_PRODUCT(1%)+SPACE$(12%)+ &
		INGREDIENT(I%)::PROD_TYPE+"   "+ &
		SPACE$(18%)+ &
		PD_PRODTYPE::DESCRIPTION+SPACE$(46%)+ &
		FORMAT$(TOTAL_TYPE,"###,###.###")

	TOTAL_TYPE = 0.

	CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), TEXT$, 2%)

	RETURN

 HelpError:
	!******************************************************************
	! Help Message for an error
	!******************************************************************
	CALL HELP_34MESSAGE(SCOPE, NUM1$(ERL) + " " + ERT$(ERR), &
		"E", ERN$, FILENAME$, NUM1$(ERR))
	UTL_REPORTX::STAT = -1%
	GOTO ExitProgram

	%Page

19000	!******************************************************************
	! ERROR TRAPPING
	!******************************************************************

	SELECT ERR
	CASE 154%	! Locked record
		SLEEP 5%
		RESUME
	END SELECT

	FILENAME$ = ""
	SELECT ERL
	CASE 300%, 17000%
		FILENAME$ = "RI_RELATION"

	CASE 310%
		FILENAME$ = "PD_PRODUCT"

	CASE 320%
		FILENAME$ = "PD_PRODUCT"

	CASE 340%
		RESUME ReportTitle IF ERR = 5%
		FILENAME$ = "PD_PRODTYPE"

	CASE 17020%	! End of file
		RESUME ExitTotal IF ERR = 11%
		FILENAME$ = "PD_PRODUCT"

	CASE 17200%
		RESUME GetNextRec IF ERR = 155%
		FILENAME$ = "RI_RELATION"

	CASE 17320	! Can't find ingredient
		IF ERR = 155%
		THEN
			RESUME 18000
		END IF
		FILENAME$ = "RI_RELATION"

	CASE 17330	! Can't find ingredient
		IF ERR = 155% OR ERR = 11%
		THEN
			RESUME GoUpTree
		END IF
		FILENAME$ = "RI_RELATION"

	CASE 17350	! Can't find ingredient
		IF ERR = 155%
		THEN
			RESUME ExitTotal
		END IF
		FILENAME$ = "RI_RELATION"

	CASE 18000%	! Undefined product type
		RESUME 18010 IF ERR = 155% OR ERR = 9%
		FILENAME$ = "PD_PRODUCT2"

	CASE 18500%	! Undefined product
		RESUME 18510 IF ERR = 155% OR ERR = 9%
		FILENAME$ = "PD_PRODUCT2"

	CASE 18700%	! Undefined Product Type
		RESUME 18710 IF ERR = 155% OR ERR = 9%
		FILENAME$ = "PD_PRODTYPE"

	END SELECT

	!
	! Untrapped error
	!
	RESUME HelpError

32767	END
