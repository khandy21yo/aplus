1	%TITLE "Restaurant Product Transaction Journal"
	%SBTTL "RM_MAIN_JOURPROD"
	%IDENT "V3.6a Calico"

	FUNCTION LONG RM_MAIN_JOURPROD(CDD_WINDOW_CDD SMG_WINDOW, &
		LONG MOPTION, LONG MLOOP, LONG MFLAG, STRING MVALUE)

	!
	! COPYRIGHT (C) 1987, 1988 BY
	!
	! Computer Management Center, Inc.
	! Idaho Falls, Idaho.
	!
	! This software is furnished under a license and may be used and
	! copied only in accordance with terms of such license and with
	! the inclusion of the above copyright notice.  This software or
	! any other copies thereof may not be provided or otherwise made
	! available to any other person.  No title to and ownership of
	! the software is hereby transferred.
	!
	! The information in this software is subject to change without
	! notice and should not be construed as a commitment by
	! Computer Management Center, Inc.
	!
	! CMC assumes no responsibility for the use or reliability of
	! its software on equipment which is not supported by CMC.
	!
	!++
	! Abstract:HELP
	!	.p
	!	The ^*Transaction Journal\* program maintains the Restaurant product
	!	transaction journal file.
	!
	! Index:
	!	.x Transaction Journal
	!	.x Journal>Transaction
	!
	! Option:
	!
	!
	! Compile:
	!
	!	$ BAS RM_SOURCE:RM_MAIN_JOURPROD/LINE
	!	$ LIB FUNC_LIB:CMCFUN/REP RM_MAIN_JOURPROD
	!	$ DELETE RM_MAIN_JOURPROD.OBJ;*
	!
	! Author:
	!
	!	11/12/87 - Frank F. Starman
	!
	! Modification history:
	!
	!	05/19/88 - Aaron Redd
	!		Modified to allow R/O open of file if R/W open fails.
	!
	!	06/29/88 - Frank F. Starman
	!		Change layout
	!
	!	05/07/92 - Dan Perkins
	!		Use FUNC_TESTENTRY to test input.
	!
	!	06/12/92 - Kevin Handy
	!		Clean up (check)
	!
	!	04/23/93 - Kevin Handy
	!		Clean up (Check)
	!
	!	04/15/95 - Kevin Handy
	!		(V3.6)
	!		Update to V3.6 coding standards
	!
	!	10/29/96 - Kevin Handy
	!		Reformat source code
	!
	!	06/03/97 - Kevin Handy
	!		Use integer for #key
	!
	!	08/22/98 - Kevin Handy
	!		(V3.6a Calico)
	!		Update to V3.6a coding standards
	!--
	%PAGE

	!
	! Set up compiling options
	!
	OPTION SIZE = (REAL GFLOAT, INTEGER LONG)

	%INCLUDE "FUNC_INCLUDE:FUNCTION.HB"

	MAP (SCOPE) SCOPE_STRUCT SCOPE

	%INCLUDE "FUNC_INCLUDE:RM_WINDOW.INC"
	%INCLUDE "FUNC_INCLUDE:PD_WINDOW.INC"
	%INCLUDE "FUNC_INCLUDE:MAIN_WINDOW.COM"

	%INCLUDE "SOURCE:[CDD.OPEN]CDD_WINDOW.HB"

	%INCLUDE "SOURCE:[RM.OPEN]RM_JOURPROD.HB"
	MAP (RM_JOURPROD)	RM_JOURPROD_CDD		RM_JOURPROD
	MAP (RM_JOURPROD_OLD)	RM_JOURPROD_CDD		RM_JOURPROD_OLD, &
		RM_JOURPROD2, RM_JOURPROD3

	%INCLUDE "SOURCE:[RM.OPEN]RM_JOURNAL.HB"
	MAP(RM_JOURNAL)		RM_JOURNAL_CDD		RM_JOURNAL

	%INCLUDE "SOURCE:[PD.OPEN]PD_PRODUCT.HB"
	MAP (PD_PRODUCT)	PD_PRODUCT_CDD		PD_PRODUCT

	!
	! Common Areas
	!
	! These areas store information that is re-used between
	! calls to these functions.
	!
	COM (BATCH_RM_JOURNAL) &
		BATCH_NO$ = 2%

	COM (CH_RM_JOURPROD) &
		RM_JOURPROD.CH%, &
		RM_JOURPROD.READONLY%

	!
	! Create array to contain pointers and totals
	!
	RECORD RARRAY_RECORD
		RFA	LINRFA		! Rfa pointer for record
		STRING	SLINE = 4%	! Line number
	END RECORD

	MAP (TT_RM_JOURPROD)	RARRAY_RECORD RARRAY(1000%)

	!
	! External functions
	!
	EXTERNAL LONG	FUNCTION MAIN_WINDOW
	EXTERNAL LONG	FUNCTION FUNC_TESTENTRY
	EXTERNAL REAL   FUNCTION PC_READ_PRICE

	%PAGE

	ON ERROR GOTO 29000

	SELECT MOPTION

	!
	! Initialization
	!
	! This option is used to initialize the window structure,
	! set up the default values for add, and open all files
	! necessary that have not already been opened.
	!
	CASE OPT_INIT
		!
		! Define window
		!
		SMG_WINDOW::DESCR = "Units transaction"
		SMG_WINDOW::NHELP = "RM_MAIN_JOURPROD"
		SMG_WINDOW::HSIZE = 78%
		SMG_WINDOW::VSIZE = 12%
		SMG_WINDOW::HVIEW = 78%
		SMG_WINDOW::VVIEW = 18%
		SMG_WINDOW::HPOS  = 2%
		SMG_WINDOW::VPOS  = 8%
		SMG_WINDOW::NITEMS= 9%
		SMG_WINDOW::FLAGS = 0%

		SMG_WINDOW::TOPLIN = 3%
		SMG_WINDOW::BOTLIN = 11%

		!
		! Load in defaults
		!
		CALL READ_DEFAULTS(SMG_WINDOW) &
			IF INSTR(1%, " QV", MVALUE)

700		!
		! Declare channels
		!
		IF RM_JOURPROD.CH% > 0%
		THEN
			!
			! Already open, set flag to read-only if was
			! that way from last time.
			!
			SMG_WINDOW::FLAGS = (SMG_WINDOW::FLAGS OR 2%) &
				IF RM_JOURPROD.READONLY%
			GOTO 790
		END IF

		!
		! Open main file (existing) for modification
		!
750		%INCLUDE "SOURCE:[RM.OPEN]RM_JOURPROD.CRE"
		RM_JOURPROD.READONLY% = 0%
		GOTO 790

760		!
		! If unable to open for modify, try to open with read
		! access only.
		!
		%INCLUDE "SOURCE:[RM.OPEN]RM_JOURPROD.OPN"
		SMG_WINDOW::FLAGS = (SMG_WINDOW::FLAGS OR 2%)
		RM_JOURPROD.READONLY% = -1%

		GOTO 790

770		!
		! File not open, so reset channel
		!
		CALL ASSG_FREECHANNEL(RM_JOURPROD.CH%)

		EXIT FUNCTION

790		SMG_WINDOW::CHAN  = RM_JOURPROD.CH%
		RESET #RM_JOURPROD.CH%
		GET #RM_JOURPROD.CH%, REGARDLESS

	!
	! Display the background
	!
	! This option is used to display the background information on the
	! screen.  It must first clear any junk on the screen, and then
	! write the background onto it.
	!
20100	CASE OPT_BACKGROUND

		DAY.WEEK$(1%) = "    MON "
		DAY.WEEK$(2%) = "    TUE "
		DAY.WEEK$(3%) = "    WED "
		DAY.WEEK$(4%) = "    THU "
		DAY.WEEK$(5%) = "    FRI "
		DAY.WEEK$(6%) = "    SAT "
		DAY.WEEK$(7%) = "    SUN "

		HEADER.LINE2$ = ""

		FOR II% = 0% TO 6%
			DAY.CODE%    = DATE_DAYCODE(RM_JOURNAL::STARTDATE)+II%
			HEADER.LINE2$= HEADER.LINE2$ + &
				DAY.WEEK$(DATE_DAYOFWEEK(DAY.CODE%))
		NEXT II%

		SMG_STATUS% = SMG$BEGIN_DISPLAY_UPDATE(SMG_WINDOW::WNUMBER)

		SMG_STATUS% = SMG$ERASE_DISPLAY(SMG_WINDOW::WNUMBER)

		SMG_STATUS% = SMG$PUT_CHARS(SMG_WINDOW::WNUMBER, &
			"  (01)            (02)    (03)    (04)    "+ &
			"(05)    (06)    (07)    (08)    (09)", &
			1%, 1%, , SMG$M_REVERSE)

		SMG_STATUS% = SMG$PUT_CHARS(SMG_WINDOW::WNUMBER, &
			"  Product#       Price "+HEADER.LINE2$, &
			2%, 1%, , SMG$M_REVERSE)

		SMG_STATUS% = SMG$END_DISPLAY_UPDATE(SMG_WINDOW::WNUMBER)

	!
	! Extra display stuff
	!
	CASE OPT_DISPLAY

		SMG_STATUS% = SMG$BEGIN_DISPLAY_UPDATE(SMG_WINDOW::WNUMBER)

		!
		! Display totals
		!
		SMG_STATUS% = SMG$PUT_CHARS(SMG_WINDOW::WNUMBER, &
			"Number of lines" + &
			FORMAT$(SMG_WINDOW::TOTREC, "####") + &
			"                                             "+ &
			"               ", &
			SMG_WINDOW::VSIZE, 1%, , SMG$M_REVERSE)

		!
		! Paint lines on screen
		!
		FOR I% = 1% TO 8%
			A% = VAL%(MID("013,023,031,039,047,055,063,071", &
				I%*4%-3%, 3%))

			SMG_STATUS% = SMG$DRAW_LINE(SMG_WINDOW::WNUMBER, &
				1%, A%, SMG_WINDOW::BOTLIN, A%)
		NEXT I%

		SMG_STATUS% = SMG$END_DISPLAY_UPDATE(SMG_WINDOW::WNUMBER)

	!
	! Enter/Display/Default
	!
	! This option is used to enter the data from the user, display data,
	! set defaults, and return the data back according to MFLAG.
	!
20200	CASE OPT_ENTRY

		TEMP$, TEMP1$ = TRM$(SCOPE::PRG_ITEM)
		TEMP$ = "View starting at" IF TEMP$ = "View"

		SCOPE::PRG_ITEM = "FLD" + FORMAT$(MLOOP, "<0>##")

		XLINE$ = NUM1$(SMG_WINDOW::CURLIN)

 Reentry:	SCOPE::SCOPE_EXIT = 0%

		SELECT MLOOP

		CASE 1%
			RM_JOURPROD::PRODUCT = ENTR_3STRING(SCOPE, &
				SMG_WINDOW::WNUMBER, XLINE$ + ";3", TEMP$, &
				RM_JOURPROD::PRODUCT, MFLAG, &
				"'LLLLLLLLL", MVALUE)

			IF (SCOPE::SCOPE_EXIT = SMG$K_TRM_F14)
			THEN
				IF MAIN_WINDOW(PD_MAIN_PRODUCT.ID, "VX") = 1%
				THEN
					RM_JOURPROD::PRODUCT = &
						PD_PRODUCT::PRODUCT_NUM
				END IF
				GOTO Reentry
			END IF

		CASE 2%

			IF TEMP$ = "Add" AND (MFLAG AND 1%) = 0%
			THEN
				RM_JOURPROD::PRICE = &
					PC_READ_PRICE(RM_JOURPROD::PRODUCT, &
					RM_JOURNAL::LOCATION, &
					RM_JOURNAL::PRICETYPE, &
					RM_JOURNAL::STARTDATE, &
					"000000","","")
			END IF

			RM_JOURPROD::PRICE = ENTR_3NUMBER(SCOPE, &
				SMG_WINDOW::WNUMBER, XLINE$ + ";14",TEMP$, &
				RM_JOURPROD::PRICE, MFLAG, &
				"##,###.##", MVALUE)

		CASE 3%

			RM_JOURPROD::QUANTITY(0%) = ENTR_3NUMBER(SCOPE, &
				SMG_WINDOW::WNUMBER, XLINE$ + ";24",TEMP$, &
				RM_JOURPROD::QUANTITY(0%), MFLAG, &
				"###,###", MVALUE)

		CASE 4%

			RM_JOURPROD::QUANTITY(1%) = ENTR_3NUMBER(SCOPE, &
				SMG_WINDOW::WNUMBER, XLINE$ + ";32",TEMP$, &
				RM_JOURPROD::QUANTITY(1%), MFLAG, &
				"###,###", MVALUE)

		CASE 5%

			RM_JOURPROD::QUANTITY(2%) = ENTR_3NUMBER(SCOPE, &
				SMG_WINDOW::WNUMBER, XLINE$ + ";40",TEMP$, &
				RM_JOURPROD::QUANTITY(2%), MFLAG, &
				"###,###", MVALUE)

		CASE 6%

			RM_JOURPROD::QUANTITY(3%) = ENTR_3NUMBER(SCOPE, &
				SMG_WINDOW::WNUMBER, XLINE$ + ";48",TEMP$, &
				RM_JOURPROD::QUANTITY(3%), MFLAG, &
				"###,###", MVALUE)

		CASE 7%

			RM_JOURPROD::QUANTITY(4%) = ENTR_3NUMBER(SCOPE, &
				SMG_WINDOW::WNUMBER, XLINE$ + ";56",TEMP$, &
				RM_JOURPROD::QUANTITY(4%), MFLAG, &
				"###,###", MVALUE)

		CASE 8%

			RM_JOURPROD::QUANTITY(5%) = ENTR_3NUMBER(SCOPE, &
				SMG_WINDOW::WNUMBER, XLINE$ + ";64",TEMP$, &
				RM_JOURPROD::QUANTITY(5%), MFLAG, &
				"###,###", MVALUE)

		CASE 9%

			RM_JOURPROD::QUANTITY(6%) = ENTR_3NUMBER(SCOPE, &
				SMG_WINDOW::WNUMBER, XLINE$ + ";72",TEMP$, &
				RM_JOURPROD::QUANTITY(6%), MFLAG, &
				"###,###", MVALUE)

		END SELECT

		SCOPE::PRG_ITEM = TEMP1$

	!
	! Test values
	!
20300	CASE OPT_TESTENTRY

		RM_MAIN_JOURPROD = 0%

		SELECT MLOOP

		CASE 1%
			!
			! Is the input defined?
			!
			RM_MAIN_JOURPROD = FUNC_TESTENTRY(SMG_WINDOW, &
				RM_JOURPROD::PRODUCT, &
				PD_PRODUCT::DESCRIPTION, &
				"RM", MLOOP, "PRG", &
				"Product", PD_MAIN_PRODUCT.ID)

		END SELECT

	! Set RM_JOURPROD_OLD value
	!
20500	CASE OPT_SETOLD
		RM_JOURPROD_OLD = RM_JOURPROD

	!
	! Restore RM_JOURPROD_OLD value
	!
	CASE OPT_RESETOLD
		RM_JOURPROD = RM_JOURPROD_OLD

	!
	! Set default value
	!
	CASE OPT_SETDEFAULT
		RM_JOURPROD2 = RM_JOURPROD

	!
	! Restore default value
	!
	CASE OPT_RESETDEFAULT
		RM_JOURPROD = RM_JOURPROD2

		!
		! Set special default values for the key of a new record
		! which is the most likely case when this function is to
		! be called.
		!

		RM_JOURPROD::LOCATION	= RM_JOURNAL::LOCATION
		RM_JOURPROD::STARTDATE  = RM_JOURNAL::STARTDATE
		RM_JOURPROD::TRANSTYPE  = RM_JOURNAL::TRANSTYPE

		IF SMG_WINDOW::TOTREC = 0%
		THEN
			RM_JOURPROD::SEQNUM = "0001"
		ELSE
			RM_JOURPROD::SEQNUM = &
				FORMAT$(VAL%(RARRAY(SMG_WINDOW::TOTREC)::SLINE) + 1%, &
				"<0>###")
		END IF
	!
	! Find
	!
	CASE OPT_FIND
		SELECT MLOOP

		CASE 0%
			FIND #RM_JOURPROD.CH%, &
				KEY#0% GE RM_JOURPROD::LOCATION + &
				RM_JOURPROD::STARTDATE + &
				RM_JOURPROD::TRANSTYPE, REGARDLESS
		END SELECT

	!
	! Handle array of records
	!
27000	CASE OPT_ARRAY

		!
		! Select sub-option of array
		!
		SELECT MLOOP

		!
		! Load array with line items
		!
		CASE 1%

			!
			! Empty array
			!
			SMG_WINDOW::TOTREC = 0%

27110			!
			! Search for first record
			!
			FIND #SMG_WINDOW::CHAN, &
				KEY #0% GE RM_JOURNAL::LOCATION + &
				RM_JOURNAL::STARTDATE + &
				RM_JOURNAL::TRANSTYPE, &
				REGARDLESS

27120			!
			! Get a record
			!
			GET #SMG_WINDOW::CHAN

			IF RM_JOURPROD::LOCATION + &
				RM_JOURPROD::STARTDATE + &
				RM_JOURPROD::TRANSTYPE = &
			RM_JOURNAL::LOCATION+ &
				RM_JOURNAL::STARTDATE+ &
				RM_JOURNAL::TRANSTYPE
			THEN
				!
				! Add information to array
				!
				SMG_WINDOW::TOTREC = SMG_WINDOW::TOTREC + 1%
				RARRAY(SMG_WINDOW::TOTREC)::LINRFA = &
					GETRFA(SMG_WINDOW::CHAN)
				RARRAY(SMG_WINDOW::TOTREC)::SLINE = &
					RM_JOURPROD::SEQNUM
				GOTO 27120
			END IF

		!
		! Remove one element of the array
		!
		CASE 2%
			!
			! Remove item pointed to by Mflag
			!
			FOR I% = MFLAG TO SMG_WINDOW::TOTREC - 1%
				RARRAY(I%) = RARRAY(I% + 1%)
			NEXT I%

		!
		! Set array item to current record
		!
		CASE 3%
			RARRAY(MFLAG)::LINRFA	= GETRFA(SMG_WINDOW::CHAN)
			RARRAY(MFLAG)::SLINE	= RM_JOURPROD::SEQNUM


		!
		! Load in current record, locked
		!
		CASE 4%
27200			GET #SMG_WINDOW::CHAN, RFA RARRAY(MFLAG)::LINRFA

		!
		! Load in current record, unlocked
		!
		CASE 5%
			GET #SMG_WINDOW::CHAN, RFA RARRAY(MFLAG)::LINRFA, &
				REGARDLESS

		!
		! Change the current record's key to match header.  The
		! new key probably passes through MVALUE, unless some
		! other means is devised.
		!
		CASE 6%
			RM_JOURPROD::LOCATION  = MID(MVALUE,2%,4%)
			RM_JOURPROD::STARTDATE = MID(MVALUE,6%,8%)
			RM_JOURPROD::TRANSTYPE = MID(MVALUE,14%,2%)

		END SELECT
	END SELECT

28000	EXIT FUNCTION

	%PAGE

29000	!*******************************************************************
	! Trap errors
	!*******************************************************************

	SELECT ERL
	!
	! Unable to open Read/Write
	!
	CASE 750%
		RESUME 760 IF ERR = 10%
		RM_MAIN_JOURPROD = ERR
		RESUME 770

	!
	! Unable to open Read/Only
	!
	CASE 760%
		RM_MAIN_JOURPROD = ERR
		RESUME 770

	!
	! Unable to reset
	!
	CASE 790%
		RESUME 32767

	!
	! Record does not already exist
	!
	CASE 20300%
		RESUME 32767 IF ERR = 155%

	!
	! Error while loading array
	!
	CASE 27110%
		!
		! Nothing to load
		!
		RESUME 28000

	CASE 27120%
		!
		! Read all records
		!
		RESUME 28000 IF ERR = 11%

	END SELECT

	ON ERROR GO BACK

32767	END FUNCTION
	!+-+-+
	!++
	! Abstract:FLD001
	!	^*(01) Product Number\*
	!	.p
	!	The ^*Product Number\* field provides the means to enter a user defined
	!	identification number for each product.  This field accommodates up to
	!	fourteen (14) characters and must be enter.  It cannot be null.
	!
	! Index:
	!	.x Product Number
	!	.x Number>Product
	!
	!--
	!+-+-+
	!++
	! Abstract:FLD002
	!	^*(02) Price\*
	!	.p
	!	The ^*Price\* field provides the means to enter the price of the product.
	!
	! Index:
	!	.x Price
	!
	!--
	!+-+-+
	!++
	! Abstract:FLD003
	!	^*(03) Tuesday\*
	!	.p
	!	The ^*Tuesday\* field contains the sales per day for the particular Tuesday.
	!
	! Index:
	!	.x Tuesday
	!
	!--
	!+-+-+
	!++
	! Abstract:FLD004
	!	^*(04) Wednesday\*
	!	.p
	!	The ^*Wednesday\* field contains the sales per day for the particular Wednesday.
	!
	! Index:
	!	.x Wednesday
	!
	!--
	!+-+-+
	!++
	! Abstract:FLD005
	!	^*(05) Thursday\*
	!	.p
	!	The ^*Thursday\* field contains the sales per day for the particular Thursday.
	!
	! Index:
	!	.x Thursday
	!
	!--
	!+-+-+
	!++
	! Abstract:FLD006
	!	^*(06) Friday\*
	!	.p
	!	The ^*Friday\* field contains the sales per day for the particular Friday.
	!
	! Index:
	!	.x Friday
	!
	!--
	!+-+-+
	!++
	! Abstract:FLD007
	!	^*(07) Saturday\*
	!	.p
	!	The ^*Saturday\* field contains the sales per day for the particular Saturday.
	!
	! Index:
	!	.x Saturday
	!
	!--
	!+-+-+
	!++
	! Abstract:FLD008
	!	^*(08) Sunday\*
	!	.p
	!	The ^*Sunday\* field contains the sales per day for the particular Sunday.
	!
	! Index:
	!	.x Sunday
	!
	!--
	!+-+-+
	!++
	! Abstract:FLD009
	!	^*(09) Monday\*
	!	.p
	!	The ^*Monday\* field contains the sales per day for the particular Monday.
	!
	! Index:
	!	.x Monday
	!
	!--
