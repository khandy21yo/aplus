1	%TITLE "Scan RM Transaction Flags"
	%SBTTL "RM_MAIN_TRANSFLAGSCAN"
	%IDENT "V3.6a Calico"

	FUNCTION LONG RM_MAIN_TRANSFLAGSCAN(CDD_WINDOW_CDD SMG_WINDOW, &
		LONG MOPTION, LONG MLOOP, LONG MFLAG, STRING MVALUE)

	!
	! COPYRIGHT (C) 1987, 1988 BY
	!
	! Computer Management Center, Inc.
	! Idaho Falls, Idaho.
	!
	! This software is furnished under a license and may be used and
	! copied only in accordance with terms of such license and with
	! the inclusion of the above copyright notice.  This software or
	! any other copies thereof may not be provided or otherwise made
	! available to any other person.  No title to and ownership of
	! the software is hereby transferred.
	!
	! The information in this software is subject to change without
	! notice and should not be construed as a commitment by
	! Computer Management Center, Inc.
	!
	! CMC assumes no responsibility for the use or reliability of
	! its software on equipment which is not supported by CMC.
	!
	!++
	! Abstract:HELP
	!	.p
	!	This program scans RM Transaction Flags.
	!
	! Index:
	!
	! Option:
	!
	! Compile:
	!
	!	$ BAS RM_SOURCE:RM_MAIN_TRANSFLAGSCAN/LINE
	!	$ LIB FUNC_LIB:CMCFUN/REP RM_MAIN_TRANSFLAGSCAN
	!	$ DELETE RM_MAIN_TRANSFLAGSCAN.OBJ;*
	!
	! Author:
	!
	!	07/11/88 - Aaron Redd
	!
	! Modification history:
	!
	!	04/23/93 - Kevin Handy
	!		Clean up (Check)
	!
	!	04/15/95 - Kevin Handy
	!		(V3.6)
	!		Update to V3.6 coding standards
	!
	!	06/03/97 - Kevin Handy
	!		Use integer for #key
	!
	!	08/22/98 - Kevin Handy
	!		(V3.6a Calico)
	!		Update to V3.6a coding standards
	!--
	%PAGE

	OPTION SIZE = (INTEGER LONG, REAL GFLOAT)

	%INCLUDE "FUNC_INCLUDE:FUNCTION.HB"

	MAP (SCOPE) SCOPE_STRUCT SCOPE

	%INCLUDE "FUNC_INCLUDE:RM_WINDOW.INC"
	%INCLUDE "FUNC_INCLUDE:PD_WINDOW.INC"
	%INCLUDE "FUNC_INCLUDE:UTL_WINDOW.INC"
	%INCLUDE "FUNC_INCLUDE:MAIN_WINDOW.COM"

	%INCLUDE "SOURCE:[CDD.OPEN]CDD_WINDOW.HB"

	%INCLUDE "SOURCE:[RM.OPEN]RM_TRANSFLAG.HB"
	MAP (RM_TRANSFLAG)	RM_TRANSFLAG_CDD	RM_TRANSFLAG
	MAP (RM_TRANSFLAG_OLD) RM_TRANSFLAG_CDD RM_TRANSFLAG_OLD, RM_TRANSFLAG2

	%INCLUDE "SOURCE:[UTL.OPEN]UTL_TRANSTYPE.HB"
	MAP (UTL_TRANSTYPE)	UTL_TRANSTYPE_CDD	UTL_TRANSTYPE

	%INCLUDE "SOURCE:[PD.OPEN]PD_PRODUCT.HB"
	MAP (PD_PRODUCT)	PD_PRODUCT_CDD		PD_PRODUCT

	!
	! Common Areas
	!
	! These areas store information that is re-used between
	! calls to these functions.
	!
	COM (CH_RM_TRANSFLAG) &
		RM_TRANSFLAG.CH%, &
		RM_TRANSFLAG.READONLY%

	!
	! External functions
	!
	EXTERNAL LONG    FUNCTION MAIN_WINDOW
	EXTERNAL LONG    FUNCTION FUNC_TESTENTRY

	%PAGE

	ON ERROR GOTO 29000

	SELECT MOPTION

	!
	! Initialization
	!
	! This option is used to initialize the window structure,
	! set up the default values for add, and open all files
	! necessary that have not already been opened.
	!
	CASE OPT_INIT

		!*************************************************************
		! Set up information
		!*************************************************************
		!
		! Define SMG_WINDOW
		!
		SMG_WINDOW::DESCR = "Worksheet Transaction Flag"
		SMG_WINDOW::CURREC = -2%
		SMG_WINDOW::NHELP = "RM_MAIN_TRANSFLAGSCAN"
		SMG_WINDOW::HSIZE = 68%
		SMG_WINDOW::VSIZE = 14%
		SMG_WINDOW::HPOS  = 8%
		SMG_WINDOW::VPOS  = 4%
		SMG_WINDOW::FLAGS = 0%
		SMG_WINDOW::NITEMS= 5%

		SMG_WINDOW::NKEYS = 1%
		SMG_WINDOW::KNAME(0%)	= "Product_num"
			SMG_WINDOW::KFIELD(0%, 0%)	= 2%
			SMG_WINDOW::KFIELD(0%, 1%)	= 1%
			SMG_WINDOW::KFIELD(0%, 2%)	= 2%

		SMG_WINDOW::HVIEW	= 68%
		SMG_WINDOW::VVIEW	= 14%
		SMG_WINDOW::VHPOS	= 8%
		SMG_WINDOW::VVPOS	= 4%

		CALL READ_DEFAULTS(SMG_WINDOW) &
			IF INSTR(1%, " QV", MVALUE) <= 1%
700		!
		! Declare channels
		!
		IF RM_TRANSFLAG.CH% > 0%
		THEN
			!
			! Already open, set flag to read-only if was
			! that way from last time.
			!
			SMG_WINDOW::FLAGS = (SMG_WINDOW::FLAGS OR 2%) &
				IF RM_TRANSFLAG.READONLY%
			GOTO 790
		END IF

		!
		! Open main file (existing) for modification
		!
750		%INCLUDE "SOURCE:[RM.OPEN]RM_TRANSFLAG.CRE"
		RM_TRANSFLAG.READONLY% = 0%
		GOTO 790

760		!
		! If unable to open for modify, try to open with read
		! access only.
		!
		%INCLUDE "SOURCE:[RM.OPEN]RM_TRANSFLAG.OPN"
		SMG_WINDOW::FLAGS = (SMG_WINDOW::FLAGS OR 2%)
		RM_TRANSFLAG.READONLY% = -1%

		GOTO 790

770		!
		! File not open, so reset channel
		!
		CALL ASSG_FREECHANNEL(RM_TRANSFLAG.CH%)

		GOTO ExitFunction

790		SMG_WINDOW::CHAN  = RM_TRANSFLAG.CH%
		RESET #RM_TRANSFLAG.CH%
		GET #RM_TRANSFLAG.CH%, REGARDLESS

	!
	! Display the background
	!
	! This option is used to display the background information on the
	! screen.  It must first clear any junk on the screen, and then
	! write the background onto it.
	!
20100	CASE OPT_BACKGROUND

		SMG_STATUS% = SMG$BEGIN_DISPLAY_UPDATE(SMG_WINDOW::WNUMBER)

		SMG_STATUS% = SMG$ERASE_DISPLAY(SMG_WINDOW::WNUMBER)

		DATA	03,05, "(01) Product #", &
			04,05, "(02) Trans Type", &
			0, 0, ""

		RESTORE

		READ XPOS%, YPOS%, XSTR$
		I%=0%
		WHILE (XPOS% <> 0)
			I% = I% + 1%
			SMG_STATUS% = SMG$PUT_CHARS(SMG_WINDOW::WNUMBER, &
				XSTR$, XPOS%, YPOS%) &
				IF (SMG_WINDOW::HFLAG(I%) AND 2%)=0%
		READ XPOS%, YPOS%, XSTR$
		NEXT

		SMG_STATUS% = SMG$END_DISPLAY_UPDATE(SMG_WINDOW::WNUMBER)

	!
	! Enter/Display/Default
	!
	! This option is used to enter the data from the user, display data,
	! set defaults, and return the data back according to MFLAG.
	!
20200	CASE OPT_ENTRY

		TEMP$, TEMP1$ = TRM$(SCOPE::PRG_ITEM)
		TEMP$ = "View starting at" IF TEMP$ = "View"

		SCOPE::PRG_ITEM = "FLD" + FORMAT$(MLOOP, "<0>##")
 ReEnter:	SCOPE::SCOPE_EXIT = 0%

		SELECT MLOOP

		CASE 1%

			RM_TRANSFLAG::PRODUCT = ENTR_3STRING(SCOPE, &
				SMG_WINDOW::WNUMBER, &
				"3;25",	TEMP$, RM_TRANSFLAG::PRODUCT, &
				MFLAG, "'E", MVALUE)

			IF (SCOPE::SCOPE_EXIT = SMG$K_TRM_F14)
			THEN
				IF MAIN_WINDOW(PD_MAIN_PRODUCT.ID, "VX")=1%
				THEN
					RM_TRANSFLAG::PRODUCT = &
						PD_PRODUCT::PRODUCT_NUM
				END IF
				GOTO Reenter
			END IF

			IF MAIN_WINDOW(PD_MAIN_PRODUCT.ID, &
				"Q0" + RM_TRANSFLAG::PRODUCT) <> 1%
			THEN
				PD_PRODUCT::DESCRIPTION = STRING$(25%, 63%)
			END IF

			SMG_STATUS% = SMG$PUT_CHARS(SMG_WINDOW::WNUMBER, &
				LEFT(PD_PRODUCT::DESCRIPTION, 25%), &
				3%,40%, ,SMG$M_BOLD)

		CASE 2%

			RM_TRANSFLAG::TRANSTYPE = ENTR_3STRING(SCOPE, &
				SMG_WINDOW::WNUMBER, "04;25", TEMP$, &
				RM_TRANSFLAG::TRANSTYPE, MFLAG, "'E", &
				MVALUE)

			IF (SCOPE::SCOPE_EXIT = SMG$K_TRM_F14)
			THEN
				IF MAIN_WINDOW(UTL_MAIN_TRANSTYPE.ID, "V0") = 1%
				THEN
					RM_TRANSFLAG::TRANSTYPE = &
						UTL_TRANSTYPE::CODE
				END IF
				GOTO Reenter
			END IF

			IF MAIN_WINDOW(UTL_MAIN_TRANSTYPE.ID, &
				"Q0" + RM_TRANSFLAG::TRANSTYPE) <> 1%
			THEN
				UTL_TRANSTYPE::DESCRIPTION = STRING$(20%, 63%)
			END IF

			SMG_STATUS% = SMG$PUT_CHARS(SMG_WINDOW::WNUMBER, &
				UTL_TRANSTYPE::DESCRIPTION, &
				4%, 40%, ,SMG$M_BOLD)

		END SELECT

		SCOPE::PRG_ITEM = TEMP1$

	!
	! Test values
	!
20300	CASE OPT_TESTENTRY
		RM_MAIN_TRANSFLAGSCAN = 0%

		SELECT MLOOP

		CASE 1%
			!
			! Is the product number defined?
			!
			RM_MAIN_TRANSFLAGSCAN = FUNC_TESTENTRY( SMG_WINDOW, &
				RM_TRANSFLAG::PRODUCT, &
				PD_PRODUCT::DESCRIPTION, &
				"RM", MLOOP, "PRG", &
				"Product", PD_MAIN_PRODUCT.ID)

		CASE 2%
			!
			! Is the transaction type defined?
			!
			RM_MAIN_TRANSFLAGSCAN = FUNC_TESTENTRY( SMG_WINDOW, &
				RM_TRANSFLAG::TRANSTYPE, &
				UTL_TRANSTYPE::DESCRIPTION, &
				"RM", MLOOP, "PRG", &
				"Transaction Type", UTL_MAIN_TRANSTYPE.ID)

			!
			! Don't allow duplicate records
			!
			IF (MVALUE = "ADD")
			THEN
				GET #SMG_WINDOW::CHAN, &
					KEY#0% EQ RM_TRANSFLAG::PRODUCT + &
					RM_TRANSFLAG::TRANSTYPE, &
					REGARDLESS

				RM_MAIN_TRANSFLAGSCAN = 2%
				CALL ENTR_3MESSAGE(SCOPE, &
					"Record Already Exists", 0%)
			END IF

		END SELECT

	!
	! Set RM_TRANSFLAG_OLD value
	!
20500	CASE OPT_SETOLD
		RM_TRANSFLAG_OLD = RM_TRANSFLAG

	!
	! Restore RM_TRANSFLAG_OLD value
	!
	CASE OPT_RESETOLD
		RM_TRANSFLAG = RM_TRANSFLAG_OLD

	!
	! Set default value
	!
	CASE OPT_SETDEFAULT
		RM_TRANSFLAG2 = RM_TRANSFLAG

	!
	! Restore default value
	!
	CASE OPT_RESETDEFAULT
		RM_TRANSFLAG = RM_TRANSFLAG2

	!
	! View header
	!
	CASE OPT_VIEW
		SELECT MLOOP

		!
		! Title (One line only)
		!
		CASE 1%
			MVALUE = "  Product #      TransType"

		!
		! Positions of lines
		!
		CASE 2%
			MVALUE = "017"

		!
		! Convert current record into text
		!
		CASE 3%
			MVALUE = RM_TRANSFLAG::PRODUCT + " " + &
				RM_TRANSFLAG::TRANSTYPE

		END SELECT

	!
	! Find
	!
	CASE OPT_FIND
		SELECT MLOOP
		CASE 0%
			FIND #SMG_WINDOW::CHAN, &
				KEY#0% GE RM_TRANSFLAG::PRODUCT + &
				RM_TRANSFLAG::TRANSTYPE, &
				REGARDLESS

		END SELECT

	END SELECT

 ExitFunction:
	EXIT FUNCTION


29000	!
	! Trap errors
	!
	SELECT ERL
		!
		! Unable to open Read/Write
		!
		CASE 750%
			RESUME 760 IF ERR = 10%
			RM_MAIN_TRANSFLAGSCAN = ERR
			RESUME 770

		!
		! Unable to open Read/Only
		!
		CASE 760%
			RM_MAIN_TRANSFLAGSCAN = ERR
			RESUME 770

		!
		! Unable to reset
		!
		CASE 790%
			RESUME 32767

		!
		! Record does not already exist
		!
		CASE 20300%
			RESUME 32767 IF ERR = 155%

	END SELECT

	ON ERROR GO BACK

32767	END FUNCTION
	!+-+-+
	!++
	! Abstract:FLD002
	!	^*(02) Transaction Type\*
	!	.p
	!	The ^*Transaction Type\* field provides a means to enter a code for a
	!	particular ingredient which has been established in the Transaction Type
	!	Table.  By pressing ^*<List Choices>\* in this field, a list of valid
	!	transaction types will be displayed.
	!	.p
	!	The field will accommodate two (2) alphanumeric characters.
	!
	! Index:
	!	.x Transaction Type
	!	.x Type>Transaction
	!
	!--
	!+-+-+
	!++
	! Abstract:FLD001
	!	^*(01) Product Number\*
	!	.p
	!	The ^*Product Number\* field provides the means to enter an assigned number
	!	which identifies a specific product.
	!	.p
	!	This field accommodates up to fourteen (14) alphanumeric characters.
	!	.p
	!	Pressing ^*<List Choices>\* while the cursor in located at this field causes
	!	a list of valid Product numbers to be displayed.
	!
	! Index:
	!	.x Product Number
	!	.x Number>Product
	!
	!--
