1	%TITLE "Four Weeks Period Scan"
	%SBTTL "RM_RPRT_PERIOD"
	%IDENT "V3.6a Calico"

	!
	! COPYRIGHT (C) 1986, 1988 BY
	!
	! Computer Management Center, Inc.
	! Idaho Falls, Idaho.
	!
	! This software is furnished under a license and may be used and
	! copied only in accordance with terms of such license and with
	! the inclusion of the above copyright notice.  This software or
	! any other copies thereof may not be provided or otherwise made
	! available to any other person.  No title to and ownership of
	! the software is hereby transferred.
	!
	! The information in this software is subject to change without
	! notice and should not be construed as a commitment by
	! Computer Management Center, Inc.
	!
	! CMC assumes no responsibility for the use or reliability of
	! its software on equipment which is not supported by CMC.
	!
	!++
	! ID:RM002
	!
	! Abstract:HELP
	!	.p
	!	The ^*Four Weeks Period Scan\*  program provides the means to print out the
	!	Report Period. Contained in this report are the following fields:
	!	.lm 15
	!	.list 0,"*"
	!	.b
	!	.le
	!	Location
	!	.le
	!	Time
	!	.le
	!	Day of Week
	!	.le
	!	Date for each of the four weeks per day
	!	.le
	!	Average for each day
	!	.els
	!
	! Index:
	!	.x Report>Four Weeks Period Scan
	!	.x Four Weeks Period Scan>Report
	!
	! Option:
	!
	! Compile:
	!
	!	$ BAS RM_SOURCE:RM_RPRT_PERIOD/LINE
	!	$ LINK/EXE=RM_EXE: RM_RPRT_PERIOD, -
	!		FUNC_LIB:CMCLINK/OPTION
	!	$ DELETE RM_RPRT_PERIOD.OBJ;*
	!
	! Author:
	!
	!	09/30/87 - Frank F. Starman
	!
	! Modification History:
	!
	!	04/28/92 - Kevin Handy
	!		Clean up (check)
	!
	!	04/23/93 - Kevin Handy
	!		Clean up (Check)
	!
	!	06/11/93 - Kevin Handy
	!		Clean up (Check)
	!
	!	04/15/95 - Kevin Handy
	!		(V3.6)
	!		Update to V3.6 coding standards
	!
	!	09/13/96 - Kevin Handy
	!		Reformat source code.
	!
	!	06/03/97 - Kevin Handy
	!		Use integer for #key
	!
	!	08/22/98 - Kevin Handy
	!		(V3.6a Calico)
	!		Update to V3.6a coding standards
	!--
	%PAGE

	OPTION SIZE = (INTEGER LONG, REAL GFLOAT)

	!
	! Include files
	!
	%INCLUDE "FUNC_INCLUDE:FUNCTION.HB"

	MAP (SCOPE) SCOPE_STRUCT SCOPE

	%INCLUDE "SOURCE:[UTL.OPEN]UTL_REPORTX.HB"
	DECLARE			UTL_REPORTX_CDD		UTL_REPORTX

	%INCLUDE "SOURCE:[RM.OPEN]RM_HISTORY.HB"
	MAP	(RM_HISTORY)	RM_HISTORY_CDD		RM_HISTORY

	%INCLUDE "SOURCE:[UTL.OPEN]UTL_LOCATION.HB"
	MAP	(UTL_LOCATION)	UTL_LOCATION_CDD	UTL_LOCATION

	DECLARE STRING	FROM.ITEM, &
		TO.ITEM, &
		WLDCRD, &
		CATEGORY, &
		TO.DATE, &
		FROM.DATE, &
		HEADER.LINE1, &
		HEADER.LINE2, &
		HEADER.LINE3, &
		TEST_STORE, &
		TEST_DATE, &
		DIFFTIM

	DECLARE INTEGER	HOURS, &
		MINUT, &
		HALF.HOURS, &
		FROM.HOURS, &
		TO_DATE, &
		FROM_DATE

	DECLARE INTEGER CONSTANT PRINT.WIDTH = 202%

	DIM	INTEGER POSITION(95%,34%,1%), &
		REAL	COL.TOTAL(34%,1%), &
		STRING	DAY.WEEK(7%)

	%PAGE

	ON ERROR GOTO 19000


	!
 Init:	! Initilize report
	!
	CALL OUTP_INITFROMFILE(UTL_REPORTX, PRINT.WIDTH)

	GOTO ExitProgram IF UTL_REPORTX::STAT

	FROM.ITEM = EDIT$(UTL_REPORTX::OPTDEF(0%), 132%)
	TO.ITEM = EDIT$(UTL_REPORTX::OPTDEF(1%), 132%)
	WLDCRD = EDIT$(UTL_REPORTX::OPTDEF(2%), -1%)
	CATEGORY = EDIT$(UTL_REPORTX::OPTDEF(4%), 132%)
	TO.DATE = DATE_STOREDATE(EDIT$(UTL_REPORTX::OPTDEF(5%), 132%))


300	%INCLUDE "SOURCE:[RM.OPEN]RM_HISTORY.OPN"

310	%INCLUDE "SOURCE:[UTL.OPEN]UTL_LOCATION.OPN"

	DAY.WEEK(1%) = "M O N D A Y                "
	DAY.WEEK(2%) = "T U E S D A Y              "
	DAY.WEEK(3%) = "W E D N E S D A Y          "
	DAY.WEEK(4%) = "T H U R S D A Y            "
	DAY.WEEK(5%) = "F R I D A Y                "
	DAY.WEEK(6%) = "S A T U R D A Y            "
	DAY.WEEK(7%) = "S U N D A Y                "

	TO_DATE = DATE_DAYCODE(TO.DATE)
	FROM.DATE = DATE_INVDCODE(TO_DATE - 27%)
	FROM_DATE = TO_DATE - 27%

	HEADER.LINE1 = "PERIOD FROM "+PRNT_DATE(FROM.DATE,8%)+" TO "+ &
		PRNT_DATE(TO.DATE,8%)
	HEADER.LINE2 = ""
	HEADER.LINE2 = HEADER.LINE2+DAY.WEEK(DATE_DAYOFWEEK(FROM_DATE+I)) &
		FOR I% = 0% TO 6%
	HEADER.LINE2 = "TIME   "+HEADER.LINE2 + "   AVE"

	HEADER.LINE3 = SPACE$(7%)

	FOR I% = 0% TO 6%
		FOR J% = 0% TO 3%
			HEADER.LINE3 = HEADER.LINE3 + &
				RIGHT(DATE_INVDCODE(FROM_DATE+7%*J%+I%),5%) +" "
		NEXT J%

		HEADER.LINE3 = HEADER.LINE3 + "  AVE  "
	NEXT I%

 ReportTitle:
	!
	! Title
	!
	TITLE$(1%) = "HALF  HOUR"

	SELECT CATEGORY

	CASE "01"
		TITLE$(1%) = TITLE$(1%) + "  PROJECTED  SALES"

	CASE "02"
		TITLE$(1%) = TITLE$(1%) + "  ACTUAL  SALES"

	CASE "03"
		TITLE$(1%) = TITLE$(1%) + "  PROJECTED  LABOR"

	CASE "04"
		TITLE$(1%) = TITLE$(1%) + "  ACTUAL  LABOR"

	END SELECT

	TITLE$(2%) = "Restaurant Management System"
	TITLE$(3%) = ""

	TITLE$(5%) = HEADER.LINE2
	TITLE$(6%) = HEADER.LINE3

	%PAGE

17000	!******************************************************************
	! OUTPUT REPORT
	!******************************************************************

	IF FROM.ITEM = ""
	THEN
		RESET #RM_HISTORY.CH%
	ELSE
		FIND #RM_HISTORY.CH%, KEY#0% GE CATEGORY + FROM.ITEM,REGARDLESS
	END IF

 GetNextRec:
17020	!
	! Main loop starts here
	!
	GOTO ExitProgram IF UTL_REPORTX::STAT

	!
	! Get next record
	!
	GET #RM_HISTORY.CH%, REGARDLESS

	TEST_STORE = RM_HISTORY::LOCATION

	GOTO 17350 IF WLDCRD <>"" AND &
		COMP_STRING(EDIT$(RM_HISTORY::LOCATION,-1%), WLDCRD) = 0%

	GOTO ExitTotal IF (RM_HISTORY::LOCATION > TO.ITEM) AND &
		TO.ITEM <> ""

	!
	! Set variables to zero
	!
	GOSUB 18000

17030	UTL_LOCATION::LOCNAME = STRING$(40%,63%)
	GET #UTL_LOCATION.CH%, KEY#0% EQ RM_HISTORY::LOCATION,REGARDLESS

17040	TITLE$(4%) = LEFT("==== "+RM_HISTORY::LOCATION+" "+ &
		EDIT$(UTL_LOCATION::LOCNAME,128%)+" "+ &
		SPACE$(PRINT.WIDTH),PRINT.WIDTH-37%)+" "+HEADER.LINE1


	!
	! Create array to print
	!
	FOR COLUMN% = 0% TO 27%

		!
		! Pick up a record
		!
		GOSUB 18100

		COL% = 5%*COLUMN%-34%*INT(COLUMN%/7%)

		DIFFTIM = TIME_ADD(RM_HISTORY::TIME_TO,"-", &
				PRNT_TIME(RM_HISTORY::TIME_FROM,1%))
		HOURS   = VAL%(LEFT(DIFFTIM,2%))
		MINUT   = VAL%(MID(DIFFTIM,4%,2%))
		HALF.HOURS = 2% * HOURS + SGN(MINUT) + &
			INT(MINUT/31%)
		HALF.HOURS = 48% IF HOURS=0%

		DIFFTIM = TIME_ADD(RM_HISTORY::TIME_FROM,"-","00:00:00")
		HOURS   = VAL%(LEFT(DIFFTIM,2%))
		MINUT   = VAL%(MID(DIFFTIM,4%,2%))
		FROM.HOURS = 2% * HOURS + SGN(MINUT) + &
			INT(MINUT/31%)

		I% = 0%

		FOR LIN% = FROM.HOURS TO FROM.HOURS + HALF.HOURS - 1%
			POSITION(LIN%,COL%,0%) = &
				RM_HISTORY::AMOUNT_QTY(I)
			POSITION(LIN%,COL%,1%) = 1%
			I% = I% + 1%
		NEXT LIN%

		LINE.TOP% = FROM.HOURS &
			IF LINE.TOP% > FROM.HOURS

		LINE.BOT% = LIN% &
			IF LINE.BOT% < LIN%

	NEXT COLUMN%

17300	!
	! Print array POSITION
	!

	CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), "", 999%)

	FOR LIN% = LINE.TOP% TO LINE.BOT%

		LINE.TOTAL = 0.
		TEXT$ = LEFT(TIME_ADD("00:00:00","+",FORMAT$(30%*(LIN%+1%), &
			":####:")),5%)+" "
		FOR COLUMN% = 0% TO 34%
			CLM% = 5%*INT(COLUMN%/5%)+4%

			IF CLM% = COLUMN%
			THEN
				AVE = 0.
				AVE = AVE + POSITION(LIN%,J%,1%) &
					FOR J% = CLM%-4% TO CLM%

				IF AVE <> 0.
				THEN
					TEXT$ = TEXT$ +	FORMAT$(POSITION(LIN%, &
						COLUMN%,0%)/AVE,"####.#|")
				ELSE
					TEXT$ = TEXT$ +	"      |"
				END IF

				LINE.TOTAL = LINE.TOTAL + &
					POSITION(LIN%,COLUMN%,0%)

			ELSE
				IF POSITION(LIN%,COLUMN%,1%)=1%
				THEN
					COL.TOTAL(COLUMN%,1%) = 1.

					IF CATEGORY="03" OR CATEGORY="04"
					THEN
						POSITION(LIN%,CLM%,0%) = &
							POSITION(LIN%,CLM%,0%) + &
							0.01*POSITION(LIN%,COLUMN%,0%)

						COL.TOTAL(COLUMN%,0%) = &
							COL.TOTAL(COLUMN%,0%) + &
							0.01*POSITION(LIN%,COLUMN%,0%)

						TEXT$ = TEXT$ + &
						FORMAT$(0.01*POSITION(LIN%, &
							COLUMN%,0%),"##.##")
					ELSE
						POSITION(LIN%,CLM%,0%) = &
							POSITION(LIN%,CLM%,0%) + &
							POSITION(LIN%,COLUMN%,0%)

						COL.TOTAL(COLUMN%,0%) = &
							COL.TOTAL(COLUMN%,0%) + &
							POSITION(LIN%,COLUMN%,0%)

						TEXT$ = TEXT$ + &
						FORMAT$(POSITION(LIN%, &
							COLUMN%,0%),"#####")
					END IF

				ELSE
					TEXT$ = TEXT$ + "     "
				END IF
			END IF

		NEXT COLUMN%

		AVE = 0.
		AVE = AVE + POSITION(LIN%,J%,1%) &
			FOR J% = 0% TO 34%

		IF AVE <> 0.
		THEN
			TEXT$ = TEXT$ +	FORMAT$(LINE.TOTAL/AVE,"####.##")
		END IF

		CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), TEXT$, -50%)

	NEXT LIN%

	CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), "", -50%)

	AVE,TOTAL = 0.

	FOR I% = 4% TO 35% STEP 5%
		DIV = 0.

		FOR J% = I%-4% TO I%-1%
			COL.TOTAL(I%,0%) = COL.TOTAL(I%,0%) + COL.TOTAL(J%,0%)
			DIV = DIV + COL.TOTAL(J%,1%)
		NEXT J%

		COL.TOTAL(I%,0%) = COL.TOTAL(I%,0%)/DIV IF DIV <> 0.
		AVE = AVE + DIV
	NEXT I%

	TEXT$ = "TOTAL"

	FOR COLUMN% = 0% TO 34% STEP 2%
		CLM% = 5%*INT(COLUMN%/5%)+4%

		IF COLUMN% = CLM%
		THEN
			TEXT$ = TEXT$ + &
				FORMAT$(COL.TOTAL(COLUMN%,0%),"<%>####.#     ")
		ELSE
			IF CATEGORY="03" OR CATEGORY="04"
			THEN
				TEXT$ = TEXT$ + FORMAT$(COL.TOTAL(COLUMN%,0%), &
					"<%>##.##    ")
			ELSE
				TEXT$ = TEXT$ + FORMAT$(COL.TOTAL(COLUMN%,0%), &
					"<%>#####    ")
			END IF

			TOTAL = TOTAL +COL.TOTAL(COLUMN%,0%)
			TEXT$ = TEXT$ + "  " IF CLM%-1% = COLUMN%

		END IF

	NEXT COLUMN%

	CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), TEXT$, -50%)

	TEXT$ = "TOTAL     "

	FOR COLUMN% = 1% TO 33% STEP 2%
		CLM% = 5%*INT(COLUMN%/5%)+4%

		IF COLUMN% = CLM%
		THEN
			TEXT$ = TEXT$ + &
				FORMAT$(COL.TOTAL(COLUMN%,0%),"<%>####.#     ")
		ELSE
			IF CATEGORY="03" OR CATEGORY="04"
			THEN
				TEXT$ = TEXT$ + FORMAT$(COL.TOTAL(COLUMN%,0%), &
					"<%>##.##    ")
			ELSE
				TEXT$ = TEXT$ + FORMAT$(COL.TOTAL(COLUMN%,0%), &
					"<%>#####    ")
			END IF

			TEXT$ = TEXT$ + "  " IF CLM%-1% = COLUMN%
			TOTAL = TOTAL + COL.TOTAL(COLUMN%,0%)
		END IF

	NEXT COLUMN%

	TEXT$ = TEXT$ + FORMAT$(TOTAL/AVE,"<%>####.##") IF AVE<>0.

	CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), TEXT$, -50%)

	GOTO ExitProgram IF UTL_REPORTX::STAT

17350	!
	! Try for next record
	!

	GET #RM_HISTORY.CH%, KEY#0% GE CATEGORY+TEST_STORE+"99999999",REGARDLESS

	GOTO ExitTotal IF RM_HISTORY::CATEGORY <> CATEGORY

	GOTO GetNextRec

 ExitTotal:
17400	!
	! Handle end of report
	!

 ExitProgram:
	CALL OUTP_FINISH(UTL_REPORTX)

	!
	! Exit to next program or menu
	!
	IF TRM$(UTL_REPORTX::NEXTRUN) = ""
	THEN
		CALL SUBR_3EXITPROGRAM(SCOPE, "", "")
	ELSE
		CALL SUBR_3EXITPROGRAM(SCOPE, "RUN " + UTL_REPORTX::NEXTRUN, "")
	END IF

	%PAGE

18000	!
	! Set initial values
	!
	LINE.TOP% = 96%
	LINE.BOT% = -1%

	FOR J% = 0% TO 34%
		FOR K% = 0% TO 1%
			COL.TOTAL(J%,K%) = 0.
			POSITION(I%,J%,K%) = 0% FOR I% = 0% TO 95%
		NEXT K%
	NEXT J%

	RETURN

18100	!
	! Get Next Date
	!
	TEST_DATE = DATE_INVDCODE(FROM_DATE + COLUMN%)

	FIND #RM_HISTORY.CH%, KEY#0% EQ CATEGORY+TEST_STORE+TEST_DATE, &
		REGARDLESS

	GET #RM_HISTORY.CH%, REGARDLESS

	RETURN

 HelpError:
	!******************************************************************
	! Help Message for an error
	!******************************************************************
	CALL HELP_34MESSAGE(SCOPE, NUM1$(ERL) + " " + ERT$(ERR), &
		"E", ERN$, FILENAME$, NUM1$(ERR))
	UTL_REPORTX::STAT = -1%
	GOTO ExitProgram

	%Page

19000	!******************************************************************
	! ERROR TRAPPING
	!******************************************************************

	SELECT ERR
	CASE 154%	! Locked record
		SLEEP 5%
		RESUME
	END SELECT

	FILENAME$ = ""
	SELECT ERL

	CASE 300%
		FILENAME$ = "RM_HISTORY"

	CASE 310%
		FILENAME$ = "UTL_LOCATION"

	CASE 17000%
		CALL ENTR_3MESSAGE(SCOPE, &
			"Unable to find beginning record!", 0%)
		RESUME ExitProgram

	CASE 17020%	! End of file
		RESUME ExitTotal IF ERR = 11%
		FILENAME$ = "RM_HISTORY"

	CASE 17030%	! End of file
		RESUME 17040 IF ERR = 155%
		FILENAME$ = "UTL_LOCATION"

	CASE 18100%	! Can't find next date
		IF ERR = 155%
		THEN
			IF COLUMN% >35%
			THEN
				RESUME 17300
			!
			! Try next
			!
			ELSE
				COLUMN%  = COLUMN% + 1%
				RESUME
			END IF
		END IF
		FILENAME$ = "RM_HISTORY"

	CASE 17350%	! Can't find next store
		RESUME ExitTotal

	END SELECT

	!
	! Untrapped error
	!
	RESUME HelpError

32767	END
	!+-+-+
	!++
	! Abstract:FLD01
	!	^*(01) From Location\*
	!	.p
	!	A ^*From Location\* value entered in this field causes the printing of the
	!	report to begin with the selected location.
	!	.p
	!	A blank field causes the report to start with the first location record in
	!	the file.
	!
	! Index:
	!	.x From Location
	!	.x Location>From
	!
	!--
	!+-+-+
	!++
	! Abstract:FLD02
	!	^*(02) To Location\*
	!	.p
	!	A ^*To Location\* value entered in this field causes the printing of the
	!	report to end with the selected location.
	!	.p
	!	A blank field causes the report to end with the last location record in
	!	the file
	!
	! Index:
	!	.x To Location
	!	.x Location>To
	!
	!--
	!+-+-+
	!++
	! Abstract:FLD03
	!	^*(03) Wildcard\*
	!	.p
	!	The ^*Wildcard\* setting enables the user to print a report including selected
	!	Locations only using the wildcarding technique.
	!
	! Index:
	!	.x Wildcard
	!
	!--
	!+-+-+
	!++
	! Abstract:FLD05
	!	^*(05) Item\*
	!	.p
	!	The ^*Item\* field provides the means to enter the specific item or items which
	!	will be printed in the report.  Wildcarding techniques may be used to specify
	!	more than one item.
	!
	! Index:
	!	.x Item
	!
	!--
	!+-+-+
	!++
	! Abstract:FLD06
	!	^*(06) To Date\*
	!	.p
	!	The value entered in the ^*To Date\* field causes the report to end with the
	!	the selected date.
	!	.p
	!	A blank setting causes the report to end with the last date in the file.
	!
	! Index:
	!	.x To Date
	!	.x Date>To
	!
	!--
