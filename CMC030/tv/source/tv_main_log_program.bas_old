1	%TITLE "TV_MAIN_LOG_PROGRAM - TV Traffic Program Maintenance"
	%SBTTL "TV system"
	%IDENT "V3.6a Calico"

	FUNCTION LONG TV_MAIN_LOG_PROGRAM(CDD_WINDOW_CDD SMG_WINDOW, &
		LONG MOPTION, LONG MLOOP, LONG MFLAG, STRING MVALUE)

	!
	! COPYRIGHT (C) 1987, 1988 BY
	!
	! Computer Management Center, Inc.
	! Idaho Falls, Idaho.
	!
	! This software is furnished under a license and may be used and
	! copied only in accordance with terms of such license and with
	! the inclusion of the above copyright notice.  This software or
	! any other copies thereof may not be provided or otherwise made
	! available to any other person.  No title to and ownership of
	! the software is hereby transferred.
	!
	! The information in this software is subject to change without
	! notice and should not be construed as a commitment by
	! Computer Management Center, Inc.
	!
	! CMC assumes no responsibility for the use or reliability of
	! its software on equipment which is not supported by CMC.
	!
	!++
	!
	! Abstract:
	!
	!	This program maintains the TV Traffic Program file.
	!
	! Index:
	!
	!	PROGRAM
	!
	! Input:
	!
	!
	! Output:
	!
	!
	! Example:
	!
	!
	! Environment:
	!
	!	VAX/VMS BASIC+2 V4.4
	!
	! Compile:
	!
	!	$ BAS TV_SOURCE:TV_MAIN_LOG_PROGRAM/LINE
	!	$ LIB/REP FUNC_LIB:CMCFUN TV_MAIN_LOG_PROGRAM
	!	$ DELETE TV_MAIN_LOG_PROGRAM.OBJ;*
	!
	! Author:
	!
	!	11/27/87 - Kevin Handy
	!
	! Modification history:
	!
	!	05/13/88 - Aaron Redd
	!		Modified to allow R/O open of file if R/W open fails.
	!
	!	04/15/95 - Kevin Handy
	!		(V3.6)
	!		Update to V3.6 coding standards
	!
	!	08/22/98 - Kevin Handy
	!		(V3.6a Calico)
	!		Update to V3.6a coding standards
	!--
	%PAGE

	!
	! Set up compiling options
	!
	OPTION SIZE = (REAL GFLOAT, INTEGER LONG)

	%INCLUDE "FUNC_INCLUDE:FUNCTION.HB"

	MAP (SCOPE) SCOPE_STRUCT SCOPE

	%INCLUDE "FUNC_INCLUDE:TV_WINDOW.INC"
	%INCLUDE "FUNC_INCLUDE:MAIN_WINDOW.COM"

	!
	! Map's
	!
	MAP (SCHED_DATE) SCHED_DATE$ = 8%

 !	%INCLUDE %FROM %CDD "CDD$TOP.CDD.CDD_WINDOW"
	%INCLUDE "SOURCE:[CDD.OPEN]CDD_WINDOW.HB"

 !	%INCLUDE %FROM %CDD "CDD$TOP.TV.TV_LOG_TYPE"
	%INCLUDE "SOURCE:[TV.OPEN]TV_LOG_TYPE.HB"
	MAP (TV_LOG_TYPE)		TV_LOG_TYPE_CDD		TV_LOG_TYPE

 !	%INCLUDE %FROM %CDD "CDD$TOP.TV.TV_LOG_SOURCE"
	%INCLUDE "SOURCE:[TV.OPEN]TV_LOG_SOURCE.HB"
	MAP (TV_LOG_SOURCE)		TV_LOG_SOURCE_CDD	TV_LOG_SOURCE

 !	%INCLUDE %FROM %CDD "CDD$TOP.TV.TV_LOG_PROGRAM"
	%INCLUDE "SOURCE:[TV.OPEN]TV_LOG_PROGRAM.HB"
	MAP (TV_LOG_PROGRAM)		TV_LOG_PROGRAM_CDD	TV_LOG_PROGRAM
	MAP (TV_LOG_PROGRAM_OLD)	TV_LOG_PROGRAM_CDD	TV_LOG_PROGRAM_OLD, TV_LOG_PROGRAM2

	!
	! Common Areas
	!
	! These areas store information that is re-used between
	! calls to these functions.
	!
	COM (CH_TV_LOG_PROGRAM) &
		TV_LOG_PROGRAM.CH%, &
		TV_LOG_PROGRAM.READONLY%

	!
	! External functions
	!
	EXTERNAL STRING FUNCTION READ_SET

	EXTERNAL LONG   FUNCTION MAIN_WINDOW
	EXTERNAL LONG   FUNCTION MAIN_JOURNAL

	!
	! Declare variables
	!
	DECLARE RFA TEMP_RFA

	%PAGE

	ON ERROR GOTO 29000

	SELECT MOPTION

	!
	! Initialization
	!
	! This option is used to initialize the window structure,
	! set up the default values for add, and open all files
	! necessary that have not already been opened.
	!
	CASE OPT_INIT

		!
		! Define window
		!
		SMG_WINDOW::DESCR = "TV Traffic Program Maintenance"
		SMG_WINDOW::NHELP = "TV_MAST_LOG"
		SMG_WINDOW::HSIZE = 78%
		SMG_WINDOW::VSIZE = 18%
		SMG_WINDOW::HVIEW = 130%
		SMG_WINDOW::VVIEW = 18%
		SMG_WINDOW::HPOS  = 2%
		SMG_WINDOW::VPOS  = 2%
		SMG_WINDOW::NITEMS= 8%
		SMG_WINDOW::FLAGS = 0%

		SMG_WINDOW::NKEYS = 2%
		SMG_WINDOW::KNAME(0%) = "Program_number"
			SMG_WINDOW::KFIELD(0%, 0%) = 1%
			SMG_WINDOW::KFIELD(0%, 1%) = 1%
		SMG_WINDOW::KNAME(1%) = "Time"
			SMG_WINDOW::KFIELD(1%, 0%) = 1%
			SMG_WINDOW::KFIELD(1%, 1%) = 2%

		!
		! Load in defaults
		!
		CALL READ_DEFAULTS(SMG_WINDOW) &
			IF INSTR(1%, " QV", MVALUE) <= 1%

700		!
		! Declare channels
		!
		IF TV_LOG_PROGRAM.CH% > 0%
		THEN
			!
			! Already open, set flag to read-only if was
			! that way from last time.
			!
			SMG_WINDOW::FLAGS = (SMG_WINDOW::FLAGS OR 2%) &
				IF TV_LOG_PROGRAM.READONLY%
			GOTO 790
		END IF

		!
		! Open main file (existing) for modification
		!
750		%INCLUDE "SOURCE:[TV.OPEN]TV_LOG_PROGRAM.CRE"
		TV_LOG_PROGRAM.READONLY% = 0%
		GOTO 790

760		!
		! If unable to open for modify, try to open with read
		! access only.
		!
		%INCLUDE "SOURCE:[TV.OPEN]TV_LOG_PROGRAM.OPN"
		SMG_WINDOW::FLAGS = (SMG_WINDOW::FLAGS OR 2%)
		TV_LOG_PROGRAM.READONLY% = -1%

		GOTO 790

770		!
		! File not open, so reset channel
		!
		CALL ASSG_FREECHANNEL(TV_LOG_PROGRAM.CH%)

		EXIT FUNCTION

790		SMG_WINDOW::CHAN  = TV_LOG_PROGRAM.CH%
		RESET #TV_LOG_PROGRAM.CH%
		GET #TV_LOG_PROGRAM.CH%, REGARDLESS

	!
	! Modify the menu
	!
	CASE OPT_OPTLIST
		MVALUE = MVALUE + " breaKs"

	!
	! Optional menu items
	!
	CASE OPT_MOREMENU
		SELECT SCOPE::PRG_ITEM

		!
		! Line option
		!
		CASE "breaKs"
			!
			! Make sure there is a header
			!
			TEMP_RFA = GETRFA(TV_LOG_PROGRAM.CH%)

			TV_MAIN_LOG_PROGRAM = MAIN_JOURNAL(TV_MAIN_LOG_BREAK.ID, "")

		END SELECT
	!
	! Display the background
	!
	! This option is used to display the background information on the
	! screen.  It must first clear any junk on the screen, and then
	! write the background onto it.
	!
20100	CASE OPT_BACKGROUND

		SMG_STATUS% = SMG$BEGIN_DISPLAY_UPDATE(SMG_WINDOW::WNUMBER)

		SMG_STATUS% = SMG$ERASE_DISPLAY(SMG_WINDOW::WNUMBER)

		DATA	1,  4, "(01) Program Number", &
			3,  4, "(02) Time", &
			4,  4, "(03) Title", &
			5,  4, "(04) Source", &
			6,  4, "(05) Type", &
			7,  4, "(06) Length", &
			8,  4, "(07) Comment", &
			9,  4, "(08) Cutaway", &
			0,  0, ""

		RESTORE

		READ XPOS%, YPOS%, XSTR$

		WHILE (XPOS% <> 0)
			SMG_STATUS% = SMG$PUT_CHARS( &
				SMG_WINDOW::WNUMBER,XSTR$, XPOS%, YPOS%)
			READ XPOS%, YPOS%, XSTR$
		NEXT

		SMG_STATUS% = SMG$END_DISPLAY_UPDATE(SMG_WINDOW::WNUMBER)

	!
	! Enter/Display/Default
	!
	! This option is used to enter the data from the user, display data,
	! set defaults, and return the data back according to MFLAG.
	!
20200	CASE OPT_ENTRY

		TEMP$, TEMP1$ = TRM$(SCOPE::PRG_ITEM)
		TEMP$ = "View starting at" IF TEMP$ = "View"

		SCOPE::PRG_ITEM = "FLD" + FORMAT$(MLOOP, "<0>##")

 Eloop:		SCOPE::SCOPE_EXIT = 0%

		SELECT MLOOP

		CASE 1%
			TV_LOG_PROGRAM::PRGNUM = ENTR_3STRING(SCOPE, &
				SMG_WINDOW::WNUMBER, "1;27", TEMP$, &
				TV_LOG_PROGRAM::PRGNUM, MFLAG, "'E", MVALUE)

		CASE 2%
			TV_LOG_PROGRAM::START_TIME = ENTR_3TIME(SCOPE, &
				SMG_WINDOW::WNUMBER, "3;27", TEMP$, &
				TV_LOG_PROGRAM::START_TIME, MFLAG, "H", MVALUE)

		CASE 3%
			TV_LOG_PROGRAM::TITLE = ENTR_3STRING(SCOPE, &
				SMG_WINDOW::WNUMBER, "4;27", TEMP$, &
				TV_LOG_PROGRAM::TITLE, MFLAG, "'E", MVALUE)

		CASE 4%
			TV_LOG_PROGRAM::SOURCE = ENTR_3STRING(SCOPE, &
				SMG_WINDOW::WNUMBER, "5;27", TEMP$, &
				TV_LOG_PROGRAM::SOURCE, MFLAG, "'E", MVALUE)

			IF SCOPE::SCOPE_EXIT = SMG$K_TRM_F14
			THEN
				TV_LOG_PROGRAM::SOURCE = TV_LOG_SOURCE::SOURCE &
					IF MAIN_WINDOW(TV_MAIN_LOG_SOURCE.ID, "V0  ") = 1%
				GOTO ELoop
			END IF

		CASE 5%
			TV_LOG_PROGRAM::PTYPE = ENTR_3STRING(SCOPE, &
				SMG_WINDOW::WNUMBER, "6;27", TEMP$, &
				TV_LOG_PROGRAM::PTYPE, MFLAG, "'E", MVALUE)

			IF SCOPE::SCOPE_EXIT = SMG$K_TRM_F14
			THEN
				TV_LOG_PROGRAM::PTYPE = TV_LOG_TYPE::LTYPE &
					IF MAIN_WINDOW(TV_MAIN_LOG_TYPE.ID, "V0  ") = 1%
				GOTO ELoop
			END IF

		CASE 6%
			TV_LOG_PROGRAM::LENGTH = ENTR_3TIME(SCOPE, &
				SMG_WINDOW::WNUMBER, "7;27", TEMP$, &
				TV_LOG_PROGRAM::LENGTH, MFLAG, "H", MVALUE)

		CASE 7%
			TV_LOG_PROGRAM::COMMENT = ENTR_3STRING(SCOPE, &
				SMG_WINDOW::WNUMBER, "8;27", TEMP$, &
				TV_LOG_PROGRAM::COMMENT, MFLAG, "'E", MVALUE)

		CASE 8%
			TV_LOG_PROGRAM::CUTAWAY = ENTR_3STRING(SCOPE, &
				SMG_WINDOW::WNUMBER, "9;27", TEMP$, &
				TV_LOG_PROGRAM::CUTAWAY, MFLAG, "'E", MVALUE)

		END SELECT

		SCOPE::PRG_ITEM = TEMP1$

	!
	! Test values
	!
20300	CASE OPT_TESTENTRY

		TV_MAIN_LOG_PROGRAM = 0%

		SELECT MLOOP

		CASE 1%
			IF TV_LOG_PROGRAM::PRGNUM = ""
			THEN
				TV_MAIN_LOG_PROGRAM = 1%
			ELSE
				IF (MVALUE = "ADD")
				THEN
					GET #TV_LOG_PROGRAM.CH%, &
						KEY#0 EQ TV_LOG_PROGRAM::PRGNUM, &
						REGARDLESS
					TV_MAIN_LOG_PROGRAM = 2%
					CALL ENTR_3MESSAGE(SCOPE, &
						"Record Already Exists", 1%)
				END IF
			END IF

		CASE 4%
			IF TV_LOG_PROGRAM::SOURCE = ""
			THEN
				TV_MAIN_LOG_PROGRAM = 1%
			ELSE
				!
				! Is the input defined?
				!
				DISPLAY_DESCR$ = STRING$(40%,63%)
				IF MAIN_WINDOW(TV_MAIN_LOG_SOURCE.ID,"Q0"+TV_LOG_PROGRAM::SOURCE) <> 1%
				THEN
					!
					! See if they are allowing undefined inputs
					!
					V$ = LEFT(READ_SET(TRM$(SCOPE::PRG_PROGRAM), "CODE"), 1%)
					V$ = LEFT(READ_SET("TV_ALLOW", "CODE"), 1%) &
						IF V$ = ""

					IF V$ = "N"
					THEN
						!
						! Don't let them get past is we don't
						! allow them to enter undefined values.
						!
						TV_MAIN_LOG_PROGRAM = 1%
						CALL ENTR_3MESSAGE(SCOPE, &
							"Program source is undefined ", 1%)
					ELSE
						!
						! Verify that they really want to
						! enter an undefined value.
						!
						V$ = ENTR_3YESNO(SCOPE, SMG_WINDOW::WNUMBER, &
							"", "Source code is " + &
							"undefined, confirm entry " + &
							"then press <DO> ", &
							"N", 0%, "", "")
						TV_MAIN_LOG_PROGRAM = 1% IF V$ = "N"
					END IF
				ELSE
					DISPLAY_DESCR$= TV_LOG_SOURCE::DESCR

				SMG_STATUS% = SMG$PUT_CHARS(SMG_WINDOW::WNUMBER, &
					DISPLAY_DESCR$,5%,32%, ,SMG$M_BOLD)

			END IF
			END IF

		CASE 5%

			IF TV_LOG_PROGRAM::PTYPE = ""
			THEN
				TV_MAIN_LOG_PROGRAM = 1%
			ELSE
				!
				! Is the input defined?
				!
				DISPLAY_DESCR$ = STRING$(40%,63%)
				IF MAIN_WINDOW(TV_MAIN_LOG_TYPE.ID,"Q0"+TV_LOG_PROGRAM::PTYPE) <> 1%
				THEN
					!
					! See if they are allowing undefined inputs
					!
					V$ = LEFT(READ_SET(TRM$(SCOPE::PRG_PROGRAM), "CODE"), 1%)
					V$ = LEFT(READ_SET("TV_ALLOW", "CODE"), 1%) &
						IF V$ = ""

					IF V$ = "N"
					THEN
						!
						! Don't let them get past is we don't
						! allow them to enter undefined values.
						!
						TV_MAIN_LOG_PROGRAM = 1%
						CALL ENTR_3MESSAGE(SCOPE, &
							"Program type is undefined ", 1%)
					ELSE
						!
						! Verify that they really want to
						! enter an undefined value.
						!
						V$ = ENTR_3YESNO(SCOPE, SMG_WINDOW::WNUMBER, &
							"", "Type code is " + &
							"undefined, confirm entry " + &
							"then press <DO> ", &
							"N", 0%, "", "")
						TV_MAIN_LOG_PROGRAM = 1% IF V$ = "N"
					END IF
				ELSE
					DISPLAY_DESCR$= TV_LOG_TYPE::DESCR

				SMG_STATUS% = SMG$PUT_CHARS(SMG_WINDOW::WNUMBER, &
					DISPLAY_DESCR$,6%,32%, ,SMG$M_BOLD)
			END IF
			END IF

		END SELECT


	CASE OPT_DISPLAY

		DISPLAY_DESCR$ = STRING$(40%,63%)
		DISPLAY_DESCR$ = TV_LOG_SOURCE::DESCR &
			IF MAIN_WINDOW(TV_MAIN_LOG_SOURCE.ID,"Q0"+TV_LOG_PROGRAM::SOURCE) = 1%
		!
		! Display name (ALSO IN TESTENTRY)
		!
		SMG_STATUS% = SMG$PUT_CHARS(SMG_WINDOW::WNUMBER, &
			DISPLAY_DESCR$,5%,32%, ,SMG$M_BOLD)

		DISPLAY_DESCR$ = STRING$(40%,63%)
		DISPLAY_DESCR$ = TV_LOG_TYPE::DESCR &
			IF MAIN_WINDOW(TV_MAIN_LOG_TYPE.ID,"Q0"+TV_LOG_PROGRAM::PTYPE) = 1%
		!
		! Display name (ALSO IN TESTENTRY)
		!
		SMG_STATUS% = SMG$PUT_CHARS(SMG_WINDOW::WNUMBER, &
			DISPLAY_DESCR$,6%,32%, ,SMG$M_BOLD)

	!
	! Set TV_LOG_PROGRAM_OLD value
	!
20500	CASE OPT_SETOLD

		TV_LOG_PROGRAM_OLD = TV_LOG_PROGRAM

	!
	! Restore TV_LOG_PROGRAM_OLD value
	!
	CASE OPT_RESETOLD

		TV_LOG_PROGRAM = TV_LOG_PROGRAM_OLD

	!
	! Set default value
	!
	CASE OPT_SETDEFAULT

		TV_LOG_PROGRAM2 = TV_LOG_PROGRAM

	!
	! Restore default value
	!
	CASE OPT_RESETDEFAULT

		TV_LOG_PROGRAM = TV_LOG_PROGRAM2
		TV_LOG_PROGRAM::DATE = SCHED_DATE$

	!
	! View header
	!
	CASE OPT_VIEW

		SELECT MLOOP

		!
		! Title (One line only)
		!
		CASE 1%
			MVALUE = "  Program    " + &
				"Time     " + &
				"Title                        Sour Type " + &
				"Length   Comment"

		!
		! Positions of lines
		!
		CASE 2%
			MVALUE = "013,024,053,058,063,072"

		!
		! Convert current record into text
		!
		CASE 3%
			MVALUE = TV_LOG_PROGRAM::PRGNUM + " " + &
				PRNT_TIME(TV_LOG_PROGRAM::START_TIME, 8%)+ " " + &
				LEFT$(TV_LOG_PROGRAM::TITLE, 28%) + " " + &
				TV_LOG_PROGRAM::SOURCE + " " + &
				TV_LOG_PROGRAM::PTYPE + " " + &
				PRNT_TIME(TV_LOG_PROGRAM::LENGTH, 0%) + " " + &
				LEFT$(TV_LOG_PROGRAM::COMMENT, 43%)

		END SELECT

	!
	! Find
	!
	CASE OPT_FIND
		SELECT MLOOP

		CASE 0%
			FIND #TV_LOG_PROGRAM.CH%, KEY #0% &
				GE TV_LOG_PROGRAM::PRGNUM, REGARDLESS

		CASE 1%
			FIND #TV_LOG_PROGRAM.CH%, KEY #1% &
				GE TV_LOG_PROGRAM::START_TIME, REGARDLESS
		END SELECT

	!
	! Handle finishing various options specially
	!
	CASE OPT_AFTEROPT

		SELECT SCOPE::PRG_ITEM

		!
		! Add records
		!
		CASE "Add"
			!
			! Add line items also
			!
			TV_MAIN_LOG_PROGRAM = MAIN_JOURNAL(TV_MAIN_LOG_BREAK.ID, "A")

		!
		! Change records
		!
		CASE "Change"
			!
			! Change line items to match new header
			! if the key was changed.
			!
			! The original record must be the one in the
			! MAP for this to be able to work.  The new
			! key is passed through the QUERY$ variable.
			!
			IF (TV_LOG_PROGRAM_OLD::PRGNUM <> TV_LOG_PROGRAM::PRGNUM)
			THEN
				TEMP$ = TV_LOG_PROGRAM::PRGNUM
				TV_LOG_PROGRAM = TV_LOG_PROGRAM_OLD
				TV_MAIN_LOG_PROGRAM = MAIN_JOURNAL(TV_MAIN_LOG_BREAK.ID, "C" + TEMP$)
			END IF

		!
		! Erase record
		!
		CASE "Erase"
			!
			! Erase any line items under the header
			!
			TV_MAIN_LOG_PROGRAM = MAIN_JOURNAL(TV_MAIN_LOG_BREAK.ID, "E")

		END SELECT

	END SELECT

 ExitFunction:
	EXIT FUNCTION

	%PAGE

 HelpError:
	!******************************************************************
	! Help Message for an error
	!******************************************************************
	CALL HELP_3MESSAGE(SCOPE, ERN$ + " " + NUM1$(ERL) + " " + ERT$(ERR), &
		"ERR", PROGRAM$, "ERROR" + NUM1$(ERR))

	GOTO ExitFunction

	%PAGE

29000	!******************************************************************
	! Trap errors
	!******************************************************************
	SELECT ERL
		!
		! Unable to open Read/Write
		!
		CASE 750%
			RESUME 760 IF ERR = 10%
			TV_MAIN_LOG_PROGRAM = ERR
			RESUME 770

		!
		! Unable to open Read/Only
		!
		CASE 760%
			TV_MAIN_LOG_PROGRAM = ERR
			RESUME 770

		!
		! Unable to reset
		!
		CASE 790%
			RESUME 32767

		!
		! Record does not already exist
		!
		CASE 20300%
			RESUME 32767 IF ERR = 155%

	END SELECT

	!
	! Handle untrapped errors
	!
	PROGRAM$ = SCOPE::PRG_PROGRAM
	RESUME HelpError

	%PAGE

32767	!******************************************************************
	! End of maintenance function TV_MAIN_LOG_PROGRAM
	!******************************************************************
	END FUNCTION
