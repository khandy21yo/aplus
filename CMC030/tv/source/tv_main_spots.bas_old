1	%TITLE "TV_MAIN_SPOTS - TV Spots File Maintenance"
	%SBTTL "TV system"
	%IDENT "V3.6a Calico"

	FUNCTION LONG TV_MAIN_SPOTS(CDD_WINDOW_CDD SMG_WINDOW, &
		LONG MOPTION, LONG MLOOP, LONG MFLAG, STRING MVALUE)

	!
	! COPYRIGHT (C) 1987, 1988 BY
	!
	! Computer Management Center, Inc.
	! Idaho Falls, Idaho.
	!
	! This software is furnished under a license and may be used and
	! copied only in accordance with terms of such license and with
	! the inclusion of the above copyright notice.  This software or
	! any other copies thereof may not be provided or otherwise made
	! available to any other person.  No title to and ownership of
	! the software is hereby transferred.
	!
	! The information in this software is subject to change without
	! notice and should not be construed as a commitment by
	! Computer Management Center, Inc.
	!
	! CMC assumes no responsibility for the use or reliability of
	! its software on equipment which is not supported by CMC.
	!
	!++
	!
	! Abstract:
	!
	!	This program maintains the TV Spots File.
	!
	! Index:
	!
	!
	! Input:
	!
	!
	! Output:
	!
	!
	! Example:
	!
	!
	! Compile:
	!
	!	$ BAS TV_SOURCE:TV_MAIN_SPOTS/LINE
	!	$ LIB/REP FUNC_LIB:CMCFUN TV_MAIN_SPOTS
	!	$ DELETE TV_MAIN_SPOTS.OBJ;*
	!
	! Author:
	!
	!	11/17/87 - Kevin Handy
	!
	! Modification history:
	!
	!	05/13/88 - Aaron Redd
	!		Modified to allow R/O open of file if R/W open fails.
	!
	!	08/08/88 - Kevin Handy
	!		Added sequence number field.
	!
	!	04/15/95 - Kevin Handy
	!		(V3.6)
	!		Update to V3.6 coding standards
	!
	!	08/22/98 - Kevin Handy
	!		(V3.6a Calico)
	!		Update to V3.6a coding standards
	!--
	%PAGE

	!
	! Set up compiling options
	!
	OPTION SIZE = (REAL GFLOAT, INTEGER LONG)

	%INCLUDE "FUNC_INCLUDE:FUNCTION.HB"

	MAP (SCOPE) SCOPE_STRUCT SCOPE

	%INCLUDE "FUNC_INCLUDE:TV_WINDOW.INC"
	%INCLUDE "FUNC_INCLUDE:MAIN_WINDOW.COM"

	%INCLUDE "SOURCE:[CDD.OPEN]CDD_WINDOW.HB"

	!
	! Maps
	!
	MAP (SCHED_DATE) SCHED_DATE$ = 8%

	%INCLUDE "SOURCE:[TV.OPEN]TV_LOGSPOTS.HB"
	MAP (TV_LOGSPOTS)		TV_LOGSPOTS_CDD TV_LOGSPOTS
	MAP (TV_LOGSPOTS_OLD)		TV_LOGSPOTS_CDD TV_LOGSPOTS_OLD, TV_LOGSPOTS2

	%INCLUDE "SOURCE:[TV.OPEN]TV_SPOTS_FLAG.HB"
	MAP (TV_SPOTS_FLAG)		TV_SPOTS_FLAG_CDD	TV_SPOTS_FLAG

	%INCLUDE "SOURCE:[TV.OPEN]TV_CART_INVENTORY.HB"
	MAP (TV_CART_INVENTORY)		TV_CART_INVENTORY_CDD	TV_CART_INVENTORY

	%INCLUDE "SOURCE:[TV.OPEN]TV_LOG_CLASS.HB"
	MAP (TV_LOG_CLASS)		TV_LOG_CLASS_CDD	TV_LOG_CLASS

	%INCLUDE "SOURCE:[AR.OPEN]AR_CUSTOM.HB"
	MAP (AR_CUSTOM)			AR_CUSTOM_CDD		AR_CUSTOM

	!
	! Common Areas
	!
	! These areas store information that is re-used between
	! calls to these functions.
	!
	COM (CH_TV_LOGSPOTS) &
		TV_LOGSPOTS.CH%, &
		TV_LOGSPOTS.READONLY%

	COM (TT_TV_SPOTS) &
		SPOTTITLE$ = 20%, &
		SPOT$(3%) = 20%

	COM (TT_TV_SCHTYPE) &
		SCHTYPETITLE$ = 20%, &
		SCHTYPE$(3%) = 20%

	!
	! External functions
	!
	EXTERNAL STRING FUNCTION READ_SET

	EXTERNAL LONG   FUNCTION MAIN_WINDOW

	!
	! Other declarations
	!
	DECLARE RFA TEMP_RFA

	%PAGE

	ON ERROR GOTO 29000

	SELECT MOPTION

	!
	! Initialization
	!
	! This option is used to initialize the window structure,
	! set up the default values for add, and open all files
	! necessary that have not already been opened.
	!
	CASE OPT_INIT

		!
		! Define window
		!
		SMG_WINDOW::DESCR = "TV Spots File Maintenance"
		SMG_WINDOW::NHELP = "TV_MAST_SPOTS"
		SMG_WINDOW::HSIZE = 78%
		SMG_WINDOW::VSIZE = 18%
		SMG_WINDOW::HVIEW = 78%
		SMG_WINDOW::VVIEW = 18%
		SMG_WINDOW::HPOS  = 2%
		SMG_WINDOW::VPOS  = 2%
		SMG_WINDOW::NITEMS= 19%
		SMG_WINDOW::FLAGS = 0%

		SMG_WINDOW::NKEYS = 3%
		SMG_WINDOW::KNAME(0%) = "Customer"
			SMG_WINDOW::KFIELD(0%, 0%) = 3%
			SMG_WINDOW::KFIELD(0%, 1%) = 1%
			SMG_WINDOW::KFIELD(0%, 2%) = 2%
			SMG_WINDOW::KFIELD(0%, 3%) = 3%
		SMG_WINDOW::KNAME(1%) = "Schedule-time"
			SMG_WINDOW::KFIELD(1%, 0%) = 2%
			SMG_WINDOW::KFIELD(1%, 1%) = 5%
			SMG_WINDOW::KFIELD(1%, 2%) = 6%
		SMG_WINDOW::KNAME(2%) = "Order"
			SMG_WINDOW::KFIELD(2%, 0%) = 3%
			SMG_WINDOW::KFIELD(2%, 1%) = 2%
			SMG_WINDOW::KFIELD(2%, 2%) = 3%
			SMG_WINDOW::KFIELD(2%, 3%) = 5%

		SPOTTITLE$ = "Flag  Description"
		SPOT$(0%) = "3"
		SPOT$(1%) = "S - Schedule "
		SPOT$(2%) = "N - Not Run  "
		SPOT$(3%) = "R - Run      "

		SCHTYPETITLE$ = "Flag  Description"
		SCHTYPE$(0%) = "3"
		SCHTYPE$(1%) = "0 - Commercial"
		SCHTYPE$(2%) = "1 - Fill "
		SCHTYPE$(3%) = "2 - In-break"

		!
		! Load in defaults
		!
		CALL READ_DEFAULTS(SMG_WINDOW) &
			IF INSTR(1%, " QV", MVALUE) <= 1%

700		!
		! Declare channels
		!
		IF TV_LOGSPOTS.CH% > 0%
		THEN
			!
			! Already open, set flag to read-only if was
			! that way from last time.
			!
			SMG_WINDOW::FLAGS = (SMG_WINDOW::FLAGS OR 2%) &
				IF TV_LOGSPOTS.READONLY%
			GOTO 790
		END IF

		!
		! Open main file (existing) for modification
		!
750		%INCLUDE "SOURCE:[TV.OPEN]TV_LOGSPOTS.CRE"
		TV_LOGSPOTS.READONLY% = 0%
		GOTO 790

760		!
		! If unable to open for modify, try to open with read
		! access only.
		!
		%INCLUDE "SOURCE:[TV.OPEN]TV_LOGSPOTS.OPN"
		SMG_WINDOW::FLAGS = (SMG_WINDOW::FLAGS OR 2%)
		TV_LOGSPOTS.READONLY% = -1%

		GOTO 790

770		!
		! File not open, so reset channel
		!
		CALL ASSG_FREECHANNEL(TV_LOGSPOTS.CH%)

		EXIT FUNCTION

790		SMG_WINDOW::CHAN  = TV_LOGSPOTS.CH%
		RESET #TV_LOGSPOTS.CH%
		GET #TV_LOGSPOTS.CH%, REGARDLESS

	!
	! Give them a few more options
	!
	CASE OPT_OPTLIST

		MVALUE = MVALUE + " actual-Time not-rUn next-tiMe"

	!
	! Handle the options that we have added
	!
	CASE OPT_MOREMENU

		SELECT EDIT$(MVALUE, 32%)

		!
		! Set up the actual time
		!
20100		CASE "ACTUAL-TIME"

			GET #TV_LOGSPOTS.CH%, RFA GETRFA(TV_LOGSPOTS.CH%)

			TV_LOGSPOTS::SPOTS_FLAG = "R"
			TV_LOGSPOTS::SPOTS_FLAG = ENTR_3STRING(SCOPE, &
				SMG_WINDOW::WNUMBER,"8;22", TEMP$, &
				TV_LOGSPOTS::SPOTS_FLAG, 1%, "'", MVALUE)


			!
			! Display changed status code
			!
			DISPLAY_DESCR$ = STRING$(30%,63%)
			IF MAIN_WINDOW(TV_MAIN_CUSCONF.ID,"Q0"+TV_LOGSPOTS::SPOTS_FLAG+ &
				TV_LOGSPOTS::SPOTS_CODE) = 1%
			THEN
				DISPLAY_DESCR$= TV_SPOTS_FLAG::DESCR
			END IF

			SMG_STATUS% = SMG$PUT_CHARS(SMG_WINDOW::WNUMBER, &
				DISPLAY_DESCR$,9%,36%, , SMG$M_BOLD)

			!
			! Ask for actual time now
			!
 ReActualEnter:		SCOPE::PRG_ITEM = "FLD006"
			TV_LOGSPOTS::RUN_TIME = ENTR_3TIME(SCOPE, &
				SMG_WINDOW::WNUMBER, &
				"5;65", "Actual time", &
				TV_LOGSPOTS::RUN_TIME, 0%, "H", MVALUE )

			SELECT SCOPE::SCOPE_EXIT

			CASE 3%, SMG$K_TRM_F8, SMG$K_TRM_F10, 26%

				UNLOCK #TV_LOGSPOTS.CH%
				TV_MAIN_SPOTS = 2%
				CALL ENTR_3MESSAGE(SCOPE, "Actual-time aborted!", 1%)

			CASE 0%, 10%, 12%, 13%, SMG$K_TRM_DO

				UPDATE #TV_LOGSPOTS.CH%

			CASE ELSE
				CALL ENTR_3BADKEY(SCOPE, SCOPE::SCOPE_EXIT)
				GOTO ReActualEnter
			END SELECT


		!
		! Set record as not-run
		!
20140		CASE "NOT-RUN"

			GET #TV_LOGSPOTS.CH%, RFA GETRFA(TV_LOGSPOTS.CH%)

			TV_LOGSPOTS::SPOTS_FLAG = "N"
			TV_LOGSPOTS::SPOTS_FLAG = ENTR_3STRING(SCOPE, &
				SMG_WINDOW::WNUMBER,"8;22", TEMP$, &
				TV_LOGSPOTS::SPOTS_FLAG, 1%, "'", MVALUE)


			!
			! Display changed status code
			!
			DISPLAY_DESCR$ = STRING$(30%,63%)
			IF MAIN_WINDOW(TV_MAIN_CUSCONF.ID,"Q0"+TV_LOGSPOTS::SPOTS_FLAG+ &
				TV_LOGSPOTS::SPOTS_CODE) = 1%
			THEN
				DISPLAY_DESCR$= TV_SPOTS_FLAG::DESCR
			END IF

			SMG_STATUS% = SMG$PUT_CHARS(SMG_WINDOW::WNUMBER, &
				DISPLAY_DESCR$,9%,36%, , SMG$M_BOLD)

			!
			! Ask for actual time now
			!
 ReNotEnter:		SCOPE::PRG_ITEM = "FLD010"
			TV_LOGSPOTS::SPOTS_CODE = ENTR_3STRING(SCOPE, &
				SMG_WINDOW::WNUMBER, &
				"9;22", "Not run", &
				TV_LOGSPOTS::SPOTS_CODE, MFLAG, "'E", MVALUE )


			SELECT SCOPE::SCOPE_EXIT

			CASE SMG$K_TRM_F14
				TV_LOGSPOTS::SPOTS_CODE = TV_SPOTS_FLAG::CODE &
					IF MAIN_WINDOW(TV_MAIN_CUSCONF.ID, "V0N") = 1%
				GOTO ReNotEnter

			CASE 3%, SMG$K_TRM_F8, SMG$K_TRM_F10, 26%

				UNLOCK #TV_LOGSPOTS.CH%
				TV_MAIN_SPOTS = 2%
				CALL ENTR_3MESSAGE(SCOPE, "Not-run aborted!", 1%)

			CASE 0%, 10%, 12%, 13%, SMG$K_TRM_DO

				UPDATE #TV_LOGSPOTS.CH%

			CASE ELSE
				CALL ENTR_3BADKEY(SCOPE, SCOPE::SCOPE_EXIT)
				GOTO ReNotEnter
			END SELECT



		!
		! Search for next record (after this time, after this record)
		!
20160		CASE "NEXT-TIME"

			!
			! Remember where we were
			!
			TEMP_RFA = GETRFA(SMG_WINDOW::CHAN)
			TEMP_TIME$ = TV_LOGSPOTS::SCH_TIME + ""

			!
			! Look for something better
			!
			GET #SMG_WINDOW::CHAN, &
				KEY #1% EQ TV_LOGSPOTS::SCH_TIME

			GET #SMG_WINDOW::CHAN &
				UNTIL (TV_LOGSPOTS::SCH_TIME <> TEMP_TIME$) OR &
					(GETRFA(SMG_WINDOW::CHAN) = TEMP_RFA)

			GET #SMG_WINDOW::CHAN &
				IF (GETRFA(SMG_WINDOW::CHAN) = TEMP_RFA)

			!
			! Return the next record back
			!
			TV_MAIN_SPOTS = 8%

		END SELECT

	!
	! Display the background
	!
	! This option is used to display the background information on the
	! screen.  It must first clear any junk on the screen, and then
	! write the background onto it.
	!
20180	CASE OPT_BACKGROUND

		SMG_STATUS% = SMG$BEGIN_DISPLAY_UPDATE(SMG_WINDOW::WNUMBER)

		SMG_STATUS% = SMG$ERASE_DISPLAY(SMG_WINDOW::WNUMBER)

		DATA	1,  1, "(01) Customer", &
			2,  1, "(02) Order no.", &
			3,  1, "(03) Sched no.", &
			4,  1, "(04) Descr/comm", &
			5,  1, "(05) Sched Time", &
			5, 33, "(06) Seq", &
			5, 52, "(07) Actual time", &
			6,  1, "(08) Rate", &
			7,  1, "(09) Type", &
			8,  1, "(10) Run Flag", &
			9,  1, "(11) Run Code", &
			10,  1, "(12) Length", &
			11,  1, "(13) Agency no.", &
			12,  1, "(14) Cart no.", &
			13,  1, "(15) Cut no.", &
			14,  1, "(16) From time slot", &
			15,  1, "(17) To time slot", &
			16,  1, "(18) Post date", &
			17,  1, "(19) Log class", &
			0,  0, ""

		RESTORE

		READ XPOS%, YPOS%, XSTR$

		WHILE (XPOS% <> 0)
			SMG_STATUS% = SMG$PUT_CHARS( &
				SMG_WINDOW::WNUMBER,XSTR$, XPOS%, YPOS%)
			READ XPOS%, YPOS%, XSTR$
		NEXT

		SMG_STATUS% = SMG$END_DISPLAY_UPDATE(SMG_WINDOW::WNUMBER)

	!
	! Enter/Display/Default
	!
	! This option is used to enter the data from the user, display data,
	! set defaults, and return the data back according to MFLAG.
	!
20200	CASE OPT_ENTRY

		TEMP$, TEMP1$ = TRM$(SCOPE::PRG_ITEM)
		TEMP$ = "View starting at" IF TEMP$ = "View"

		SCOPE::PRG_ITEM = "FLD" + FORMAT$(MLOOP, "<0>##")

 Eloop:		SCOPE::SCOPE_EXIT = 0%

		SELECT MLOOP

		CASE 1%
			TV_LOGSPOTS::CUSNUM = ENTR_3STRING(SCOPE, &
				SMG_WINDOW::WNUMBER, &
				"1;22", TEMP$, &
				TV_LOGSPOTS::CUSNUM, MFLAG, "'E", MVALUE )

			SELECT SCOPE::SCOPE_EXIT
			CASE SMG$K_TRM_F14
				TV_LOGSPOTS::CUSNUM = AR_CUSTOM::CUSNUM &
					IF MAIN_WINDOW(TV_MAIN_CUSTOM.ID, "VX") = 1%
				GOTO ELoop

			CASE SMG$K_TRM_F17
				ST% = MAIN_WINDOW( TV_MAIN_CUSTOM.ID, &
					"M0"+TV_LOGSPOTS::CUSNUM )
				GOTO ELoop

			END SELECT


		CASE 2%
			TV_LOGSPOTS::FRMNUM = ENTR_3STRING(SCOPE, &
				SMG_WINDOW::WNUMBER, &
				"2;22", TEMP$, &
				TV_LOGSPOTS::FRMNUM, MFLAG, "'E", MVALUE )

		CASE 3%
			TV_LOGSPOTS::SKEDNUM = ENTR_3STRING(SCOPE, &
				SMG_WINDOW::WNUMBER, &
				"3;22", TEMP$, &
				TV_LOGSPOTS::SKEDNUM, MFLAG, "'E", MVALUE )

		CASE 4%
			TV_LOGSPOTS::DESCR = ENTR_3STRING(SCOPE, &
				SMG_WINDOW::WNUMBER, &
				"4;22", TEMP$, &
				TV_LOGSPOTS::DESCR, MFLAG, "'E", MVALUE )

		CASE 5%
			TV_LOGSPOTS::SCH_TIME = ENTR_3TIME(SCOPE, &
				SMG_WINDOW::WNUMBER, &
				"5;22", TEMP$, &
				TV_LOGSPOTS::SCH_TIME, MFLAG, "H", MVALUE )

		CASE 6%
			TV_LOGSPOTS::SEQNUM = ENTR_3STRING(SCOPE, &
				SMG_WINDOW::WNUMBER, &
				"5;43", TEMP$, &
				TV_LOGSPOTS::SEQNUM, MFLAG, "'E", MVALUE )

		CASE 7%
			TV_LOGSPOTS::RUN_TIME = ENTR_3TIME(SCOPE, &
				SMG_WINDOW::WNUMBER, &
				"5;69", TEMP$, &
				TV_LOGSPOTS::RUN_TIME, MFLAG, "H", MVALUE )

		CASE 8%
			TV_LOGSPOTS::RATE = ENTR_3NUMBER(SCOPE, &
				SMG_WINDOW::WNUMBER, &
				"6;22", TEMP$, &
				TV_LOGSPOTS::RATE, MFLAG, "###,###.##", MVALUE )

		CASE 9%
			TV_LOGSPOTS::SCH_TYPE = ENTR_3STRINGLIST(SCOPE, &
				SMG_WINDOW::WNUMBER,"7;22", TEMP$, &
				TV_LOGSPOTS::SCH_TYPE, MFLAG, "'", MVALUE, &
				SCHTYPE$(),SCHTYPETITLE$, "005" )

		CASE 10%
			TV_LOGSPOTS::SPOTS_FLAG = ENTR_3STRINGLIST(SCOPE, &
				SMG_WINDOW::WNUMBER,"8;22", TEMP$, &
				TV_LOGSPOTS::SPOTS_FLAG, MFLAG, "'", MVALUE, &
				SPOT$(),SPOTTITLE$, "005" )

		CASE 11%
			TV_LOGSPOTS::SPOTS_CODE = ENTR_3STRING(SCOPE, &
				SMG_WINDOW::WNUMBER, &
				"9;22", TEMP$, &
				TV_LOGSPOTS::SPOTS_CODE, MFLAG, "'E", MVALUE )

			IF SCOPE::SCOPE_EXIT = SMG$K_TRM_F14
			THEN
				TV_LOGSPOTS::SPOTS_CODE = TV_SPOTS_FLAG::CODE &
					IF MAIN_WINDOW(TV_MAIN_CUSCONF.ID, "V0  ") = 1%
				GOTO ELoop
			END IF

		CASE 12%
			TV_LOGSPOTS::LENGTH = ENTR_3TIME(SCOPE, &
				SMG_WINDOW::WNUMBER, &
				"10;22", TEMP$, &
				TV_LOGSPOTS::LENGTH, MFLAG, "H", MVALUE )

		CASE 13%
			TV_LOGSPOTS::AGENCY_NUM = ENTR_3STRING(SCOPE, &
				SMG_WINDOW::WNUMBER, &
				"11;22", TEMP$, &
				TV_LOGSPOTS::AGENCY_NUM, MFLAG, "'E", MVALUE )

		CASE 14%
			TV_LOGSPOTS::CARTNUM = ENTR_3STRING(SCOPE, &
				SMG_WINDOW::WNUMBER, &
				"12;22", TEMP$, &
				TV_LOGSPOTS::CARTNUM, MFLAG, "'E", MVALUE )

			IF SCOPE::SCOPE_EXIT = SMG$K_TRM_F14
			THEN
				TV_LOGSPOTS::CARTNUM = TV_CART_INVENTORY::CARTNUM &
					IF MAIN_WINDOW(TV_MAIN_CART.ID, "V0  ") = 1%
				GOTO ELoop
			END IF

		CASE 15%
			TV_LOGSPOTS::CUTNUM = ENTR_3STRING(SCOPE, &
				SMG_WINDOW::WNUMBER, &
				"13;22", TEMP$, &
				TV_LOGSPOTS::CUTNUM, MFLAG, "'E", MVALUE )

		CASE 16%
			TV_LOGSPOTS::FROM_TIME_SLOT = ENTR_3TIME(SCOPE, &
				SMG_WINDOW::WNUMBER, &
				"14;22", TEMP$, &
				TV_LOGSPOTS::FROM_TIME_SLOT, MFLAG, "H", MVALUE )

		CASE 17%
			TV_LOGSPOTS::TO_TIME_SLOT = ENTR_3TIME(SCOPE, &
				SMG_WINDOW::WNUMBER, &
				"15;22", TEMP$, &
				TV_LOGSPOTS::TO_TIME_SLOT, MFLAG, "H", MVALUE )

		CASE 18%
			TV_LOGSPOTS::POSTDATE = ENTR_3DATE(SCOPE, &
				SMG_WINDOW::WNUMBER, &
				"16;22", TEMP$, &
				TV_LOGSPOTS::POSTDATE, MFLAG, "'E", MVALUE )

		CASE 19%
			TV_LOGSPOTS::CLASS = ENTR_3STRING(SCOPE, &
				SMG_WINDOW::WNUMBER, &
				"17;22", TEMP$, &
				TV_LOGSPOTS::CLASS, MFLAG, "'E", MVALUE )

			IF SCOPE::SCOPE_EXIT = SMG$K_TRM_F14
			THEN
				TV_LOGSPOTS::CLASS = TV_LOG_CLASS::CLASS &
					IF MAIN_WINDOW(TV_MAIN_LOG_CLASS.ID, "V0  ") = 1%
				GOTO ELoop
			END IF

		END SELECT

		SCOPE::PRG_ITEM = TEMP1$

	!
	! Test values
	!
20300	CASE OPT_TESTENTRY

		TV_MAIN_SPOTS = 0%

		SELECT MLOOP

		CASE 1%
			! Is the input defined?
			!
			DISPLAY_DESCR$ = STRING$(40%,63%)
			IF MAIN_WINDOW(TV_MAIN_CUSTOM.ID,"Q0"+TV_LOGSPOTS::CUSNUM) <> 1%
			THEN
				!
				! See if they are allowing undefined inputs
				!
				V$ = LEFT(READ_SET(TRM$(SCOPE::PRG_PROGRAM), "CUSNUM"), 1%)
				V$ = LEFT(READ_SET("TV_ALLOW", "CUSNUM"), 1%) &
					IF V$ = ""

				IF V$ = "N"
				THEN
					!
					! Don't let them get past is we don't allow
					! them to enter undefined values.
					!
					TV_MAIN_SPOTS = 1%
					CALL ENTR_3MESSAGE(SCOPE, "Input undefined ", 0%)
				ELSE
					!
					! Verify that they really want to enter an
					! undefined value.
					!
					V$ = ENTR_3YESNO(SCOPE, SMG_WINDOW::WNUMBER, "", &
						"Input undefined, enter anyway", &
						"N", 0%, "", "")
					TV_MAIN_SPOTS = 1% IF V$ = "N"
				END IF
			ELSE
				DISPLAY_DESCR$= LEFT( AR_CUSTOM::CUSNAM, 40% )

			SMG_STATUS% = SMG$PUT_CHARS(SMG_WINDOW::WNUMBER, &
				DISPLAY_DESCR$,1%,36%, , SMG$M_BOLD)

			END IF

		CASE 2%
			TV_MAIN_SPOTS = 1% IF TV_LOGSPOTS::FRMNUM = ""

		CASE 11%
			! Is the input defined?
			!
			DISPLAY_DESCR$ = STRING$(30%,63%)
			IF MAIN_WINDOW(TV_MAIN_CUSCONF.ID,"Q0"+TV_LOGSPOTS::SPOTS_FLAG+ &
				TV_LOGSPOTS::SPOTS_CODE) <> 1%
			THEN
				!
				! See if they are allowing undefined inputs
				!
				V$ = LEFT(READ_SET(TRM$(SCOPE::PRG_PROGRAM), "SPOCDE"), 1%)
				V$ = LEFT(READ_SET("TV_ALLOW", "SPOCDE"), 1%) &
					IF V$ = ""

				IF V$ = "N"
				THEN
					!
					! Don't let them get past is we don't allow
					! them to enter undefined values.
					!
					TV_MAIN_SPOTS = 1%
					CALL ENTR_3MESSAGE(SCOPE, "Input undefined ", 0%)
				ELSE
					!
					! Verify that they really want to enter an
					! undefined value.
					!
					V$ = ENTR_3YESNO(SCOPE, SMG_WINDOW::WNUMBER, "", &
						"Input undefined, enter anyway", &
						"N", 0%, "", "")
					TV_MAIN_SPOTS = 1% IF V$ = "N"
				END IF
			ELSE
				DISPLAY_DESCR$= TV_SPOTS_FLAG::DESCR
			END IF

			SMG_STATUS% = SMG$PUT_CHARS(SMG_WINDOW::WNUMBER, &
				DISPLAY_DESCR$,9%,36%, , SMG$M_BOLD)

		CASE 14%
			! Is the input defined?
			!
			DISPLAY_DESCR$ = STRING$(40%,63%)
			IF MAIN_WINDOW(TV_MAIN_CART.ID,"Q0"+TV_LOGSPOTS::CARTNUM) <> 1%
			THEN
				!
				! See if they are allowing undefined inputs
				!
				V$ = LEFT(READ_SET(TRM$(SCOPE::PRG_PROGRAM), "CARTNO"), 1%)
				V$ = LEFT(READ_SET("TV_ALLOW", "CARTNO"), 1%) &
					IF V$ = ""

				IF V$ = "N"
				THEN
					!
					! Don't let them get past is we don't allow
					! them to enter undefined values.
					!
					TV_MAIN_SPOTS = 1%
					CALL ENTR_3MESSAGE(SCOPE, "Input undefined ", 0%)
				ELSE
					!
					! Verify that they really want to enter an
					! undefined value.
					!
					V$ = ENTR_3YESNO(SCOPE, SMG_WINDOW::WNUMBER, "", &
						"Input undefined, enter anyway", &
						"N", 0%, "", "")
					TV_MAIN_SPOTS = 1% IF V$ = "N"
				END IF
			ELSE
				DISPLAY_DESCR$= TV_CART_INVENTORY::PRONAME
			END IF

			SMG_STATUS% = SMG$PUT_CHARS(SMG_WINDOW::WNUMBER, &
				DISPLAY_DESCR$, 12%, 36%, , SMG$M_BOLD)

		CASE 19%
			!
			! Is the input defined?
			!
			DISPLAY_DESCR$ = STRING$(40%,63%)
			IF MAIN_WINDOW(TV_MAIN_LOG_CLASS.ID,"Q0"+TV_LOGSPOTS::CLASS) <> 1%
			THEN
				!
				! See if they are allowing undefined inputs
				!
				V$ = LEFT(READ_SET(TRM$(SCOPE::PRG_PROGRAM), "LOGCLA"), 1%)
				V$ = LEFT(READ_SET("TV_ALLOW", "LOGCLA"), 1%) &
					IF V$ = ""

				IF V$ = "N"
				THEN
					!
					! Don't let them get past is we don't allow
					! them to enter undefined values.
					!
					TV_MAIN_SPOTS = 1%
					CALL ENTR_3MESSAGE(SCOPE, "Input undefined ", 0%)
				ELSE
					!
					! Verify that they really want to enter an
					! undefined value.
					!
					V$ = ENTR_3YESNO(SCOPE, SMG_WINDOW::WNUMBER, "", &
						"Input undefined, enter anyway", &
						"N", 0%, "", "")
					TV_MAIN_SPOTS = 1% IF V$ = "N"
				END IF
			ELSE
				DISPLAY_DESCR$= TV_LOG_CLASS::DESCR
			END IF

			SMG_STATUS% = SMG$PUT_CHARS(SMG_WINDOW::WNUMBER, &
				DISPLAY_DESCR$, 17%, 36%, , SMG$M_BOLD)


		END SELECT

	CASE OPT_DISPLAY

		DISPLAY_DESCR$ = STRING$(40%,63%)
		DISPLAY_DESCR$ = LEFT( AR_CUSTOM::CUSNAM, 40% ) &
			IF MAIN_WINDOW(TV_MAIN_CUSTOM.ID,"Q0"+TV_LOGSPOTS::CUSNUM) = 1%
		!
		! Display name (ALSO IN TESTENTRY)
		!
		SMG_STATUS% = SMG$PUT_CHARS(SMG_WINDOW::WNUMBER, &
			DISPLAY_DESCR$,1%,36%, , SMG$M_BOLD)

		DISPLAY_DESCR$ = STRING$(30%,63%)
		DISPLAY_DESCR$ = TV_SPOTS_FLAG::DESCR &
			IF MAIN_WINDOW(TV_MAIN_CUSCONF.ID,"Q0"+TV_LOGSPOTS::SPOTS_FLAG+ &
				TV_LOGSPOTS::SPOTS_CODE) = 1%
		!
		! Display name (ALSO IN TESTENTRY)
		!
		SMG_STATUS% = SMG$PUT_CHARS(SMG_WINDOW::WNUMBER, &
			DISPLAY_DESCR$,9%,36%, , SMG$M_BOLD)

		DISPLAY_DESCR$ = STRING$(40%,63%)
		DISPLAY_DESCR$ = TV_CART_INVENTORY::PRONAME &
			IF MAIN_WINDOW(TV_MAIN_CART.ID,"Q0"+TV_LOGSPOTS::CARTNUM) = 1%
		!
		! Display name (ALSO IN TESTENTRY)
		!
		SMG_STATUS% = SMG$PUT_CHARS(SMG_WINDOW::WNUMBER, &
			DISPLAY_DESCR$, 12%, 36%, , SMG$M_BOLD)

		DISPLAY_DESCR$ = STRING$(40%,63%)
		DISPLAY_DESCR$ = TV_LOG_CLASS::DESCR &
			IF MAIN_WINDOW(TV_MAIN_LOG_CLASS.ID,"Q0"+TV_LOGSPOTS::CLASS) = 1%
		!
		! Display name (ALSO IN TESTENTRY)
		!
		SMG_STATUS% = SMG$PUT_CHARS(SMG_WINDOW::WNUMBER, &
			DISPLAY_DESCR$, 17%, 36%, , SMG$M_BOLD)

	!
	! Set TV_LOGSPOTS_OLD value
	!
20500	CASE OPT_SETOLD

		TV_LOGSPOTS_OLD = TV_LOGSPOTS

	!
	! Restore TV_LOGSPOTS_OLD value
	!
	CASE OPT_RESETOLD

		TV_LOGSPOTS = TV_LOGSPOTS_OLD

	!
	! Set default value
	!
	CASE OPT_SETDEFAULT

		TV_LOGSPOTS2 = TV_LOGSPOTS

	!
	! Restore default value
	!
	CASE OPT_RESETDEFAULT

		TV_LOGSPOTS = TV_LOGSPOTS2
		TV_LOGSPOTS::SCH_DATE = ""

	!
	! View header
	!
	CASE OPT_VIEW

		SELECT MLOOP

		!
		! Title (One line only)
		!
		CASE 1%
			MVALUE = "  Customer   Order    Schd " + &
				"Time     Rate      Flag Code Length"

		!
		! Positions of lines
		!
		CASE 2%
			MVALUE = "013,022,027,036,046,051,056,065"

		!
		! Convert current record into text
		!
		CASE 3%
			MVALUE = TV_LOGSPOTS::CUSNUM + " " + &
				TV_LOGSPOTS::FRMNUM + "  " + &
				TV_LOGSPOTS::SKEDNUM + "  " + &
				PRNT_TIME(TV_LOGSPOTS::SCH_TIME, 0%) + " " + &
				FORMAT$(TV_LOGSPOTS::RATE, "######.##") + "  " + &
				TV_LOGSPOTS::SPOTS_FLAG + "    " + &
				TV_LOGSPOTS::SPOTS_CODE + "  " + &
				PRNT_TIME(TV_LOGSPOTS::LENGTH, 0%) + " " + &
				TV_LOGSPOTS::DESCR

		END SELECT

	!
	! Find
	!
	CASE OPT_FIND
		SELECT MLOOP
		CASE 0%
			FIND #TV_LOGSPOTS.CH%, &
				KEY#0% GE TV_LOGSPOTS::CUSNUM + &
					TV_LOGSPOTS::FRMNUM + &
					TV_LOGSPOTS::SKEDNUM, &
				REGARDLESS

		CASE 1%
			FIND #TV_LOGSPOTS.CH%, &
				KEY#1% GE TV_LOGSPOTS::SCH_TIME, &
				REGARDLESS

		CASE 2%
			FIND #TV_LOGSPOTS.CH%, &
				KEY#2% GE TV_LOGSPOTS::FRMNUM + &
					TV_LOGSPOTS::SKEDNUM + &
					TV_LOGSPOTS::SCH_TIME, &
				REGARDLESS

		END SELECT
	END SELECT

 ExitFunction:
	EXIT FUNCTION

 Endoffile:
	CALL ENTR_3MESSAGE(SCOPE, "End of file!", 0%)
	GOTO ExitFunction

29000	!
	! Trap Errors
	!
 !	call ENTR_3MESSAGE(SCOPE, "zzz - " + num1$(err) + "  " + num1$(erl), 0%)

	SELECT ERL
		!
		! Unable to open Read/Write
		!
		CASE 750%
			RESUME 760 IF ERR = 10%
			TV_MAIN_SPOTS = ERR
			RESUME 770

		!
		! Unable to open Read/Only
		!
		CASE 760%
			TV_MAIN_SPOTS = ERR
			RESUME 770

		!
		! Unable to reset
		!
		CASE 790%
			RESUME 32767

		!
		! Error looking for the next record
		!
		CASE 20160%
			RESUME Endoffile

	END SELECT

	RESUME ExitFunction

32767	END FUNCTION
