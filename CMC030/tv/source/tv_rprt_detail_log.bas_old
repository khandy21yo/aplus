1	%TITLE "TV_RPRT_DETAIL_LOG - TV Traffic Program Report"
	%SBTTL "TV System"
	%IDENT "V3.6a Calico"

	!
	! COPYRIGHT (C) 1987, 1988 BY
	!
	! Computer Management Center, Inc.
	! Idaho Falls, Idaho.
	!
	! This software is furnished under a license and may be used and
	! copied only in accordance with terms of such license and with
	! the inclusion of the above copyright notice.  This software or
	! any other copies thereof may not be provided or otherwise made
	! available to any other person.  No title to and ownership of
	! the software is hereby transferred.
	!
	! The information in this software is subject to change without
	! notice and should not be construed as a commitment by
	! Computer Management Center, Inc.
	!
	! CMC assumes no responsibility for the use or reliability of
	! its software on equipment which is not supported by CMC.
	!
	!++
	!
	! Abstract:
	!
	!	This program prints the Program/Break files.
	!
	! Index:
	!
	!
	! Input:
	!
	!
	! Output:
	!
	!
	! Example:
	!
	!
	! Environment:
	!
	!	VAX/VMS BASIC+2 V4.4
	!
	! Author:
	!
	!	12/30/87 - Kevin Handy
	!
	! Compile:
	!
	!	$ BAS TV_SOURCE:TV_RPRT_DETAIL_LOG
	!	$ LINK/EXECUTABLE=TV_EXE:*.EXE TV_RPRT_DETAIL_LOG, -
	!		FUNC_LIB:CMCLINK/OPTION
	!	$ DELETE TV_RPRT_DETAIL_LOG.OBJ;*
	!
	! Modification history:
	!
	!	04/15/95 - Kevin Handy
	!		(V3.6)
	!		Update to V3.6 coding standards
	!
	!	08/22/98 - Kevin Handy
	!		(V3.6a Calico)
	!		Update to V3.6a coding standards
	!--
	%PAGE

	OPTION SIZE = (INTEGER LONG, REAL GFLOAT)

	!
	! Include files
	!
	%INCLUDE "FUNC_INCLUDE:FUNCTION.HB"

	MAP (SCOPE) SCOPE_STRUCT SCOPE


	%INCLUDE "SOURCE:[UTL.OPEN]UTL_REPORTX.HB"
	DECLARE		UTL_REPORTX_CDD	UTL_REPORTX

	%INCLUDE "SOURCE:[TV.OPEN]TV_LOG_PROGRAM.HB"
	MAP	(TV_LOG_PROGRAM)	TV_LOG_PROGRAM_CDD	TV_LOG_PROGRAM
	MAP	(MAIN_PROGRAM)		TV_LOG_PROGRAM_CDD	MAIN_PROGRAM
	MAP	(CUT_PROGRAM)		TV_LOG_PROGRAM_CDD	CUT_PROGRAM

	%INCLUDE "SOURCE:[TV.OPEN]TV_LOG_BREAK.HB"
	MAP	(TV_LOG_BREAK)		TV_LOG_BREAK_CDD	TV_LOG_BREAK

	%INCLUDE "SOURCE:[TV.OPEN]TV_LOGSPOTS.HB"
	MAP	(TV_LOGSPOTS)		TV_LOGSPOTS_CDD		TV_LOGSPOTS

	%INCLUDE "SOURCE:[AR.OPEN]AR_CUSTOM.HB"
	MAP	(AR_CUSTOM)		AR_CUSTOM_CDD		AR_CUSTOM

	%INCLUDE "SOURCE:[TV.OPEN]TV_LOG_SOURCE.HB"
	MAP	(TV_LOG_SOURCE)		TV_LOG_SOURCE_CDD	TV_LOG_SOURCE

	%INCLUDE "SOURCE:[TV.OPEN]TV_LOG_CLASS.HB"
	MAP	(TV_LOG_CLASS)		TV_LOG_CLASS_CDD	TV_LOG_CLASS

	%INCLUDE "SOURCE:[TV.OPEN]TV_LOG_TYPE.HB"
	MAP	(TV_LOG_TYPE)		TV_LOG_TYPE_CDD		TV_LOG_TYPE

	!
	! External functions
	!
	EXTERNAL STRING  FUNCTION PRNT_TIME
	EXTERNAL LONG    FUNCTION DATE_DAYCODE
	EXTERNAL LONG    FUNCTION DATE_DAYOFWEEK
	EXTERNAL LONG    FUNCTION TIME_CODE
	EXTERNAL STRING  FUNCTION TIME_INVCODE
	EXTERNAL STRING  FUNCTION DATE_STOREDATE
	EXTERNAL STRING  FUNCTION PRNT_FANCYDATE

	%PAGE

	ON ERROR GOTO 19000

 Init:	!
	! Initilize report
	!
	THIS_REPORT_WIDTH% = 202%
	CALL OUTP_INITFROMFILE(UTL_REPORTX, THIS_REPORT_WIDTH%)

	GOTO ExitProgram IF UTL_REPORTX::STAT

	!
	! Set up from user input
	!
	SCHED_DATE$ = DATE_STOREDATE(TRM$(UTL_REPORTX::OPTDEF(0%)))

300	!
	! Open TV_LOG_PROGRAM file
	!
	%INCLUDE "SOURCE:[TV.OPEN]TV_LOG_PROGRAM.OPN"

310	!
	! Open TV_LOG_BREAL file
	!
	%INCLUDE "SOURCE:[TV.OPEN]TV_LOG_BREAK.OPN"

320	!
	! Open TV_LOGSPOTS file
	!
	%INCLUDE "SOURCE:[TV.OPEN]TV_LOGSPOTS.OPN"

330	!
	! Open up AR customer file
	!
	%INCLUDE "SOURCE:[AR.OPEN]AR_CUSTOM.OPN"

340	!
	! Open log_source file
	!
	%INCLUDE "SOURCE:[TV.OPEN]TV_LOG_SOURCE.OPN"

350	!
	! Open log_class file
	!
	%INCLUDE "SOURCE:[TV.OPEN]TV_LOG_CLASS.OPN"

360	!
	! Open log_type file
	!
	%INCLUDE "SOURCE:[TV.OPEN]TV_LOG_TYPE.OPN"

370	!

 ReportTitle:
	EC$(0%) = "8"
	EC$(1%) = "Monday"
	EC$(2%) = "Tuesday"
	EC$(3%) = "Wednesday"
	EC$(4%) = "Thursday"
	EC$(5%) = "Friday"
	EC$(6%) = "Saturday"
	EC$(7%) = "Sunday"

	!
	! Title
	!
	TITLE$(1%) = "Detailed Log for " + PRNT_FANCYDATE(SCHED_DATE$) + " (" + &
		EC$(DATE_DAYOFWEEK(DATE_DAYCODE(SCHED_DATE$))) + ")"
	TITLE$(2%) = "TV Traffic System"
	TITLE$(3%) = ""

	!
	! Heading
	!
	TITLE$(4%) = ""

16000	!
	! Print out all of the types
	!
	CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), "Source codes", 4%)
	GOTO ExitProgram IF UTL_REPORTX::STAT

	RESET #TV_LOG_SOURCE.CH%

16010	GET #TV_LOG_SOURCE.CH%, REGARDLESS

	CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), &
		"   " + TV_LOG_SOURCE::SOURCE + "  " + TV_LOG_SOURCE::DESCR, 0%)
	GOTO ExitProgram IF UTL_REPORTX::STAT

	GOTO 16010

16100	!
	! Print out all of the types
	!
	CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), "", -2%)
	CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), "", -2%)
	GOTO ExitProgram IF UTL_REPORTX::STAT

	CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), "Class codes", 4%)
	GOTO ExitProgram IF UTL_REPORTX::STAT

	RESET #TV_LOG_CLASS.CH%

16110	GET #TV_LOG_CLASS.CH%, REGARDLESS

	CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), &
		"   " + TV_LOG_CLASS::CLASS + "  " + TV_LOG_CLASS::DESCR, 0%)
	GOTO ExitProgram IF UTL_REPORTX::STAT

	GOTO 16110

16200	!
	! Print out all of the types
	!
	CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), "", -2%)
	CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), "", -2%)
	CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), "Type codes", 4%)
	GOTO ExitProgram IF UTL_REPORTX::STAT

	RESET #TV_LOG_TYPE.CH%

16210	GET #TV_LOG_TYPE.CH%, REGARDLESS

	CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), &
		"   " + TV_LOG_TYPE::LTYPE + "  " + TV_LOG_TYPE::DESCR, 0%)
	GOTO ExitProgram IF UTL_REPORTX::STAT

	GOTO 16210

16300	!

16900	!
	! Heading
	!
	TITLE$(4%) =  "   Time slot     |St Time |Duration||" + &
		"Program/Client title                                    |" + &
		"Srce|House cart|Class|Type|Agency Cart         |Comment"

	TITLE$(5%) = ""

	BLANK_LINE$ = "                 |        |        ||" + &
		"                                                        |" + &
		"    |          |     |    |                    |"
	DASH_LINE$ = "-----------------+--------+--------++" + &
		"--------------------------------------------------------+" + &
		"----+----------+-----+----+--------------------+"
	DASH_LINE$ = DASH_LINE$ + &
		STRING$(THIS_REPORT_WIDTH% - LEN(DASH_LINE$), ASCII("-"))

	CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), BLANK_LINE$, 3000%)

	%PAGE

17000	!******************************************************************
	! OUTPUT REPORT
	!******************************************************************

	MAIN_PROGRAM::PRGNUM = ""
	MAIN_PROGRAM::START_TIME = ""
	MAIN_PROGRAM::LENGTH = ""

	CUT_PROGRAM = MAIN_PROGRAM

	!
	! Find start of program file
	!
	RESET #TV_LOG_PROGRAM.CH%, KEY #1%
	GET #TV_LOG_PROGRAM.CH%, REGARDLESS
	TV_LOG_PROGRAM.EOF% = 0%

17010	!
	! Find start of break file
	!
	RESET #TV_LOG_BREAK.CH%, KEY#1%
	GET #TV_LOG_BREAK.CH%, REGARDLESS
	TV_LOG_BREAK.EOF% = 0%

17020	!
	! Find start of spots file
	!
	RESET #TV_LOGSPOTS.CH%, KEY#1%
	GET #TV_LOGSPOTS.CH%, REGARDLESS
	TV_LOGSPOTS.EOF% = 0%

17030	!

 GetNextRec:

17100	!
	! Main loop starts here
	!
	GOTO ExitProgram IF UTL_REPORTX::STAT

	!
	! Figure out which record is the smallest
	!
	SMALLEST$ = STRING$(10%, 255%)
	SMALLEST% = 0%

	IF (TV_LOG_PROGRAM.EOF% = 0%)
	THEN
		SMALLEST$ = TV_LOG_PROGRAM::START_TIME + ""
		SMALLEST% = 1%
	END IF

	IF (TV_LOG_BREAK::SCH_TIME < SMALLEST$) AND (TV_LOG_BREAK.EOF% = 0%)
	THEN
		SMALLEST$ = TV_LOG_BREAK::SCH_TIME + ""
		SMALLEST% = 2%
	END IF

	IF (TV_LOGSPOTS::SCH_TIME < SMALLEST$) AND (TV_LOGSPOTS.EOF% = 0%)
	THEN
		SMALLEST$ = TV_LOGSPOTS::SCH_TIME + ""
		SMALLEST% = 3%
	END IF

 ! CALL ENTR_MESSAGE(NUM1$(SMALLEST%) + "-" + &
 ! NUM$(TV_LOG_PROGRAM.EOF%) + TV_LOG_PROGRAM::START_TIME + &
 ! NUM$(TV_LOG_BREAK.EOF%) + TV_LOG_BREAK::SCH_TIME) + &
 ! NUM$(TV_LOGSPOTS.EOF%) + TV_LOGSPOTS::SCH_TIME), 0%)

	SELECT SMALLEST%

		!
		! None of them were
		!
		CASE 0%
			GOTO ExitTotal

		!
		! Program
		!
		CASE 1%
			GOSUB PrintProgram

		!
		! Break
		!
		CASE 2%
			GOSUB PrintBreak

		!
		! Spot
		!
		CASE 3%
			GOSUB PrintSpot
	END SELECT

	!
	! Try for next line
	!
	GOTO 17100


	%PAGE

17200	!*******************************************************************
	! Print program
	!*******************************************************************
 PrintProgram:

	!
	! Finish up last segment
	!
	END_SEGMENT$ = TV_LOG_PROGRAM::START_TIME + ""
	GOSUB PrintSegment

	!
	! Put a dashed line across the form if we need to
	!
	IF (TV_LOG_PROGRAM::CUTAWAY = "")
	THEN
		CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), DASH_LINE$, -6%) &
			UNLESS MAIN_PROGRAM::PRGNUM = ""
		MAIN_PROGRAM = TV_LOG_PROGRAM
		CUT_PROGRAM::PRGNUM = ""
	ELSE
		CUT_PROGRAM = TV_LOG_PROGRAM
	END IF

	START_SEGMENT$ = TV_LOG_PROGRAM::START_TIME

17210	!
	! Get next program
	!
	GET #TV_LOG_PROGRAM.CH%, REGARDLESS

17220	RETURN

	%PAGE

	!*******************************************************************
	! Display one segment
	!*******************************************************************

 PrintSegment:
	GOTO PrintSegment1 &
		IF (CUT_PROGRAM::PRGNUM = "")

	!
	! Display the cutaway, if one exists
	!
	CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), BLANK_LINE$, 6%)

	IF CUT_PROGRAM::START_TIME <> START_SEGMENT$
	THEN
		TEMP$ = "(Cont)"
	ELSE
		TEMP$ = "      "
	END IF

	TEMP1$ = TIME_INVCODE(TIME_CODE(CUT_PROGRAM::START_TIME) + &
		TIME_CODE(CUT_PROGRAM::LENGTH))

	GOTO PrintSegment1 IF (TEMP1$ < START_SEGMENT$)

	IF TEMP1$ < END_SEGMENT$
	THEN
		END_SEGMENT1$ = TEMP1$
	ELSE
		END_SEGMENT1$ = END_SEGMENT$
	END IF

	TEXT$ = "                 |" + &
		PRNT_TIME(START_SEGMENT$, 0%) + "|" + &
		PRNT_TIME(TIME_INVCODE(TIME_CODE(END_SEGMENT1$) - &
			TIME_CODE(START_SEGMENT$)), 8%) + "||" + &
		CUT_PROGRAM::TITLE + "         " + TEMP$ + " |" + &
		CUT_PROGRAM::SOURCE + "|" + &
		"          |" + &
		"     |" + &
		CUT_PROGRAM::PTYPE + "|" + &
		"                    |" + &
		CUT_PROGRAM::COMMENT

	CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), TEXT$, 0%)
	GOTO ExitProgram IF UTL_REPORTX::STAT

	CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), BLANK_LINE$, 0%)

	GOTO 17290 IF TEMP1$ >= END_SEGMENT$

	START_SEGMENT$ = TEMP1$

 PrintSegment1:
	!
	! Display main program information
	!
	CUT_PROGRAM::PRGNUM = ""

	GOTO 17290 &
		IF (MAIN_PROGRAM::PRGNUM = "")

	CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), BLANK_LINE$, 6%)

	IF MAIN_PROGRAM::START_TIME <> START_SEGMENT$
	THEN
		TEMP$ = "(Cont)"
	ELSE
		TEMP$ = "      "
	END IF

	TEMP1$ = TIME_INVCODE(TIME_CODE(MAIN_PROGRAM::START_TIME) + &
		TIME_CODE(MAIN_PROGRAM::LENGTH))

	GOTO 17290 IF (TEMP1$ < START_SEGMENT$)

	IF TEMP1$ < END_SEGMENT$
	THEN
		END_SEGMENT1$ = TEMP1$
	ELSE
		END_SEGMENT1$ = END_SEGMENT$
	END IF

	TEXT$ = "                 |" + &
		PRNT_TIME(START_SEGMENT$, 0%) + "|" + &
		PRNT_TIME(TIME_INVCODE(TIME_CODE(END_SEGMENT1$) - &
			TIME_CODE(START_SEGMENT$)), 8%) + "||" + &
		MAIN_PROGRAM::TITLE + "         " + TEMP$ + " |" + &
		MAIN_PROGRAM::SOURCE + "|" + &
		"          |" + &
		"     |" + &
		MAIN_PROGRAM::PTYPE + "|" + &
		"                    |" + &
		MAIN_PROGRAM::COMMENT

	CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), TEXT$, 0%)
	GOTO ExitProgram IF UTL_REPORTX::STAT

	CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), BLANK_LINE$, 0%)

17290	RETURN

	%PAGE

17300	!*******************************************************************
	! Handle Displaying breaks
	!*******************************************************************
 PrintBreak:

	!
	! Handle segments
	!
	END_SEGMENT$ = TV_LOG_BREAK::SCH_TIME + ""
	GOSUB PrintSegment

	START_SEGMENT$ = TIME_INVCODE(TIME_CODE(TV_LOG_BREAK::SCH_TIME) + &
		TIME_CODE(TV_LOG_BREAK::LENGTH))

	!
	! Display break
	!
 !	CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), BLANK_LINE$, 0%)

	TEXT$ = "                 |" + &
		PRNT_TIME(TV_LOG_BREAK::SCH_TIME, 0%) + "|" + &
		"        ||   " + &
		TV_LOG_BREAK::DESCR + "                       |" + &
		"    |" + &
		"          |" + &
		"     |" + &
		TV_LOG_BREAK::BRKTYPE + "  |" + &
		"                    |" + &
		TV_LOG_BREAK::COMMENT

	CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), TEXT$, 0%)
	GOTO ExitProgram IF UTL_REPORTX::STAT

	CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), BLANK_LINE$, 0%)

17310	!
	! Read next record
	!
	GET #TV_LOG_BREAK.CH%, REGARDLESS

17320	RETURN

	%PAGE

17400	!*******************************************************************
	! Handle Displaying spots
	!*******************************************************************
 PrintSpot:
	!
	! Don't print if not-run
	!
	GOTO 17410 IF TV_LOGSPOTS::SPOTS_FLAG = "N"

	GET #AR_CUSTOM.CH%, KEY #0 EQ TV_LOGSPOTS::CUSNUM &
		IF TV_LOGSPOTS::SCH_TYPE = "0"

17405 !	CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), BLANK_LINE$, 0%)

	SELECT TV_LOGSPOTS::SCH_TYPE

	!
	! Fill
	!
	CASE "1"
		TEXT$ = "                 |" + &
			"        |" + &
			PRNT_TIME(TV_LOGSPOTS::LENGTH, 8%) + "||      " + &
			TV_LOGSPOTS::DESCR + "             (Fill) |" + &
			"    |" + &
			TV_LOGSPOTS::CARTNUM + "|" + &
			TV_LOGSPOTS::CLASS + " |" + &
			"    |" + &
			TV_LOGSPOTS::AGENCY_NUM + "|"

		CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), TEXT$, 0%)
		GOTO ExitProgram IF UTL_REPORTX::STAT

	!
	! In-tape commercials
	!
	CASE "2"
		TEXT$ = "                 |" + &
			"        |" + &
			PRNT_TIME(TV_LOGSPOTS::LENGTH, 8%) + "||      " + &
			TV_LOGSPOTS::DESCR + "          (In-tape) |" + &
			"    |" + &
			TV_LOGSPOTS::CARTNUM + "|" + &
			TV_LOGSPOTS::CLASS + " |" + &
			"    |" + &
			TV_LOGSPOTS::AGENCY_NUM + "|"

		CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), TEXT$, 0%)
		GOTO ExitProgram IF UTL_REPORTX::STAT


	!
	! Normal commercial
	!
	CASE ELSE
		TEXT$ = PRNT_TIME(TV_LOGSPOTS::FROM_TIME_SLOT, 0%) + "-" + &
				PRNT_TIME(TV_LOGSPOTS::TO_TIME_SLOT, 0%) + "|" + &
			"        |" + &
			PRNT_TIME(TV_LOGSPOTS::LENGTH, 8%) + "||      " + &
			AR_CUSTOM::CUSNAM + "|" + &
			"    |" + &
			TV_LOGSPOTS::CARTNUM + "|" + &
			TV_LOGSPOTS::CLASS + " |" + &
			"    |" + &
			TV_LOGSPOTS::AGENCY_NUM + "|" + &
			TV_LOGSPOTS::CARTNUM

		CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), TEXT$, 0%)
		GOTO ExitProgram IF UTL_REPORTX::STAT

	END SELECT

	CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), BLANK_LINE$, 0%)
	GOTO ExitProgram IF UTL_REPORTX::STAT

17410	!
	! Get next record
	!
	GET #TV_LOGSPOTS.CH%, REGARDLESS

17420	RETURN

 ExitTotal:
	!
	! Handle end of report
	!

 ExitProgram:
	CALL OUTP_FINISH(UTL_REPORTX)

	!
	! Exit to next program or menu
	!
	IF TRM$(UTL_REPORTX::NEXTRUN) = ""
	THEN
		CALL SUBR_3EXITPROGRAM(SCOPE, "", "")
	ELSE
		CALL SUBR_3EXITPROGRAM(SCOPE, "RUN " + UTL_REPORTX::NEXTRUN, "")
	END IF

	%PAGE

 HelpError:
	!******************************************************************
	! Help Message for an error
	!******************************************************************

	CALL HELP_3MESSAGE(SCOPE, ERN$ + " " + NUM1$(ERL) + " " + ERT$(ERR), &
		"ERR", PROGRAM$, "ERROR" + NUM1$(ERR))
	UTL_REPORTX::STAT = -1%
	GOTO ExitProgram

	%Page

19000	!******************************************************************
	! ERROR TRAPPING
	!******************************************************************

	SELECT ERR
		!
		! Record locked
		!
		CASE 154%
			SLEEP 1%
			RESUME
	END SELECT

	SELECT ERL
		CASE 300%
			PROGRAM$ = "TV_LOG_PROGRAM"
			RESUME HelpError

		CASE 320%
			TV_LOGSPOTS.EOF% = -1%
			RESUME 330

		CASE 330%
			RESUME 340

		CASE 340%
			RESUME 350

		CASE 350%
			RESUME 360

		CASE 360%
			RESUME 370

		CASE 16000%, 16010%
			RESUME 16100

		CASE 16100%, 16110%
			RESUME 16200

		CASE 16200%, 16210%
			RESUME 16300

		!
		! Nothing in program
		!
		CASE 17000%
			TV_LOG_PROGRAM.EOF% = -1%
			RESUME 17010

		!
		! Nothing in breaks
		!
		CASE 17010%
			TV_LOG_PROGRAM.EOF% = -1%
			RESUME 17020

		!
		! Nothing in spots
		!
		CASE 17020%
			TV_LOGSPOTS.EOF% = -1%
			RESUME 17030

		!
		! Ran out of programs
		!
		CASE 17210%
			TV_LOG_PROGRAM.EOF% = -1%
			RESUME 17220

		!
		! Ran out of breaks
		!
		CASE 17310%
			TV_LOG_BREAK.EOF% = -1%
			RESUME 17320

		!
		! Unable to find customer
		!
		CASE 17400%
			AR_CUSTOM::CUSNAM = "?????????????????????????"
			RESUME 17405

		!
		! End of spots file
		!
		CASE 17410%
			TV_LOGSPOTS.EOF% = -1%
			RESUME 17420

	END SELECT

	!
	! Untrapped error
	!
	PROGRAM$ = SCOPE::PRG_PROGRAM
	RESUME HelpError

32767	END
