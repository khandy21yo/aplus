1	%TITLE "TV_RPRT_LOG_RECONC - TV Traffic Log Reconcilation File"
	%SBTTL "TV System"
	%IDENT "V3.6a Calico"

	!
	! COPYRIGHT (C) 1987, 1988 BY
	!
	! Computer Management Center, Inc.
	! Idaho Falls, Idaho.
	!
	! This software is furnished under a license and may be used and
	! copied only in accordance with terms of such license and with
	! the inclusion of the above copyright notice.  This software or
	! any other copies thereof may not be provided or otherwise made
	! available to any other person.  No title to and ownership of
	! the software is hereby transferred.
	!
	! The information in this software is subject to change without
	! notice and should not be construed as a commitment by
	! Computer Management Center, Inc.
	!
	! CMC assumes no responsibility for the use or reliability of
	! its software on equipment which is not supported by CMC.
	!
	!++
	!
	! Abstract:
	!
	!	This program prints the TV Traffic Log
	!	Reconciliation file.
	!
	! Index:
	!
	!
	! Input:
	!
	!
	! Output:
	!
	!
	! Example:
	!
	!
	! Environment:
	!
	!	VAX/VMS BASIC+2 V4.4
	!
	! Author:
	!
	!	12/15/87 - Kevin Handy
	!
	! Compile:
	!
	!	$ BAS TV_SOURCE:TV_RPRT_LOG_RECONC
	!	$ LINK/EXECUTABLE=TV_EXE:*.EXE TV_RPRT_LOG_RECONC, -
	!		FUNC_LIB:CMCLINK/OPTION
	!	$ DELETE TV_RPRT_LOG_RECONC.OBJ;*
	!
	! Modification history:
	!
	!	04/15/95 - Kevin Handy
	!		(V3.6)
	!		Update to V3.6 coding standards
	!
	!	08/22/98 - Kevin Handy
	!		(V3.6a Calico)
	!		Update to V3.6a coding standards
	!--
	%PAGE

	OPTION SIZE = (INTEGER LONG, REAL GFLOAT)

	!
	! Declare constants
	!
	DECLARE INTEGER CONSTANT MAX_BREAKS = 200%
	DECLARE INTEGER CONSTANT MAX_CONF = 200%

	!
	! Include files
	!
	%INCLUDE "FUNC_INCLUDE:FUNCTION.HB"

	MAP (SCOPE) SCOPE_STRUCT SCOPE


 !	%INCLUDE %FROM %CDD "CDD$TOP.UTL.UTL_REPORTX"
	%INCLUDE "SOURCE:[UTL.OPEN]UTL_REPORTX.HB"
	DECLARE				UTL_REPORTX_CDD		UTL_REPORTX

 !	%INCLUDE %FROM %CDD "CDD$TOP.TV.TV_COMMER"
	%INCLUDE "SOURCE:[TV.OPEN]TV_COMMER.HB"
	MAP	(TV_COMMER)		TV_COMMER_CDD		TV_COMMER

 !	%INCLUDE %FROM %CDD "CDD$TOP.TV.TV_COMMER_SKED_INSTR"
	%INCLUDE "SOURCE:[TV.OPEN]TV_COMMER_SKED_INSTR.HB"
	MAP	(TV_COMMER_SKED_INSTR)	TV_COMMER_SKED_INSTR_CDD TV_COMMER_SKED_INSTR

 !	%INCLUDE %FROM %CDD "CDD$TOP.TV.TV_LOGSPOTS"
	%INCLUDE "SOURCE:[TV.OPEN]TV_LOGSPOTS.HB"
	MAP	(TV_LOGSPOTS)		TV_LOGSPOTS_CDD		TV_LOGSPOTS

 !	%INCLUDE %FROM %CDD "CDD$TOP.AR.AR_CUSTOM"
	%INCLUDE "SOURCE:[AR.OPEN]AR_CUSTOM.HB"
	MAP	(AR_CUSTOM)		AR_CUSTOM_CDD		AR_CUSTOM

 !	%INCLUDE %FROM %CDD "CDD$TOP.TV.TV_CONTROL"
	%INCLUDE "SOURCE:[TV.OPEN]TV_CONTROL.HB"
	MAP	(TV_CONTROL)		TV_CONTROL_CDD		TV_CONTROL

 !	%INCLUDE %FROM %CDD "CDD$TOP.TV.TV_LOG_BREAK"
	%INCLUDE "SOURCE:[TV.OPEN]TV_LOG_BREAK.HB"
	MAP	(TV_LOG_BREAK)		TV_LOG_BREAK_CDD	TV_LOG_BREAK

 !	%INCLUDE %FROM %CDD "CDD$TOP.TV.TV_BREAK_TYPE"
	%INCLUDE "SOURCE:[TV.OPEN]TV_BREAK_TYPE.HB"
	MAP	(TV_BREAK_TYPE)		TV_BREAK_TYPE_CDD	TV_BREAK_TYPE

 !	%INCLUDE %FROM %CDD "CDD$TOP.TV.TV_CUSTOM_CONFLICT"
	%INCLUDE "SOURCE:[TV.OPEN]TV_CUSTOM_CONFLICT.HB"
	MAP	(TV_CUSTOM_CONFLICT)	TV_CUSTOM_CONFLICT_CDD	TV_CUSTOM_CONFLICT

 !	%INCLUDE %FROM %CDD "CDD$TOP.TV.TV_COMMER_CONFLICT"
	%INCLUDE "SOURCE:[TV.OPEN]TV_COMMER_CONFLICT.HB"
	MAP	(TV_COMMER_CONFLICT)	TV_COMMER_CONFLICT_CDD	TV_COMMER_CONFLICT

	!
	! Special record for conflicts
	!
	MAP (QBERT) RFA QBERT_RFA
	MAP (QBERT) STRING QBERT_STRING = 6%

	RECORD TV_TEMP_CONFLICT_CDD
		STRING	TTIME = 6%		! Time of spot
		STRING	TFLAG = 1%		! Type flag
						! A = Form (here)
						! B = Form (over)
						! C = Conflict (here)
						! D = Conflict (over)
		STRING	TKEY = 8%		! Data (based on type)
		STRING	TRFA = 6%		! Pointer to spot
		INTEGER	TPRIOR			! Priority of spot
		INTEGER	TLENGTH			! Length of break
		STRING	TSTATUS = 3%		! Spot status
	END RECORD

	MAP (TV_TEMP_CONFLICT) TV_TEMP_CONFLICT_CDD TV_TEMP_CONFLICT


	!
	! Maps for channel numbers
	!
	MAP (CH_TV_TEMP_CONFLICT) TV_TEMP_CONFLICT.CH%
	MAP (CH_TV_COMMER) TV_COMMER.CH%
	MAP (CH_TV_COMMER_SKED_INSTR) TV_COMMER_SKED_INSTR.CH%
	MAP (CH_TV_LOGSPOTS) TV_LOGSPOTS.CH%
	MAP (CH_TV_CONTROL) TV_CONTROL.CH%
	MAP (CH_TV_LOG_BREAK) TV_LOG_BREAK.CH%
	MAP (CH_TV_BREAK_TYPE) TV_BREAK_TYPE.CH%
	MAP (CH_TV_CUSTOM_CONFLICT) TV_CUSTOM_CONFLICT.CH%
	MAP (CH_TV_COMMER_CONFLICT) TV_COMMER_CONFLICT.CH%

	!
	! Arrays to work in
	!
	DIM TV_LOG_BREAK_CDD TV_BREAK_ARRAY(MAX_BREAKS)
	DIM BREAK_TOTCOM%(MAX_BREAKS)
	DIM BREAK_AVAIL%(MAX_BREAKS)
	DIM TOTAL_RFA$(MAX_CONF), TOTAL_CONFLICT$(MAX_CONF)

	!
	! External functions
	!
	EXTERNAL STRING  FUNCTION PRNT_TIME
	EXTERNAL STRING  FUNCTION PRNT_DATE
	EXTERNAL LONG    FUNCTION DATE_DAYCODE
	EXTERNAL LONG    FUNCTION DATE_DAYOFWEEK
	EXTERNAL STRING  FUNCTION PRNT_FANCYDATE
	EXTERNAL STRING  FUNCTION DATE_STOREDATE
	EXTERNAL LONG    FUNCTION TIME_CODE

	EXTERNAL STRING FUNCTION TV_FIND_CONFLICT

	%PAGE

	ON ERROR GOTO 19000

 Init:	!
	! Initilize report
	!
	CALL OUTP_INITFROMFILE(UTL_REPORTX, 130%)

	GOTO ExitProgram IF UTL_REPORTX::STAT

	!
	! Set up from user input
	!
	SCHED_DATE$ = DATE_STOREDATE(EDIT$(UTL_REPORTX::OPTDEF(0%), 132%))
	SCHED_DAY% = DATE_DAYOFWEEK(DATE_DAYCODE(SCHED_DATE$))

300	!
	! Open files
	!
	%INCLUDE "SOURCE:[TV.OPEN]TV_COMMER.OPN"

	%INCLUDE "SOURCE:[TV.OPEN]TV_COMMER_SKED_INSTR.OPN"

	%INCLUDE "SOURCE:[TV.OPEN]TV_LOGSPOTS.OPN"

	%INCLUDE "SOURCE:[AR.OPEN]AR_CUSTOM.OPN"

	%INCLUDE "SOURCE:[TV.OPEN]TV_CONTROL.OPN"
	GET #TV_CONTROL.CH%, RECORD 1%, REGARDLESS

	%INCLUDE "SOURCE:[TV.OPEN]TV_LOG_BREAK.OPN"

	%INCLUDE "SOURCE:[TV.OPEN]TV_BREAK_TYPE.OPN"

	%INCLUDE "SOURCE:[TV.OPEN]TV_CUSTOM_CONFLICT.OPN"

	%INCLUDE "SOURCE:[TV.OPEN]TV_COMMER_CONFLICT.OPN"

3000	!
	! Load all breaks (containing avails), and all spots that
	! have been scheduled.
	!
 LoadBreaks:
	CALL TV_LOAD_BREAKS(IO_MESSAGE%, TOTAL_BREAKS%, TV_BREAK_ARRAY(), &
		BREAK_TOTCOM%(), BREAK_AVAIL%())

	CALL ENTR_3MESSAGE(SCOPE, NUM1$(TOTAL_BREAKS%) + " Breaks loaded.", 1%)


 ReportTitle:
	EC$(0%) = "8"
	EC$(1%) = "Monday"
	EC$(2%) = "Tuesday"
	EC$(3%) = "Wednesday"
	EC$(4%) = "Thursday"
	EC$(5%) = "Friday"
	EC$(6%) = "Saturday"
	EC$(7%) = "Sunday"

	!
	! Title
	!
	TITLE$(1%) = "Log Reconcilation for " + PRNT_FANCYDATE(SCHED_DATE$) + &
		" (" + EC$(SCHED_DAY%) + ")"
	TITLE$(2%) = "TV Traffic System"
	TITLE$(3%) = ""

	!
	! Heading
	!
	TITLE$(4%) = ""

	%PAGE

	!******************************************************************
	! OUTPUT REPORT
	!******************************************************************

5000	!*******************************************************************
	! Generate the list of ordered spots for this date
	!
	! Note: This section was originally stolen from the auto-scheduler
	! and has been modified for this report.
	!*******************************************************************

	!
	! Scan through the commercial header file for any commercial
	! order that has any possibility of having a order for the
	! current date.
	!
	RESET #TV_COMMER.CH%

	PRINTED_HEADER$ = "----------------"
	TOTAL_EXTRA% = 0%
	TOTAL_MISSED% = 0%

5010	GET #TV_COMMER.CH%, REGARDLESS

	!
	! The commercial header cannot have any orders for this
	! schedule when:
	!
	!	1. The order dates do not have the schedule date in
	!	its range. (Remember that a blank date is a TFN).
	!	Note that a blank start date will take care of
	!	itself in the comparison so no special tests are
	!	needed for it.
	!
	TEMP% = VAL%(TV_COMMER::END_DATE)

	GOTO 5010 IF &
		(TV_COMMER::START_DATE > SCHED_DATE$) OR		! 1. &
		(TV_COMMER::END_DATE < SCHED_DATE$ AND &
			TEMP% <> 0%)

5020	!
	! Now that we have a header that may have commercials, we
	! need to look at the line items to see if there are any
	! commercials there.
	!
	FIND #TV_COMMER_SKED_INSTR.CH%, &
		KEY #0 GE TV_COMMER::FRMNUM, REGARDLESS

5030	GET #TV_COMMER_SKED_INSTR.CH%, REGARDLESS

	GOTO 5010 IF TV_COMMER_SKED_INSTR::FRMNUM <> TV_COMMER::FRMNUM

	!
	! Check out the simple parts of the line to see if it can
	! have any commercials for this date.  There can be no spots
	! for this line when:
	!
	!	1. The from-to dates are out of range.
	!	2. The spots/week value is zero.
	!
	TEMP% = VAL%(TV_COMMER_SKED_INSTR::END_DATE)

	GOTO 5030 IF &
		(TV_COMMER_SKED_INSTR::START_DATE > SCHED_DATE$) OR	! 1. &
		(TV_COMMER_SKED_INSTR::END_DATE < SCHED_DATE$ AND &
			TEMP% <> 0%) OR &
		(TV_COMMER_SKED_INSTR::SPOTS_PER_DAY(SCHED_DAY% - 1%) = 0%) ! 2.

	!
	! Now that we have a possible order, we need to fix any
	! of the variable parts of the line (-1's in the line).
	! We will use the TV_FIND_ROTATION function for this,
	! which modifies the record (SO DON'T UPDATE THE RECORD
	! IN THE SKED_INSTR FILE AFTER CALLING THIS) so that it
	! looks like a normal record.
	!
	CALL TV_FIND_ROTATION(SCHED_DATE$, TV_COMMER_SKED_INSTR)

	!
	! Now that we have hardened the number of spots per day, we can
	! decide how many we need for this date.  Take the total number
	! of spots, and subtract the number of spots that have already
	! been scheduled to get the total that need to be scheduled.
	!
	! If this number is negitive, we probibly should remove
	! the extras, but for now, we will allow them to stay.
	!
	NEEDED_ORDER%, TOTAL_ORDER% = &
		TV_COMMER_SKED_INSTR::SPOTS_PER_DAY(SCHED_DAY% - 1%)

5040	FIND #TV_LOGSPOTS.CH%, &
		KEY #2% GE TV_COMMER_SKED_INSTR::FRMNUM + &
		TV_COMMER_SKED_INSTR::SKED_NUM, &
		REGARDLESS

5045	GET #TV_LOGSPOTS.CH%, REGARDLESS

	IF (TV_COMMER_SKED_INSTR::FRMNUM = TV_LOGSPOTS::FRMNUM) AND &
		(TV_COMMER_SKED_INSTR::SKED_NUM = TV_LOGSPOTS::SKEDNUM)
	THEN
		!
		! There are a few special types that are not counted
		! as a spot scheduled against this order.
		!
		!	S-MG	Scheduled as a make good.
		!
		TOTAL_ORDER% = TOTAL_ORDER% - 1% &
			UNLESS INSTR(1%, "S-MG", &
			TV_LOGSPOTS::SCH_TYPE + "-" + TV_LOGSPOTS::SPOTS_FLAG)

		!
		! Look for more
		!
		GOTO 5045
	END IF

5050	!
	! If we come up with a amount unmatched, tell them so.
	!
	IF TOTAL_ORDER% <> 0%
	THEN
		GOSUB DisplayCommerHeader
		GOSUB DisplayLine
	END IF

	!
	! Now, go back for the next line
	!
	GOTO 5030

5080	GOTO ExitTotal

	%PAGE

17000	!*******************************************************************
	! Display the commercial header, if it has not already been
	! displayed.
	!*******************************************************************

 DisplayCommerHeader:
	!
	! If we have already displayed this header, don't do it again
	!
	GOTO 17090 IF PRINTED_HEADER$ = TV_COMMER::FRMNUM

	PRINTED_HEADER$ = TV_COMMER::FRMNUM + ""
	PRINT_FLAG% = -1%

	!
	! Put some seperation between forms
	!
	TEXT$ = "Order    Customer   Name                      " + &
		"  Start      End      Prior Class So   Spot     Prod Conflict"

	CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), "", 8%)
	CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), "", 7%)
	CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), TEXT$, 6%)
	GOTO ExitProgram IF UTL_REPORTX::STAT


17021	!
	! Get customer name/address
	!
	GET #AR_CUSTOM.CH%, KEY#0 EQ TV_COMMER::CUSNUM
	CUSNAME$ = AR_CUSTOM::CUSNAM + ""


17028	!
	! Print out one line
	!
	TEXT$ = TV_COMMER::FRMNUM + " " + &
		TV_COMMER::CUSNUM + " " + &
		CUSNAME$ + " " + &
		PRNT_DATE(TV_COMMER::START_DATE, 8%) + "-" + &
		PRNT_DATE(TV_COMMER::END_DATE, 8%) + " " + &
		FORMAT$(TV_COMMER::PRIORITY, "##### ") + &
		TV_COMMER::CLASS + "  " + &
		TV_COMMER::SOURCE + " " + &
		PRNT_TIME(TV_COMMER::SPOT_SEP, 0%) + " " + &
		PRNT_TIME(TV_COMMER::PROD_SEP, 0%) + " " + &
		TV_COMMER::CONFLICT

	TEXT$ = TEXT$ + "  (Canceled)" &
		IF TV_COMMER::CANCELLED = "Y"

	CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), TEXT$, 0%)
	GOTO ExitProgram IF UTL_REPORTX::STAT

	IF TV_COMMER::AGENCY_NUM <> "          "
	THEN
		TEXT$ = "         Agency: " + &
			TV_COMMER::AGENCY_NUM + "  " + &
			FORMAT$(TV_COMMER::AGENCY_PCT, "###.##%")

		CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), TEXT$, 0%)
		GOTO ExitProgram IF UTL_REPORTX::STAT
	END IF

	IF TV_COMMER::REP_NUM <> "          "
	THEN
		TEXT$ = "         Rep:    " + &
			TV_COMMER::REP_NUM + "  " + &
			FORMAT$(TV_COMMER::REP_PCT, "###.##%")

		CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), TEXT$, 0%)
		GOTO ExitProgram IF UTL_REPORTX::STAT
	END IF

17090	RETURN

	%PAGE

17100	!*******************************************************************
	! Display the line that doesn't work
	!*******************************************************************

 DisplayLine:
	!
	! Recall the original schedule
	!
	GET #TV_COMMER_SKED_INSTR.CH%, RFA GETRFA(TV_COMMER_SKED_INSTR.CH%)

	!
	! Display the order
	!
	TEXT$ = "      Sk Start-date End-date   Start-tm " + &
		"End-tm    In/Out  Mo Tu We Th Fr Sa Su Total " + &
		"Length       Rate  Missing/extra"

	CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), "", 6%)
	CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), TEXT$, 0%)
	GOTO ExitProgram IF UTL_REPORTX::STAT

	TEMP$ = ""
	FOR LOOP% = 0% TO 6%
		IF TV_COMMER_SKED_INSTR::SPOTS_PER_DAY(LOOP%) = 0%
		THEN
			TEMP$ = TEMP$ + "  ."
		ELSE
			TEMP$ = TEMP$ + &
			FORMAT$(TV_COMMER_SKED_INSTR::SPOTS_PER_DAY(LOOP%), "###")
		END IF
	NEXT LOOP%

	IF TOTAL_ORDER% > 0%
	THEN
		TEMP1$ = "Missing " + NUM1$(TOTAL_ORDER%) + &
			" of " + NUM1$(NEEDED_ORDER%)
		TOTAL_MISSING% = TOTAL_MISSING% + TOTAL_ORDER%
	ELSE
		TEMP1$ = "Extra " + NUM1$(-TOTAL_ORDER%) + &
			" of " + NUM1$(NEEDED_ORDER%)
		TOTAL_EXTRA% = TOTAL_EXTRA% - TOTAL_ORDER%
	END IF

	TEXT$ = "      " + &
		TV_COMMER_SKED_INSTR::SKED_NUM + " " + &
		PRNT_DATE(TV_COMMER_SKED_INSTR::START_DATE, 8%) + "-" + &
		PRNT_DATE(TV_COMMER_SKED_INSTR::END_DATE, 8%) + " " + &
		PRNT_TIME(TV_COMMER_SKED_INSTR::START_TIME, 0%) + "-" + &
		PRNT_TIME(TV_COMMER_SKED_INSTR::END_TIME, 0%) + " " + &
		FORMAT$(TV_COMMER_SKED_INSTR::IN_WEEKS, "###") + "/" + &
		FORMAT$(NUM1$(TV_COMMER_SKED_INSTR::OUT_WEEKS), "'LL ") + &
		TEMP$ + &
		FORMAT$(TV_COMMER_SKED_INSTR::TOTAL_SPOTS, "###### ") + &
		PRNT_TIME(TV_COMMER_SKED_INSTR::LENGTH, 0%) + " " + &
		FORMAT$(TV_COMMER_SKED_INSTR::RATE_PER_SPOT, "$$###.##") + " " + &
		TEMP1$

	CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), TEXT$, 0%)
	GOTO ExitProgram IF UTL_REPORTX::STAT

	GOSUB FindReasons IF TOTAL_ORDER% > 0%

	RETURN

	%PAGE

17200	!*******************************************************************
	! Find all the reasons why a commercail may not have run in a break
	!*******************************************************************
 FindReasons:

	IS_A_BREAK% = 0%
	SPOT_LENGTH% = TIME_CODE(TV_COMMER_SKED_INSTR::LENGTH)
	THIS_CONFLICT$ = TV_FIND_CONFLICT(TV_COMMER::CUSNUM, &
		TV_COMMER::CONFLICT)

	!
	! Verify length of the spot
	!
	IF SPOT_LENGTH% <= 0%
	THEN
		CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), "", 3%)
		GOTO ExitProgram IF UTL_REPORTX::STAT

		CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), &
			"         Length of spot is undefined.", 0%)
		GOTO ExitProgram IF UTL_REPORTX::STAT
	END IF

	FOR LOOP% = 1% TO TOTAL_BREAKS%

		!
		! Skip break if not in time range
		!
		IF (TV_BREAK_ARRAY(LOOP%)::SCH_TIME < &
			TV_COMMER_SKED_INSTR::START_TIME) OR &
			(TV_BREAK_ARRAY(LOOP%)::SCH_TIME > &
			TV_COMMER_SKED_INSTR::END_TIME)
		THEN
			GOTO 17280
		END IF

		!
		! Display this break
		!
		IS_A_BREAK% = -1%

		TEXT$ = "         Break " + &
			PRNT_TIME(TV_BREAK_ARRAY(LOOP%)::SCH_TIME, 0%) + " " + &
			LEFT(TV_BREAK_ARRAY(LOOP%)::DESCR, 30%) + " " + &
			TV_LOG_BREAK::BRKTYPE + " " + &
			PRNT_TIME(TV_BREAK_ARRAY(LOOP%)::LENGTH, 0%) + " " + &
			FORMAT$(TV_BREAK_ARRAY(LOOP%)::PRIORITY, "##### ") + &
			TV_BREAK_ARRAY(LOOP%)::MATCH + " " + &
			LEFT(TV_BREAK_ARRAY(LOOP%)::COMMENT, 30%)

		CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), "", 0%)
		GOTO ExitProgram IF UTL_REPORTX::STAT

		CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), TEXT$, 0%)
		GOTO ExitProgram IF UTL_REPORTX::STAT

		!
		! Check break for room
		!
		IF SPOT_LENGTH% > TIME_CODE(TV_BREAK_ARRAY(LOOP%)::LENGTH)
		THEN
			CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), &
				"            Break is too short.", 0%)
			GOTO ExitProgram IF UTL_REPORTX::STAT
		ELSE
			IF SPOT_LENGTH% > BREAK_AVAIL%(LOOP%)
			THEN
				CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), &
					"            Not enough available time.", 0%)
				GOTO ExitProgram IF UTL_REPORTX::STAT
			END IF
		END IF

17220		!
		! Form conflict in this break
		!
		GET #TV_TEMP_CONFLICT.CH%, &
			KEY #0 EQ TV_BREAK_ARRAY(LOOP%)::SCH_TIME + &
				"A" + TV_COMMER::FRMNUM, &
			REGARDLESS

		WHILE (TV_TEMP_CONFLICT::TTIME = TV_BREAK_ARRAY(LOOP%)::SCH_TIME) AND &
			(TV_TEMP_CONFLICT::TFLAG = "A") AND &
			(TV_TEMP_CONFLICT::TKEY = TV_COMMER::FRMNUM)

			TEXT$ = "Form conflict in this break"
			GOSUB ShowBadSpot

			GET #TV_TEMP_CONFLICT.CH%, REGARDLESS
		NEXT

17230		!
		! Form conflict over breaks
		!
		GET #TV_TEMP_CONFLICT.CH%, &
			KEY #0 EQ TV_BREAK_ARRAY(LOOP%)::SCH_TIME + &
				"B" + TV_COMMER::FRMNUM, &
			REGARDLESS

		WHILE (TV_TEMP_CONFLICT::TTIME = TV_BREAK_ARRAY(LOOP%)::SCH_TIME) AND &
			(TV_TEMP_CONFLICT::TFLAG = "B") AND &
			(TV_TEMP_CONFLICT::TKEY = TV_COMMER::FRMNUM)

			TEXT$ = "Form conflict from another break"
			GOSUB ShowBadSpot

			GET #TV_TEMP_CONFLICT.CH%, REGARDLESS
		NEXT

17240		!
		! Seek out conflict codes
		!
		GET #TV_TEMP_CONFLICT.CH%, &
			KEY #0 GE TV_BREAK_ARRAY(LOOP%)::SCH_TIME + "C", &
			REGARDLESS

		TOTAL_CONFLICT% = 0%

		WHILE (TV_TEMP_CONFLICT::TTIME = TV_BREAK_ARRAY(LOOP%)::SCH_TIME) AND &
			((TV_TEMP_CONFLICT::TFLAG = "C") OR &
			(TV_TEMP_CONFLICT::TFLAG = "D"))

			IF INSTR(1%, THIS_CONFLICT$, TV_TEMP_CONFLICT::TKEY)
			THEN
				FOR LOOP1% = 1% TO TOTAL_CONFLICT%

					IF TOTAL_RFA$(LOOP1%) = &
						TV_TEMP_CONFLICT::TRFA
					THEN
						TOTAL_CONFLICT$(LOOP1%) = &
							TOTAL_CONFLICT$(LOOP1%) + &
							", " + TV_TEMP_CONFLICT::TKEY
						GOTO 17245
					END IF

				NEXT LOOP1%

				LOOP1%, TOTAL_CONFLICT% = TOTAL_CONFLICT% + 1%
				TOTAL_RFA$(LOOP1%) = TV_TEMP_CONFLICT::TRFA
				TOTAL_CONFLICT$(LOOP1%) = TV_TEMP_CONFLICT::TKEY
			END IF

17245			GET #TV_TEMP_CONFLICT.CH%, REGARDLESS

		NEXT

17250		FOR LOOP1% = 1% TO TOTAL_CONFLICT%

			TV_TEMP_CONFLICT::TRFA = TOTAL_RFA$(LOOP1%)
			TEXT$ = "Conflict " + &
				EDIT$(TOTAL_CONFLICT$(LOOP1%), 16%)
			GOSUB ShowBadSpot

		NEXT LOOP1%

17280	NEXT LOOP%

	IF IS_A_BREAK% = 0%
	THEN
		CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), "", 0%)
		GOTO ExitProgram IF UTL_REPORTX::STAT

		CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), &
			"         No breaks in time range!", 0%)
		GOTO ExitProgram IF UTL_REPORTX::STAT
	END IF

	RETURN

	%PAGE

17300	!*******************************************************************
	! Print out information about a spot
	!*******************************************************************

 ShowBadSpot:

	QBERT_STRING = TV_TEMP_CONFLICT::TRFA

	GET #TV_LOGSPOTS.CH%, RFA QBERT_RFA, REGARDLESS

17310	!
	! Display information on spot
	!
	TEXT$ = "            " + &
		PRNT_TIME(TV_LOGSPOTS::SCH_TIME, 0%) + " " + &
		TV_LOGSPOTS::CUSNUM + " " + &
		TV_LOGSPOTS::FRMNUM + " " + &
		TV_LOGSPOTS::SKEDNUM + " " + &
		PRNT_TIME(TV_LOGSPOTS::LENGTH, 0%) + " " + &
		FORMAT$(TV_LOGSPOTS::RATE, "$$####.##") + " " + &
		TV_LOGSPOTS::SPOTS_FLAG + " " + &
		TV_LOGSPOTS::SPOTS_CODE + " " + &
		TV_LOGSPOTS::CARTNUM + " " + &
		TEXT$

17320	CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), TEXT$, 0%)
	GOTO ExitProgram IF UTL_REPORTX::STAT

	RETURN

	%PAGE

	!*******************************************************************
	! Print totals
	!*******************************************************************

 ExitTotal:

	TEXT$ = "***Total Missing = " + NUM1$(TOTAL_MISSING%) + &
		"    Total Extra = " + NUM1$(TOTAL_EXTRA%)

	CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), "", -2%)
	CALL OUTP_LINE("", UTL_REPORTX, TITLE$(), TEXT$, -1%)
	GOTO ExitProgram IF UTL_REPORTX::STAT

	!
	! Handle end of report
	!

 ExitProgram:
	CALL OUTP_FINISH(UTL_REPORTX)

	!
	! Exit to next program or menu
	!
	IF TRM$(UTL_REPORTX::NEXTRUN) = ""
	THEN
		CALL SUBR_3EXITPROGRAM(SCOPE, "", "")
	ELSE
		CALL SUBR_3EXITPROGRAM(SCOPE, "RUN " + UTL_REPORTX::NEXTRUN, "")
	END IF

	%PAGE

 HelpError:
	!******************************************************************
	! Help Message for an error
	!******************************************************************
	CALL HELP_3MESSAGE(SCOPE, ERN$ + " " + NUM1$(ERL) + " " + ERT$(ERR), &
		"ERR", PROGRAM$, "ERROR" + NUM1$(ERR))
	UTL_REPORTX::STAT = -1%
	GOTO ExitProgram

	%Page

19000	!******************************************************************
	! ERROR TRAPPING
	!******************************************************************

	SELECT ERR
		CASE 154%	! Locked record
			SLEEP 1%
			RESUME
	END SELECT

	SELECT ERL
		CASE 300%
			PROGRAM$ = "TV_FILL"
			RESUME HelpError

	!
	! End of commer file
	!
	CASE 5010%
		RESUME 5080

	!
	! Error when no/nomore lines can be found for a order.
	!
	CASE 5020%, 5030%
		RESUME 5010

	!
	! Error when searching for existing spots
	!
	CASE 5040%, 5045%
		RESUME 5050

	!
	! Error scanning TV_TEMP_CONFLICT file
	!
	CASE 17220%
		RESUME 17230

	CASE 17230%
		RESUME 17240

	CASE 17240%, 17245%
		RESUME 17250

	END SELECT

	!
	! Untrapped error
	!
	PROGRAM$ = SCOPE::PRG_PROGRAM
	RESUME HelpError

32767	END
