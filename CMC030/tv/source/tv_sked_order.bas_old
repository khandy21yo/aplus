1	%TITLE "TV_SKED_ORDER - Schedule orders into breaks"
	%SBTTL "TV System"
	%IDENT "V3.6a Calico"

	SUB TV_SKED_ORDER(IO_MESSAGE%, SCHED_DATE$, SCHED_DAY%)

	!
	! COPYRIGHT (C) 1987, 1988 BY
	! Computer Management Center, Inc.
	! Idaho Falls, Idaho.
	!
	! This software is furnished under a license and may be used and
	! copied only in accordance with terms of such license and with
	! the inclusion of the above copyright notice.  This software or
	! any other copies thereof may not be provided or otherwise made
	! available to any other person.  No title to and ownership of
	! the software is hereby transferred.
	!
	! The information in this software is subject to change without
	! notice and should not be construed as a commitment by
	! Computer Management Center, Inc.
	!
	! CMC assumes no responsibility for the use or reliability of
	! its software on equipment which is not supported by CMC.
	!
	!++
	!
	! Abstract:
	!
	!	This subroutine is used to schedule orders into the
	!	logs.  (This is the dynamic scheduler).
	!
	! Index:
	!
	!
	! Input:
	!
	!	IO_MESSAGE%
	!		Window passed through for messages to be printed
	!		on.  Cursor must have been positioned.
	!
	!	SCHED_DATE$
	!		Date into which commercials are to be scheduled.
	!
	!	SCHED_DAY%
	!		Day of week for schedule.  This is passed through
	!		just so it doesn't need to be calculated again, as
	!		the calling program probibly needed it.
	!
	! Output:
	!
	!	Creates commercial spots in the TV_LOGSPOTS file.
	!
	! Example:
	!
	!
	! Environment:
	!
	!	VAX/VMS BASIC+2 V4.4
	!
	! Compile:
	!
	!	$ BAS TV_SOURCE:TV_SKED_ORDER/LINE
	!	$ LIB/REP FUNC_LIB:CMCFUN TV_SKED_ORDER
	!	$ DELETE TV_SKED_ORDER.OBJ;*
	!
	! Author:
	!
	!	12/04/87 - Kevin Handy
	!
	! Modification history:
	!
	!	08/08/88 - Kevin Handy
	!		Added sequence number field to spots file.
	!
	!	04/15/95 - Kevin Handy
	!		(V3.6)
	!		Update to V3.6 coding standards
	!
	!	08/22/98 - Kevin Handy
	!		(V3.6a Calico)
	!		Update to V3.6a coding standards
	!--
	%PAGE

	OPTION SIZE = (INTEGER LONG, REAL GFLOAT)

	!
	! Include files
	!
	%INCLUDE "FUNC_INCLUDE:FUNCTION.HB"

	MAP (SCOPE) SCOPE_STRUCT SCOPE


	!
	! Declare constants
	!
	DECLARE INTEGER CONSTANT MAX_BREAKS = 200%
	DECLARE INTEGER CONSTANT MAX_CONF = 200%

	!
	! Maps
	!
 !	%INCLUDE %FROM %CDD "CDD$TOP.TV.TV_COMMER"
	%INCLUDE "SOURCE:[TV.OPEN]TV_COMMER.HB"
	MAP	(TV_COMMER)		TV_COMMER_CDD		TV_COMMER
	MAP	(TV_COMMER1)		TV_COMMER_CDD		TV_COMMER1

 !	%INCLUDE %FROM %CDD "CDD$TOP.TV.TV_COMMER_SKED_INSTR"
	%INCLUDE "SOURCE:[TV.OPEN]TV_COMMER_SKED_INSTR.HB"
	MAP	(TV_COMMER_SKED_INSTR)	TV_COMMER_SKED_INSTR_CDD TV_COMMER_SKED_INSTR
	MAP	(TV_COMMER_SKED_INSTR1) TV_COMMER_SKED_INSTR_CDD TV_COMMER_SKED_INSTR1

 !	%INCLUDE %FROM %CDD "CDD$TOP.TV.TV_LOG_BREAK"
	%INCLUDE "SOURCE:[TV.OPEN]TV_LOG_BREAK.HB"
	MAP	(TV_LOG_BREAK)		TV_LOG_BREAK_CDD	TV_LOG_BREAK

 !	%INCLUDE %FROM %CDD "CDD$TOP.TV.TV_LOGSPOTS"
	%INCLUDE "SOURCE:[TV.OPEN]TV_LOGSPOTS.HB"
	MAP	(TV_LOGSPOTS)		TV_LOGSPOTS_CDD		TV_LOGSPOTS

 !	%INCLUDE %FROM %CDD "CDD$TOP.TV.TV_SKED_WORK"
	%INCLUDE "SOURCE:[TV.OPEN]TV_SKED_WORK.HB"
	MAP	(TV_SKED_WORK)		TV_SKED_WORK_CDD	TV_SKED_WORK

 !	%INCLUDE %FROM %CDD "CDD$TOP.TV.TV_BREAK_TYPE"
	%INCLUDE "SOURCE:[TV.OPEN]TV_BREAK_TYPE.HB"
	MAP	(TV_BREAK_TYPE)		TV_BREAK_TYPE_CDD	TV_BREAK_TYPE

 !	%INCLUDE %FROM %CDD "CDD$TOP.TV.TV_CONTROL"
	%INCLUDE "SOURCE:[TV.OPEN]TV_CONTROL.HB"
	MAP	(TV_CONTROL)		TV_CONTROL_CDD		TV_CONTROL

	!
	! Special record for conflicts
	!
	MAP (QBERT) RFA QBERT_RFA
	MAP (QBERT) STRING QBERT_STRING = 6%

	RECORD TV_TEMP_CONFLICT_CDD
		STRING	TTIME = 6%		! Time of spot
		STRING	TFLAG = 1%		! Type flag
						! A = Form (here)
						! B = Form (over)
						! C = Conflict (here)
						! D = Conflict (over)
		STRING	TKEY = 8%		! Data (based on type)
		STRING	TRFA = 6%		! Pointer to spot
		INTEGER	TPRIOR			! Priority of spot
		INTEGER	TLENGTH			! Length of break
		STRING	TSTATUS = 3%		! Spot status
	END RECORD

	MAP	(TV_TEMP_CONFLICT)	TV_TEMP_CONFLICT_CDD	TV_TEMP_CONFLICT

	!
	! Channels and stuff to pass around
	!
	MAP	(CH_TV_COMMER)			TV_COMMER.CH%
	MAP	(CH_TV_COMMER_SKED_INSTR)	TV_COMMER_SKED_INSTR.CH%
	MAP	(CH_TV_SKED_WORK)		TV_SKED_WORK.CH%
	MAP	(CH_TV_LOG_BREAK)		TV_LOG_BREAK.CH%
	MAP	(CH_TV_LOGSPOTS)		TV_LOGSPOTS.CH%
	MAP	(CH_TV_BREAK_TYPE)		TV_BREAK_TYPE.CH%
	MAP	(CH_TV_TEMP_CONFLICT)		TV_TEMP_CONFLICT.CH%

	!
	! Arrays to work in
	!
	DIM	TV_LOG_BREAK_CDD	TV_BREAK_ARRAY(MAX_BREAKS)
	DIM				BREAK_BADNESS%(MAX_BREAKS)
	DIM				BREAK_IMPOSSIBLE%(MAX_BREAKS)
	DIM				BREAK_TOTCOM%(MAX_BREAKS)
	DIM				BREAK_AVAIL%(MAX_BREAKS)
	DIM	RFA			CONFLICT_RFA(MAX_CONF)

	!
	! Functions
	!
	EXTERNAL STRING FUNCTION PRNT_DATE
	EXTERNAL STRING FUNCTION PRNT_TIME
	EXTERNAL LONG   FUNCTION TIME_CODE(STRING)

	EXTERNAL STRING FUNCTION TV_FIND_CONFLICT
	EXTERNAL LONG   FUNCTION TV_FIND_PRIORITY

	%PAGE

	!*******************************************************************
	! Initilization
	!*******************************************************************

	ON ERROR GOTO 19000

	!
	! Assign BADNESS values, which should be assigned in the
	! control file eventually.
	!
	DEFAULT_SPOT_SEPER% = TIME_CODE(TV_CONTROL::DEFAULT_SPOT_SEPER)
	DEFAULT_PROD_SEPER% = TIME_CODE(TV_CONTROL::DEFAULT_PROD_SEPER)

	!
	! Let them know that we are working on scheduling now
	!
	SMG_STATUS% = SMG$PUT_LINE(IO_MESSAGE%, &
		"Starting to schedule " + PRNT_DATE(SCHED_DATE$, 8%))

	!
	! Load in all the breaks for this date.
	!
	GOSUB LoadBreaks
	GOTO ExitProgram IF TOTAL_BREAKS% = 0%

1000	!*******************************************************************
	! See if there is anything in the list of spots to schedule.
	! This file is in priority order (Highest priority will come
	! first since the negitive priority values are stored).
	!
	! We immediately delete the order because we need to do it
	! sometime, and now is as good of a time as any.
	!*******************************************************************

	RESET #TV_SKED_WORK.CH%
	GET #TV_SKED_WORK.CH%
	DELETE #TV_SKED_WORK.CH%

1010	!*******************************************************************
	! Now that we have found the record, we need to get the schedule
	! order that goes with this ordered spot.
	!
	! We need to keep the order in its own buffer for reasons of
	! efficiency.  Note that we don't need to run the order through
	! TV_FIND_ROTATION, because we are going to order one spot.
	! The total spots had been handled already when the entries were
	! made to the work file.
	!*******************************************************************

	GET #TV_COMMER_SKED_INSTR.CH%, &
		KEY #0 EQ TV_SKED_WORK::FRMNUM + TV_SKED_WORK::SKED_NUM, &
		REGARDLESS &
		IF (TV_SKED_WORK::FRMNUM <> TV_COMMER_SKED_INSTR::FRMNUM) OR &
			(TV_SKED_WORK::SKED_NUM <> TV_COMMER_SKED_INSTR::SKED_NUM)


	TV_COMMER_SKED_INSTR1 = TV_COMMER_SKED_INSTR

1020	!*******************************************************************
	! Get the header for this commercial record
	!*******************************************************************

	GET #TV_COMMER.CH%, &
		KEY #0 EQ TV_SKED_WORK::FRMNUM, &
		REGARDLESS &
		IF (TV_COMMER::FRMNUM <> TV_SKED_WORK::FRMNUM)

	TV_COMMER1 = TV_COMMER

	!*******************************************************************
	! Find out what conflicts this customer number has.
	!*******************************************************************

	SPOT_CONFLICT$, THIS_CONFLICT$ = &
		TV_FIND_CONFLICT(TV_COMMER1::CUSNUM, &
		TV_COMMER1::CONFLICT)

	SPOT_CUSTOM$ = TV_COMMER1::CUSNUM

 !	SMG_STATUS% = SMG$PUT_LINE(IO_MESSAGE%, &
 !		"Scheduling " + TV_COMMER_SKED_INSTR1::FRMNUM + " " + &
 !		TV_COMMER_SKED_INSTR1::SKED_NUM + " " + THIS_CONFLICT$)

	GOSUB LoadConflicts

	GOSUB ScheduleSpot

2000	!*******************************************************************
	! After processing one item, try for the next one.
	!*******************************************************************

	GOTO 1000

	%PAGE

4000	!*******************************************************************
	! Load in the breaks for this date, so that they don't need to
	! be loaded for every order
	!*******************************************************************

 LoadBreaks:

	CALL TV_LOAD_BREAKS(IO_MESSAGE%, TOTAL_BREAKS%, TV_BREAK_ARRAY(), &
		BREAK_TOTCOM%(), BREAK_AVAIL%())

	SMG_STATUS% = SMG$PUT_LINE(IO_MESSAGE%, &
		NUM1$(TOTAL_BREAKS%) + " Breaks loaded.")

	RETURN

	%PAGE

5000	!*******************************************************************
	! Find the really impossible conflicts for the list of available
	! breaks.
	!*******************************************************************

 LoadConflicts:

	!
	! Initialize the working fields
	!
	FOR LOOP% = 1% TO TOTAL_BREAKS%

		!
		! Initialize arrays
		!
		BREAK_BADNESS%(LOOP%) = &
			TV_BREAK_ARRAY(LOOP%)::PRIORITY * &
				TV_CONTROL::BADNESS_PRIORITY + &
			RND * TV_CONTROL::BADNESS_RANDOM + &
			TV_CONTROL::BADNESS_PER_SPOT * BREAK_TOTCOM%(LOOP%)

		!
		! Adjust badness for the match code
		!
		IF TRM$(TV_BREAK_ARRAY(LOOP%)::MATCH) <> ""
		THEN
			IF TV_BREAK_ARRAY(LOOP%)::MATCH = TV_COMMER1::MATCH
			THEN
				!
				! If the break matches, increase breaks
				! priority
				!
				BREAK_BADNESS%(LOOP%) = &
					BREAK_BADNESS%(LOOP%) + &
					TV_CONTROL::BADNESS_MATCH
			ELSE
				!
				! If the break doesn't match, reduce it's
				! priority.
				!
				BREAK_BADNESS%(LOOP%) = &
					BREAK_BADNESS%(LOOP%) - &
					TV_CONTROL::BADNESS_MATCH
			END IF
		END IF

		!
		! If the break doesn't work for this orders from/to
		! time slot, then immediately mark the break as impossible.
		!
		! NOTE:  If they want a commercial to run from 05:00 to 06:00,
		! and there is a break at 06:00, the commercial WILL
		! be able to schedule at 06:00 even though it may run
		! slightly after the fact.
		!
		IF (TV_BREAK_ARRAY(LOOP%)::SCH_TIME < &
			TV_COMMER_SKED_INSTR1::START_TIME) OR &
			(TV_BREAK_ARRAY(LOOP%)::SCH_TIME > &
			TV_COMMER_SKED_INSTR1::END_TIME)
		THEN
			BREAK_IMPOSSIBLE%(LOOP%) = -1%
			GOTO 5080
		ELSE
			BREAK_IMPOSSIBLE%(LOOP%) = 0%
		END IF

		!
		! If there is no possible way that the spot could fit into this
		! break, then mark it as impossible right now.
		!
		IF TV_BREAK_ARRAY(LOOP%)::LENGTH < TV_COMMER_SKED_INSTR1::LENGTH
		THEN
			BREAK_IMPOSSIBLE%(LOOP%) = -1%
			GOTO 5080
		END IF

5010		!
		! Check this break to see if there is already a spot
		! scheduled for this form
		!
		GET #TV_TEMP_CONFLICT.CH%, &
			KEY #0 EQ TV_BREAK_ARRAY(LOOP%)::SCH_TIME + &
				"A" + TV_COMMER1::FRMNUM

		BREAK_IMPOSSIBLE%(LOOP%) = -1%
		GOTO 5080

5015		!
		! Or one scheduled nearby
		!
		GET #TV_TEMP_CONFLICT.CH%, &
			KEY #0 EQ TV_BREAK_ARRAY(LOOP%)::SCH_TIME + &
				"B" + TV_COMMER1::FRMNUM

		BREAK_IMPOSSIBLE%(LOOP%) = -1%
		GOTO 5080

5020		!
		! Search for conflicts against this order
		!
		FOR LOOP1% = 1% TO LEN(THIS_CONFLICT$) STEP 9%

			ONE_CONFLICT$ = MID(THIS_CONFLICT$, LOOP1%, 8%)

			!
			! Search for first over this break
			!
			GET #TV_TEMP_CONFLICT.CH%, &
				KEY #0 GE TV_BREAK_ARRAY(LOOP%)::SCH_TIME + &
					"D" + ONE_CONFLICT$

			WHILE (TV_TEMP_CONFLICT::TTIME = TV_BREAK_ARRAY(LOOP%)::SCH_TIME) AND &
				(TV_TEMP_CONFLICT::TFLAG = "D") AND &
				(TV_TEMP_CONFLICT::TKEY = ONE_CONFLICT$)

				!
				! Check against priority, and status code.
				! Status must be (S-SC) to be able to reschedule
				! it at another time.
				!
				IF (TV_TEMP_CONFLICT::TPRIOR >= TV_COMMER1::PRIORITY) OR &
					(TV_TEMP_CONFLICT::TSTATUS <> "SSC")
				THEN
					BREAK_IMPOSSIBLE%(LOOP%) = -1%
					GOTO 5080
				END IF

				!
				! Increase badness of this break
				!
				BREAK_BADNESS%(LOOP%) = BREAK_BADNESS%(LOOP%) + &
					TV_CONTROL::BADNESS_CONFLICT

				!
				! Get next conflict record
				!
				GET #TV_TEMP_CONFLICT.CH%
			NEXT

5030			!
			! Search for a conflict in a break within the time
			! specified by the PROD_SEP field.
			!
			PROD_SEP% = TIME_CODE(TV_COMMER1::PROD_SEP)
			PROD_SEP% = DEFAULT_PROD_SEPER% &
				IF PROD_SEP% = 0%
			SCH_TIME% = TIME_CODE(TV_BREAK_ARRAY(LOOP%)::SCH_TIME)

			FOR LOOP2% = 1% TO TOTAL_BREAKS%
				!
				! Skip if break out of range
				!
				TEMP% = TIME_CODE(TV_BREAK_ARRAY(LOOP2%)::SCH_TIME)
				GOTO 5040 &
					IF (TEMP% <= SCH_TIME% - PROD_SEP%) OR &
						(TEMP% >= SCH_TIME% + PROD_SEP%)

				!
				! Search for first over this break
				!
				GET #TV_TEMP_CONFLICT.CH%, &
					KEY #0 GE TV_BREAK_ARRAY(LOOP2%)::SCH_TIME + &
						"C" + ONE_CONFLICT$

				WHILE (TV_TEMP_CONFLICT::TTIME = TV_BREAK_ARRAY(LOOP2%)::SCH_TIME) AND &
					(TV_TEMP_CONFLICT::TFLAG = "C") AND &
					(TV_TEMP_CONFLICT::TKEY = ONE_CONFLICT$)

					!
					! Check against priority, and status code.
					!
					IF (TV_TEMP_CONFLICT::TPRIOR >= TV_COMMER1::PRIORITY) OR &
						(TV_TEMP_CONFLICT::TSTATUS <> "SSC")
					THEN
						BREAK_IMPOSSIBLE%(LOOP%) = -1%
						GOTO 5080
					END IF

					!
					! Increase badness of this break
					!
					BREAK_BADNESS%(LOOP%) = BREAK_BADNESS%(LOOP%) + &
						TV_CONTROL::BADNESS_CONFLICT

					!
					! Get next conflict record
					!
					GET #TV_TEMP_CONFLICT.CH%
				NEXT


5040			NEXT LOOP2%

5075		NEXT LOOP1%

5080	NEXT LOOP%

5090	!
	! Finished
	!
 !	SMG_STATUS% = SMG$PUT_LINE(IO_MESSAGE%, &
 !		"Out of load conflict")

	RETURN

	%PAGE

6000	!*******************************************************************
	! Schedule on spot, given the information in the conflict/etc.
	! arrays created for this order.
	!
	! This routine loops through all breaks, based on the badness,
	! and tries to find the best possible break to place the
	! commercial.
	!*******************************************************************

 ScheduleSpot:

6010	!
	! Search for the break with the smallest badness
	!
	TEMP% = TV_CONTROL::BADNESS_WORST	! Hope for better than this
	BEST_BREAK% = 0%			! Currently best break
	MUST_DELETE% = 0%			! Commercials that must be
						! deleted from this break for
						! it to be able to schedule

	FOR LOOP% = 1% TO TOTAL_BREAKS%

		IF (BREAK_IMPOSSIBLE%(LOOP%) = 0%) AND &
			(BREAK_BADNESS%(LOOP%) < TEMP%)
		THEN
			TEMP% = BREAK_BADNESS%(LOOP%)
			BEST_BREAK% = LOOP%
		END IF

	NEXT LOOP%

	!
	! If there were no breaks with a decent badness, then give
	! up on this spot.
	!
6050	IF BEST_BREAK% = 0%
	THEN
		SMG_STATUS% = SMG$PUT_LINE(IO_MESSAGE%, &
			" Can't Schedule " + &
			TV_COMMER_SKED_INSTR1::FRMNUM + " " + &
			TV_COMMER_SKED_INSTR1::SKED_NUM)

		!
		! Delete all others from the same line, since they
		! will have the same problem being scheduled as
		! this one.
		!
		WHILE 1%
			GET #TV_SKED_WORK.CH%, KEY#0 EQ &
				TV_COMMER_SKED_INSTR1::FRMNUM + &
				TV_COMMER_SKED_INSTR1::SKED_NUM
			DELETE #TV_SKED_WORK.CH%

			SMG_STATUS% = SMG$PUT_LINE(IO_MESSAGE%, &
				" Can't Schedule " + &
				TV_COMMER_SKED_INSTR1::FRMNUM + " " + &
				TV_COMMER_SKED_INSTR1::SKED_NUM)
		NEXT
	END IF

6100	!
	! Now, look at the given break and see if there is any
	! problems with scheduling there due to existing spots.
	! If we can't schedule there, mark the break as
	! impossible and go back to get the next least bad
	! place.
	!
	! First we look to see if we can get rid of all of the spots
	! with conflicts against this spot (The priorities must be
	! less than this order, equal will NOT do it).
	!
	BREAK_AVAILS% = BREAK_AVAIL%(BEST_BREAK%)
	BREAK_TOTCOM% = BREAK_TOTCOM%(BEST_BREAK%)

 !	SMG_STATUS% = SMG$PUT_LINE(IO_MESSAGE%, &
 !		"In search to delete")

6120	!
	! Search for conflicts against this order
	!
	FOR LOOP1% = 1% TO LEN(THIS_CONFLICT$) STEP 9%

		ONE_CONFLICT$ = MID(THIS_CONFLICT$, LOOP1%, 8%)

		!
		! Search for first over this break
		!
		GET #TV_TEMP_CONFLICT.CH%, &
			KEY #0 GE TV_BREAK_ARRAY(BEST_BREAK%)::SCH_TIME + &
				"D" + ONE_CONFLICT$

		WHILE (TV_TEMP_CONFLICT::TTIME = TV_BREAK_ARRAY(BEST_BREAK%)::SCH_TIME) AND &
			(TV_TEMP_CONFLICT::TFLAG = "D") AND &
			(TV_TEMP_CONFLICT::TKEY = ONE_CONFLICT$)

			!
			! Mark this commercial to be deleted
			!
			QBERT_STRING = TV_TEMP_CONFLICT::TRFA
			GOTO 6125 &
				IF CONFLICT_RFA(LOOP%) = QBERT_RFA &
				FOR LOOP% = 1% TO MUST_DELETE%
			MUST_DELETE% = MUST_DELETE% + 1%
			CONFLICT_RFA(MUST_DELETE%) = QBERT_RFA

			!
			! Get next conflict record
			!
6125			GET #TV_TEMP_CONFLICT.CH%
		NEXT

6130		!
		! Search for a conflict in a break within the time
		! specified by the PROD_SEP field.
		!
		PROD_SEP% = TIME_CODE(TV_COMMER1::PROD_SEP)
		PROD_SEP% = DEFAULT_PROD_SEPER% &
			IF PROD_SEP% = 0%
		SCH_TIME% = TIME_CODE(TV_BREAK_ARRAY(BEST_BREAK%)::SCH_TIME)

		FOR LOOP2% = 1% TO TOTAL_BREAKS%
			!
			! Skip if break out of range
			!
			TEMP% = TIME_CODE(TV_BREAK_ARRAY(LOOP2%)::SCH_TIME)
			GOTO 6140 &
				IF (TEMP% <= SCH_TIME% - PROD_SEP%) OR &
					(TEMP% >= SCH_TIME% + PROD_SEP%)

			!
			! Search for first over this break
			!
			GET #TV_TEMP_CONFLICT.CH%, &
				KEY #0 GE TV_BREAK_ARRAY(LOOP2%)::SCH_TIME + &
					"C" + ONE_CONFLICT$

			WHILE (TV_TEMP_CONFLICT::TTIME = TV_BREAK_ARRAY(LOOP2%)::SCH_TIME) AND &
				(TV_TEMP_CONFLICT::TFLAG = "C") AND &
				(TV_TEMP_CONFLICT::TKEY = ONE_CONFLICT$)

				!
				! Mark this commercial to be deleted
				!
				QBERT_STRING = TV_TEMP_CONFLICT::TRFA
				GOTO 6135 &
					IF CONFLICT_RFA(LOOP%) = QBERT_RFA &
					FOR LOOP% = 1% TO MUST_DELETE%
				MUST_DELETE% = MUST_DELETE% + 1%
				CONFLICT_RFA(MUST_DELETE%) = QBERT_RFA

				!
				! Get next conflict record
				!
6135				GET #TV_TEMP_CONFLICT.CH%
			NEXT

6140		NEXT LOOP2%

6175	NEXT LOOP1%

 !	SMG_STATUS% = SMG$PUT_LINE(IO_MESSAGE%, &
 !		"Out of search to delete")


6180	!
	! If we have enough avail space in this break, then skip
	! attempt to remove enough commercials from the break to
	! make room for it.
	!
	GOTO 6200 IF &
		(TIME_CODE(TV_COMMER_SKED_INSTR1::LENGTH) <= BREAK_AVAILS%) AND &
		((BREAK_TOTCOM% < TV_BREAK_ARRAY(BEST_BREAK%)::MAXCOM) OR &
			(TV_BREAK_ARRAY(BEST_BREAK%)::MAXCOM = 0%))

	!
	! Search the commercials in the break to see if we can remove
	! enough to fit this one in its place.
	!
	! Note: This code is not yet written.
	!
	BREAK_IMPOSSIBLE%(BEST_BREAK%) = -1%
	GOTO 6010

6200	!
	! We know that we can place the commercial here now, and there
	! is plenty of room for it, so LETS PUT IT IN
	!

	!
	! We need to delete all of the records that give us problems.
	! We know what they are because we store them in the string
	! NEED_TO_DELETE$.
	!
	FOR LOOP% = 1% TO MUST_DELETE%

6210		GET #TV_LOGSPOTS.CH%, &
			RFA CONFLICT_RFA(LOOP%)

		GET #TV_COMMER.CH%, &
			KEY#0 EQ TV_LOGSPOTS::FRMNUM, &
			REGARDLESS &
			IF (TV_COMMER::FRMNUM <> TV_LOGSPOTS::FRMNUM)

		GET #TV_COMMER_SKED_INSTR.CH%, &
			KEY #0 EQ TV_LOGSPOTS::FRMNUM + TV_LOGSPOTS::SKEDNUM, &
			REGARDLESS

		TV_SKED_WORK::FRMNUM = TV_LOGSPOTS::FRMNUM
		TV_SKED_WORK::SKED_NUM = TV_LOGSPOTS::SKEDNUM
		TV_SKED_WORK::PRIORITY = &
			-TV_FIND_PRIORITY(TV_COMMER, TV_COMMER_SKED_INSTR)

		PUT #TV_SKED_WORK.CH%

		DELETE #TV_LOGSPOTS.CH%

6220		QBERT_RFA = CONFLICT_RFA(LOOP%)

		GET #TV_TEMP_CONFLICT.CH%, KEY #1% EQ QBERT_STRING

		DELETE #TV_TEMP_CONFLICT.CH%

		GOTO 6220

6230		SMG_STATUS% = SMG$PUT_LINE(IO_MESSAGE%, &
			" UnScheduling " + TV_LOGSPOTS::FRMNUM + " " + &
			TV_LOGSPOTS::SKEDNUM + " " + &
			PRNT_TIME(TV_LOGSPOTS::SCH_TIME, 0%))

	NEXT LOOP%

	!
	! Now, we get to add the record into the file (finally).
	!
	TV_LOGSPOTS::CUSNUM = TV_COMMER1::CUSNUM
	TV_LOGSPOTS::FRMNUM = TV_COMMER1::FRMNUM
	TV_LOGSPOTS::SKEDNUM = TV_COMMER_SKED_INSTR1::SKED_NUM
	TV_LOGSPOTS::SCH_DATE = SCHED_DATE$
	TV_LOGSPOTS::SCH_TIME = TV_BREAK_ARRAY(BEST_BREAK%)::SCH_TIME
	TV_LOGSPOTS::SEQNUM = FORMAT$(INT(RND * 90.0), "<0>#")
	TV_LOGSPOTS::RATE = TV_COMMER_SKED_INSTR1::RATE_PER_SPOT
	TV_LOGSPOTS::SCH_TYPE = "0"
	TV_LOGSPOTS::SPOTS_FLAG = "S"
	TV_LOGSPOTS::SPOTS_CODE = "SC"
	TV_LOGSPOTS::LENGTH = TV_COMMER_SKED_INSTR1::LENGTH
	TV_LOGSPOTS::AGENCY_NUM = TV_COMMER1::AGENCY_NUM
	TV_LOGSPOTS::CARTNUM = ""
	TV_LOGSPOTS::CUTNUM = ""
	TV_LOGSPOTS::FROM_TIME_SLOT= TV_COMMER_SKED_INSTR1::START_TIME
	TV_LOGSPOTS::TO_TIME_SLOT= TV_COMMER_SKED_INSTR1::END_TIME
	TV_LOGSPOTS::INVNUM = ""
	TV_LOGSPOTS::INVDAT = ""
	TV_LOGSPOTS::POSTDATE = ""
	TV_LOGSPOTS::RUN_TIME = TV_BREAK_ARRAY(BEST_BREAK%)::SCH_TIME
	TV_LOGSPOTS::CLASS = TV_COMMER1::CLASS
	TV_LOGSPOTS::DESCR = TV_COMMER1::DESCR

	PUT #TV_LOGSPOTS.CH%

	!
	! Fix avails and totcom information for this break
	!
	BREAK_AVAIL%(BEST_BREAK%) = BREAK_AVAIL%(BEST_BREAK%) - &
		TIME_CODE(TV_LOGSPOTS::LENGTH)
	BREAK_TOTCOM%(BEST_BREAK%) = BREAK_TOTCOM%(BEST_BREAK%) + 1%

	!
	! Load in all information for the break conflicts
	!
	QBERT_STRING = STRING$(6%, 0%)
	QBERT_RFA = GETRFA(TV_LOGSPOTS.CH%)

	TV_TEMP_CONFLICT::TRFA = QBERT_STRING
	TV_TEMP_CONFLICT::TPRIOR = TV_COMMER1::PRIORITY
	TV_TEMP_CONFLICT::TLENGTH = TIME_CODE(TV_LOGSPOTS::LENGTH)
	TV_TEMP_CONFLICT::TSTATUS = TV_LOGSPOTS::SPOTS_FLAG + TV_LOGSPOTS::SPOTS_CODE

	SPOT_SEP% = TIME_CODE(TV_COMMER1::SPOT_SEP)
	SPOT_SEP% = DEFAULT_SPOT_SEPER% IF SPOT_SEP% = 0%
	PROD_SEP% = TIME_CODE(TV_COMMER1::PROD_SEP)
	PROD_SEP% = DEFAULT_PROD_SEPER% IF PROD_SEP% = 0%
	SCH_TIME% = TIME_CODE(TV_LOGSPOTS::SCH_TIME)

	FOR LOOP% = 1% TO TOTAL_BREAKS%

		TEMP% = TIME_CODE(TV_BREAK_ARRAY(LOOP%)::SCH_TIME)

		!
		! Is this the exact time slot for this spot?
		!
		IF (TEMP% = SCH_TIME%)
		THEN
			!
			! Conflict here
			!
			TV_TEMP_CONFLICT::TTIME = TV_BREAK_ARRAY(LOOP%)::SCH_TIME
			TV_TEMP_CONFLICT::TFLAG = "A"
			TV_TEMP_CONFLICT::TKEY = TV_LOGSPOTS::FRMNUM
			PUT #TV_TEMP_CONFLICT.CH%

			!
			! Conflict here
			!
			TV_TEMP_CONFLICT::TFLAG = "C"
			FOR LOOP1% = 1% TO LEN(THIS_CONFLICT$) STEP 9%
				TV_TEMP_CONFLICT::TKEY = MID(THIS_CONFLICT$, LOOP1%, 8%)
				PUT #TV_TEMP_CONFLICT.CH%
			NEXT LOOP1%
			GOTO 6240
		END IF

		!
		! Is there a form conflict
		!
		IF (TEMP% > SCH_TIME% - SPOT_SEP%) AND &
			(TEMP% < SCH_TIME% + SPOT_SEP%)
		THEN
			!
			! Conflict here
			!
			TV_TEMP_CONFLICT::TTIME = TV_BREAK_ARRAY(LOOP%)::SCH_TIME
			TV_TEMP_CONFLICT::TFLAG = "B"
			TV_TEMP_CONFLICT::TKEY = TV_LOGSPOTS::FRMNUM
			PUT #TV_TEMP_CONFLICT.CH%
		END IF

		!
		! Is there a conflict code conflict
		!
		IF (TEMP% > SCH_TIME% - PROD_SEP%) AND &
			(TEMP% < SCH_TIME% + PROD_SEP%)
		THEN
			!
			! Conflict here
			!
			TV_TEMP_CONFLICT::TTIME = TV_BREAK_ARRAY(LOOP%)::SCH_TIME
			TV_TEMP_CONFLICT::TFLAG = "D"
			FOR LOOP1% = 1% TO LEN(THIS_CONFLICT$) STEP 9%
				TV_TEMP_CONFLICT::TKEY = MID(THIS_CONFLICT$, LOOP1%, 8%)
				PUT #TV_TEMP_CONFLICT.CH%
			NEXT LOOP1%
		END IF

6240	NEXT LOOP%

	SMG_STATUS% = SMG$PUT_LINE(IO_MESSAGE%, &
		" Scheduled " + TV_LOGSPOTS::FRMNUM + " " + &
		TV_LOGSPOTS::SKEDNUM + " " + &
		PRNT_TIME(TV_LOGSPOTS::SCH_TIME, 0%))

6290	RETURN

	%PAGE

	!*******************************************************************
	! Exit from the program
	!*******************************************************************

 ExitProgram:
	EXIT SUB

	%PAGE

19000	!*******************************************************************
	! Error trapping
	!*******************************************************************

 !	SMG_STATUS% = SMG$PUT_LINE(IO_MESSAGE%, &
 !		"Error " + NUM1$(ERR) + " at " + NUM1$(ERL))

	SELECT ERL

	!
	! Nothing left to schedule
	!
	CASE 1000%
		RESUME ExitProgram

	!
	! Unable to load header
	!
	CASE 1020%
		RESUME 2000

	!
	! No form at this break
	!
	CASE 5010%
		RESUME 5015

	!
	! No form near this break
	!
	CASE 5015%
		RESUME 5020

	!
	! No conflict/end of conflict
	!
	CASE 5020%
		RESUME 5030

	CASE 5030%
		RESUME 5040

	!
	! End of removing items to be scheduled that cannot be
	!
	CASE 6050%
		RESUME 6290

	CASE 6120%
		RESUME 6130

	CASE 6130%
		RESUME 6140

	!
	! Unable to find header/form for spot
	!
	CASE 6210%
		BREAK_IMPOSSIBLE%(BEST_BREAK%) = -1%
		RESUME 6010

	CASE 6220%
		RESUME 6230

	END SELECT

	RESUME HelpError

 HelpError:
	CALL HELP_3MESSAGE(SCOPE, ERN$ + " " + NUM1$(ERL) + " " + NUM1$(ERR), &
		"ERR", "TV_SKED_ORDER", "ERROR" + NUM1$(ERR))

	GOTO ExitProgram

	END SUB
