1	%TITLE "TV_SPEC_FILL_LOG - Fill the log with promo's"
	%SBTTL "TV System"
	%IDENT "V3.6a Calico"

	!
	! COPYRIGHT (C) 1987, 1988 BY
	! Computer Management Center, Inc.
	! Idaho Falls, Idaho.
	!
	! This software is furnished under a license and may be used and
	! copied only in accordance with terms of such license and with
	! the inclusion of the above copyright notice.  This software or
	! any other copies thereof may not be provided or otherwise made
	! available to any other person.  No title to and ownership of
	! the software is hereby transferred.
	!
	! The information in this software is subject to change without
	! notice and should not be construed as a commitment by
	! Computer Management Center, Inc.
	!
	! CMC assumes no responsibility for the use or reliability of
	! its software on equipment which is not supported by CMC.
	!
	!++
	!
	! Abstract:
	!
	!	This program is used to fill the log with
	!	promo's and id's.
	!
	! Index:
	!
	!
	! Input:
	!
	!
	! Output:
	!
	!
	! Example:
	!
	!
	! Environment:
	!
	!	VAX/VMS BASIC+2 V4.4
	!
	! Compile:
	!
	!	$ BAS TV_SOURCE:TV_SPEC_FILL_LOG
	!	$ LINK/EXE=TV_EXE: TV_SPEC_FILL_LOG, FUNC_LIB:CMCLINK/OPTION
	!	$ DELETE TV_SPEC_FILL_LOG.OBJ;*
	!
	! Author:
	!
	!	12/23/87 - Kevin Handy
	!
	! Modification history:
	!
	!	06/27/89 - Kevin Handy
	!		Modified to use READ_INITIALIZE.
	!
	!	04/15/95 - Kevin Handy
	!		(V3.6)
	!		Update to V3.6 coding standards
	!
	!	08/22/98 - Kevin Handy
	!		(V3.6a Calico)
	!		Update to V3.6a coding standards
	!--
	%PAGE

	OPTION SIZE = (INTEGER LONG, REAL GFLOAT)

	!
	! Include files
	!
	%INCLUDE "FUNC_INCLUDE:FUNCTION.HB"

	MAP (SCOPE) SCOPE_STRUCT SCOPE


	!
	! Include files
	!
	%INCLUDE "SOURCE:[TV.OPEN]TV_LOGSPOTS.HB"
	MAP	(TV_LOGSPOTS)		TV_LOGSPOTS_CDD		TV_LOGSPOTS

	%INCLUDE "SOURCE:[TV.OPEN]TV_LOG_BREAK.HB"
	MAP	(TV_LOG_BREAK)		TV_LOG_BREAK_CDD	TV_LOG_BREAK

	%INCLUDE "SOURCE:[TV.OPEN]TV_FILL.HB"
	MAP	(TV_FILL)		TV_FILL_CDD		TV_FILL

	%INCLUDE "SOURCE:[TV.OPEN]TV_BREAK_TYPE.HB"
	MAP	(TV_BREAK_TYPE)		TV_BREAK_TYPE_CDD	TV_BREAK_TYPE

	!
	! Channels
	!
	MAP (CH_TV_FILL) TV_FILL.CH%

	!
	! External functions
	!
	EXTERNAL STRING FUNCTION DATE_TODAY
	EXTERNAL LONG   FUNCTION DATE_DAYCODE
	EXTERNAL STRING FUNCTION DATE_INVDCODE
	EXTERNAL LONG   FUNCTION DATE_DAYOFWEEK
	EXTERNAL STRING FUNCTION PRNT_DATE
	EXTERNAL STRING FUNCTION PRNT_TIME
	EXTERNAL LONG   FUNCTION TIME_CODE
	EXTERNAL STRING FUNCTION TIME_INVCODE

	%PAGE

	!*******************************************************************
	! Initialization.  Init error trapping, terminal, Set up for help,
	! allocate channels.
	!*******************************************************************

	!
	! Set up error trapping
	!
	ON ERROR GOTO 19000

	! Init terminal
	!
	CALL READ_INITIALIZE

	!
	! Init help
	!
	SCOPE::PRG_IDENT = "PROG"
	SCOPE::PRG_PROGRAM = "TV_SPEC_FILL_LOG"
	SCOPE::PRG_ITEM = "DATE"

	!
	! Init day of week array
	!
	SCHED_DAY$(1%) = "Monday"
	SCHED_DAY$(2%) = "Tuesday"
	SCHED_DAY$(3%) = "Wednesday"
	SCHED_DAY$(4%) = "Thursday"
	SCHED_DAY$(5%) = "Friday"
	SCHED_DAY$(6%) = "Saturday"
	SCHED_DAY$(7%) = "Sunday"

	!*******************************************************************
	! Create windows to play in
	!*******************************************************************

	SMG_STATUS% = SMG$BEGIN_PASTEBOARD_UPDATE(SCOPE::SMG_PBID)

	!
	! Create IO window
	!
	SMG_STATUS% = SMG$CREATE_VIRTUAL_DISPLAY(4%, 78%, IO_INPUT%, &
		SMG$M_BORDER)
	SMG_STATUS% = SMG$LABEL_BORDER(IO_INPUT%, "Fill Log")
	SMG_STATUS% = SMG$PUT_CHARS(IO_INPUT%, "Fill date", 2%, 1%)
 !	SMG_STATUS% = SMG$PUT_CHARS(IO_INPUT%, "To date", 3%, 1%)
	SMG_STATUS% = SMG$PASTE_VIRTUAL_DISPLAY(IO_INPUT%, SCOPE::SMG_PBID, 2%, 2%)

	!
	! Create entertainment window
	!
	SMG_STATUS% = SMG$CREATE_VIRTUAL_DISPLAY(9%, 78%, IO_MESSAGE%, &
		SMG$M_BORDER)
	SMG_STATUS% = SMG$LABEL_BORDER(IO_MESSAGE%, "Messages")
	SMG_STATUS% = SMG$PASTE_VIRTUAL_DISPLAY(IO_MESSAGE%, SCOPE::SMG_PBID, 7%, 2%)
	SMG_STATUS% = SMG$SET_CURSOR_ABS(IO_MESSAGE%, 1%, 1%)

	!
	! Create question window
	!
	SMG_STATUS% = SMG$CREATE_VIRTUAL_DISPLAY(2%, 78%, IO_QUERY%, &
		SMG$M_BORDER)
	SMG_STATUS% = SMG$LABEL_BORDER(IO_QUERY%, "Query")
	SMG_STATUS% = SMG$PASTE_VIRTUAL_DISPLAY(IO_QUERY%, SCOPE::SMG_PBID, 17%, 2%)

	SMG_STATUS% = SMG$END_PASTEBOARD_UPDATE(SCOPE::SMG_PBID)

	%PAGE

	!*******************************************************************
	! Open up files that can be opened up and left open
	!*******************************************************************

1010	%INCLUDE "SOURCE:[TV.OPEN]TV_FILL.MOD"

1020	%INCLUDE "SOURCE:[TV.OPEN]TV_BREAK_TYPE.OPN"

1030	!

	%PAGE

1200	!*******************************************************************
	! Get from date
	!*******************************************************************

	FROM_DATE$ = ENTR_3DATE(SCOPE, IO_INPUT%, "2;13", &
		"Extend from date", DATE_TODAY, 0%, "'E", "")

	SELECT SCOPE::SCOPE_EXIT
		CASE SMG$K_TRM_F10, SMG$K_TRM_CTRLZ, SMG$K_TRM_F8
			GOTO ExitProgram

		CASE SMG$K_TRM_UP
			GOTO 1200

		CASE 10%, 12%, 13%, 0%, SMG$K_TRM_DOWN, SMG$K_TRM_DO

		CASE ELSE
			CALL ENTR_3BADKEY(SCOPE, SCOPE::SCOPE_EXIT)
			GOTO 1200
	END SELECT

1400	!*******************************************************************
	! Get to date
	!*******************************************************************

	TO_DATE$ = FROM_DATE$

	%PAGE

1600	!*******************************************************************
	! Loop from FROM_DATE to TO_DATE
	!*******************************************************************

	FROM_DATE% = DATE_DAYCODE(FROM_DATE$)
	TO_DATE%   = DATE_DAYCODE(TO_DATE$)

	!
	! If they make it to here, then the range must be OK.
	! Loop through all days in that range and extend the
	! logs.
	!
	FOR DAY_LOOP% = FROM_DATE% TO TO_DATE%

		!
		! Figure out all sorts of useful things about the
		! given date.
		!
		SCHED_DATE$ = DATE_INVDCODE(DAY_LOOP%)
		SCHED_DAY%  = DATE_DAYOFWEEK(DAY_LOOP%)

		!
		! Extend the schedule for that date
		!
		GOSUB CopyOneDate

	NEXT DAY_LOOP%

	CALL ENTR_3MESSAGE(SCOPE, "Finished!", 0%)

	GOTO ExitProgram

	%PAGE

4000	!*******************************************************************
	! Assign copy to one date
	!*******************************************************************

 CopyOneDate:

	SMG_STATUS% = SMG$PUT_LINE(IO_MESSAGE%, &
		"Starting " + PRNT_DATE(SCHED_DATE$, 8%) + " (" + &
		SCHED_DAY$(SCHED_DAY%) + ")")

4010	!
	! Open up the spots file for the given date
	!
	%INCLUDE "SOURCE:[TV.OPEN]TV_LOGSPOTS.MOD"

4020	!
	! Open up the break file
	!
	%INCLUDE "SOURCE:[TV.OPEN]TV_LOG_BREAK.OPN"

4040	!
	! Get front of break file
	!
	RESET #TV_LOG_BREAK.CH%, KEY #1%

4100	!
	! Pull in one record from the break file
	!
	GET #TV_LOG_BREAK.CH%

	V% = SMG$PUT_LINE(IO_MESSAGE%, &
		"Break " + &
		PRNT_TIME(TV_LOG_BREAK::SCH_TIME, 0%) + " " + &
		TV_LOG_BREAK::BRKTYPE + " " + &
		TV_LOG_BREAK::DESCR)

	V% = SMG$PUT_LINE(IO_MESSAGE%, &
		"                  " + &
		TV_LOG_BREAK::COMMENT) &
		UNLESS TV_LOG_BREAK::COMMENT = ""

4110	!
	! Determine if it is a usable break type
	!
	GET #TV_BREAK_TYPE.CH%, KEY #0 EQ TV_LOG_BREAK::BRKTYPE &
		IF (TV_BREAK_TYPE::BTYPE <> TV_LOG_BREAK::BRKTYPE)

	GOTO 4100 IF (INSTR(1%, "023", TV_BREAK_TYPE::BFLAG) = 0%)

4200	!
	! Search for spots filling up the breaks.
	!
	TOTAL_AVAILS% = TIME_CODE(TV_LOG_BREAK::LENGTH)

	FIND #TV_LOGSPOTS.CH%, &
		KEY #1% GE TV_LOG_BREAK::SCH_TIME

4210	GET #TV_LOGSPOTS.CH%

4220	IF TV_LOGSPOTS::SCH_TIME = TV_LOG_BREAK::SCH_TIME
	THEN
		TOTAL_AVAILS% = TOTAL_AVAILS% - TIME_CODE(TV_LOGSPOTS::LENGTH)

		IF TV_LOGSPOTS::SCH_TYPE = "1"
		THEN
			GET #TV_FILL.CH%, KEY#0 EQ TV_LOGSPOTS::CARTNUM

			V% = SMG$PUT_LINE(IO_MESSAGE%, &
				" Fill " + &
				TV_LOGSPOTS::CARTNUM + " " + &
				TV_LOGSPOTS::CUTNUM + " " + &
				TV_FILL::DESCR)
		END IF

		GOTO 4210
	END IF

4300	!
	! If we have avails for this break, then we need to ask the
	! user to fill up the time somehow.
	!
	GOTO 4100 IF TOTAL_AVAILS% = 0%

	V% = SMG$PUT_CHARS(IO_QUERY%, &
		PRNT_TIME(TIME_INVCODE(TOTAL_AVAILS%), 0%) + " avails left", 1%, 1%)

	V% = SMG$PUT_CHARS(IO_QUERY%, &
		"Add fill no. to break:", 2%, 1%)

	TEMP_COUNT% = 90%

	!
	! Ask for fill number
	!
	FILLNUM$ = ENTR_3STRING(SCOPE, IO_QUERY%, "2;24", "Fill to add", &
		"          ", 0%, "'E", "")

	SELECT SCOPE::SCOPE_EXIT
		!
		! Exit keys
		!
		CASE SMG$K_TRM_F8, SMG$K_TRM_F10
			GOTO ExitProgram

		!
		! Normal keys
		!
		CASE 0%, 10%, 12%, 13%, SMG$K_TRM_DO

		!
		! All others
		!
		CASE ELSE
			CALL ENTR_3BADKEY(SCOPE, SCOPE::SCOPE_EXIT)
			GOTO 4300

	END SELECT

	!
	! Give up on break if no fill requested
	!
	GOTO 4100 IF FILLNUM$ = ""

4400	!
	! Search for the fill to see if it really exists
	!
	FILLNUM$ = LEFT(FILLNUM$ + SPACE$(10%), 10%)
	GET #TV_FILL.CH%, KEY#0 EQ FILLNUM$

	IF TIME_CODE(TV_FILL::LENGTH) > TOTAL_AVAILS%
	THEN
		CALL ENTR_3MESSAGE(SCOPE, &
			"There is not enough avails for this one!", 0%)
		GOTO 4300
	END IF

4500	!
	! Create a record and slop it into the spots file
	!
	TV_FILL::CURRENT_CUT = TV_FILL::CURRENT_CUT + 1%
	TV_FILL::CURRENT_CUT = 1% &
		IF TV_FILL::CURRENT_CUT > TV_FILL::CUTS

	TV_LOGSPOTS::CUSNUM	= ""
	TV_LOGSPOTS::FRMNUM	= ""
	TV_LOGSPOTS::SKEDNUM	= ""
	TV_LOGSPOTS::SCH_DATE	= SCHED_DATE$
	TV_LOGSPOTS::SCH_TIME	= TV_LOG_BREAK::SCH_TIME
	TV_LOGSPOTS::RATE	= 0.0
	TV_LOGSPOTS::SCH_TYPE	= "1"
	TV_LOGSPOTS::SPOTS_FLAG	= "S"
	TV_LOGSPOTS::SPOTS_CODE	= "FI"
	TV_LOGSPOTS::LENGTH	= TV_FILL::LENGTH
	TV_LOGSPOTS::AGENCY_NUM	= ""
	TV_LOGSPOTS::CARTNUM	= TV_FILL::FILNUM
	TV_LOGSPOTS::CUTNUM	= FORMAT$(TV_FILL::CURRENT_CUT, "<0>#")
	TV_LOGSPOTS::FROM_TIME_SLOT= ""
	TV_LOGSPOTS::TO_TIME_SLOT	= ""
	TV_LOGSPOTS::INVNUM	= ""
	TV_LOGSPOTS::INVDAT	= ""
	TV_LOGSPOTS::POSTDATE	= ""
	TV_LOGSPOTS::RUN_TIME	= ""
	TV_LOGSPOTS::CLASS	= TV_FILL::FCLASS
	TV_LOGSPOTS::CONFLICT	= ""
	TV_LOGSPOTS::DESCR	= TV_FILL::DESCR

	TEMP_COUNT% = TEMP_COUNT% + 1% IF TEMP_COUNT% < 99%
	TV_LOGSPOTS::SEQNUM	= FORMAT$(TEMP_COUNT%, "<0>#")

	PUT #TV_LOGSPOTS.CH%

	V% = SMG$PUT_LINE(IO_MESSAGE%, &
		" Fill " + &
		TV_LOGSPOTS::CARTNUM + " " + &
		TV_LOGSPOTS::CUTNUM + " " + &
		TV_FILL::DESCR)

4550	UPDATE #TV_FILL.CH%

	TOTAL_AVAILS% = TOTAL_AVAILS% - TIME_CODE(TV_FILL::LENGTH)

	GOTO 4300

4900	!
	! Finish up this file, close it, and exit back for next day
	!
	CLOSE #TV_LOGSPOTS.CH%, TV_LOG_BREAK.CH%

	RETURN

	%PAGE

	!*******************************************************************
	! Exit from the program
	!*******************************************************************

 ExitProgram:
	CLOSE #TV_COPY_INSTR.CH%, TV_COPY_SPOTS.CH%

	CALL SUBR_3EXITPROGRAM(SCOPE, "", "")

	%PAGE

19000	!*******************************************************************
	! Trap errors
	!*******************************************************************

	IF ERR = 154%
	THEN
		SLEEP 5%
		RESUME
	END IF

	SELECT ERL

	!
	! Error opening fill file
	!
	CASE 1010%
		FINAME$ = "TV_FILL"
		RESUME HelpFile

	!
	! Error opening break type file
	!
	CASE 1020%
		RESUME 1030

	!
	! Error opening spots file for a specified date
	!
	CASE 4010%
		FINAME$ = "TV_LOGSPOTS"
		RESUME HelpFile

	!
	! Error opening break file
	!
	CASE 4020%
		FINAME$ = "TV_LOG_BREAK"
		RESUME HelpFile

	!
	! Out of breaks
	!
	CASE 4040%, 4100%
		RESUME 4900

	!
	! If we cannot find the break type definition, then
	! we will assume that if has avails.
	!
	CASE 4110%
		RESUME 4200

	!
	! Unable to load in more spots
	!
	CASE 4200%, 4210%
		RESUME 4300

	!
	! Unable to describe fill
	!
	CASE 4220%
		V% = SMG$PUT_LINE(IO_MESSAGE%, &
			" Fill " + &
			TV_LOGSPOTS::CARTNUM + " " + &
			TV_LOGSPOTS::CUTNUM + " " + &
			"??????????")
		RESUME 4210

	!
	! No such fill
	!
	CASE 4400%
		CALL ENTR_3MESSAGE(SCOPE, "Undefined fill number!", 1%)
		RESUME 4300

	END SELECT

	RESUME HelpError

 HelpError:
	CALL HELP_3MESSAGE(SCOPE, ERN$ + " " + NUM1$(ERL) + " " + NUM1$(ERR), &
		"ERR", SCOPE::PRG_PROGRAM, "ERROR" + NUM1$(ERR))

	RESUME ExitProgram

 HelpFile:
	CALL HELP_3MESSAGE(SCOPE, ERN$ + " " + NUM1$(ERL) + " " + NUM1$(ERR), &
		"ERR", FINAME$, "ERROR" + NUM1$(ERR))

	RESUME ExitProgram

	END
